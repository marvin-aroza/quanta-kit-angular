{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-2ebe9039fefd1a84896e5c5754daba0b85dcd16d9f537dfbb59c3f649a6ecd6060d143168dcab47e34bbb1138cdeb55d59ee4f92d3b764335a5f7d0c825a1c02",
            "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qk-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nARIA label for accessibility",
                    "description": "<p>ARIA label for accessibility</p>\n",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaPressed",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nARIA pressed state for toggle buttons",
                    "description": "<p>ARIA pressed state for toggle buttons</p>\n",
                    "line": 66,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom CSS classes to apply",
                    "description": "<p>Custom CSS classes to apply</p>\n",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the button is disabled",
                    "description": "<p>Whether the button is disabled</p>\n",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the button should take full width",
                    "description": "<p>Whether the button should take full width</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideTextOnLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether to hide text content when loading",
                    "description": "<p>Whether to hide text content when loading</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the button is in loading state",
                    "description": "<p>Whether the button is in loading state</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the button has rounded corners",
                    "description": "<p>Whether the button has rounded corners</p>\n",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton size",
                    "description": "<p>Button size</p>\n",
                    "line": 36,
                    "type": "ButtonSize",
                    "decorators": []
                },
                {
                    "name": "square",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the button has no border radius",
                    "description": "<p>Whether the button has no border radius</p>\n",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "testId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTest ID for testing purposes",
                    "description": "<p>Test ID for testing purposes</p>\n",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton type attribute",
                    "description": "<p>Button type attribute</p>\n",
                    "line": 39,
                    "type": "ButtonType",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton variant/style",
                    "description": "<p>Button variant/style</p>\n",
                    "line": 33,
                    "type": "ButtonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "blurred",
                    "defaultValue": "new EventEmitter<FocusEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBlur event emitter",
                    "description": "<p>Blur event emitter</p>\n",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nClick event emitter",
                    "description": "<p>Click event emitter</p>\n",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "focused",
                    "defaultValue": "new EventEmitter<FocusEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFocus event emitter",
                    "description": "<p>Focus event emitter</p>\n",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles button blur events.\n",
                    "description": "<p>Handles button blur events.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3758,
                                "end": 3763,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3752,
                                "end": 3757,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The blur event</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles button click events.\nPrevents action if button is disabled or loading.\n",
                    "description": "<p>Handles button click events.\nPrevents action if button is disabled or loading.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3372,
                                "end": 3377,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3366,
                                "end": 3371,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mouse click event</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles button focus events.\n",
                    "description": "<p>Handles button focus events.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3595,
                                "end": 3600,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3589,
                                "end": 3594,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The focus event</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>A customizable button component with multiple variants, sizes, and states.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">```html\n&lt;qk-button variant=&quot;primary&quot; size=&quot;lg&quot; (clicked)=&quot;handleClick()&quot;&gt;\n  Click me\n&lt;/qk-button&gt;</code></pre></div><b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\"></code></pre></div>",
            "rawdescription": "\n\nA customizable button component with multiple variants, sizes, and states.\n\n```html\n```html\n<qk-button variant=\"primary\" size=\"lg\" (clicked)=\"handleClick()\">\n  Click me\n</qk-button>\n```\n```",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, HostBinding, ChangeDetectionStrategy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/** Supported button visual variants */\r\nexport type ButtonVariant = 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'outline-primary' | 'outline-secondary' | 'outline-success' | 'outline-danger' | 'outline-warning' | 'outline-info' | 'outline-light' | 'outline-dark';\r\n\r\n/** Supported button sizes */\r\nexport type ButtonSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\r\n\r\n/** Supported button types for form submission */\r\nexport type ButtonType = 'button' | 'submit' | 'reset';\r\n\r\n/**\r\n * A customizable button component with multiple variants, sizes, and states.\r\n * \r\n * @example\r\n * ```html\r\n * <qk-button variant=\"primary\" size=\"lg\" (clicked)=\"handleClick()\">\r\n *   Click me\r\n * </qk-button>\r\n * ```\r\n */\r\n@Component({\r\n  selector: 'qk-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ButtonComponent {\r\n  /** Button variant/style */\r\n  @Input() variant: ButtonVariant = 'primary';\r\n  \r\n  /** Button size */\r\n  @Input() size: ButtonSize = 'md';\r\n  \r\n  /** Button type attribute */\r\n  @Input() type: ButtonType = 'button';\r\n  \r\n  /** Whether the button is disabled */\r\n  @Input() disabled = false;\r\n  \r\n  /** Whether the button is in loading state */\r\n  @Input() loading = false;\r\n  \r\n  /** Whether to hide text content when loading */\r\n  @Input() hideTextOnLoading = false;\r\n  \r\n  /** Whether the button should take full width */\r\n  @Input() fullWidth = false;\r\n  \r\n  /** Whether the button has rounded corners */\r\n  @Input() rounded = false;\r\n  \r\n  /** Whether the button has no border radius */\r\n  @Input() square = false;\r\n  \r\n  /** Custom CSS classes to apply */\r\n  @Input() customClass = '';\r\n  \r\n  /** ARIA label for accessibility */\r\n  @Input() ariaLabel = '';\r\n  \r\n  /** ARIA pressed state for toggle buttons */\r\n  @Input() ariaPressed: boolean | null = null;\r\n  \r\n  /** Test ID for testing purposes */\r\n  @Input() testId = '';\r\n  \r\n  /** Click event emitter */\r\n  @Output() clicked = new EventEmitter<MouseEvent>();\r\n  \r\n  /** Focus event emitter */\r\n  @Output() focused = new EventEmitter<FocusEvent>();\r\n  \r\n  /** Blur event emitter */\r\n  @Output() blurred = new EventEmitter<FocusEvent>();\r\n\r\n  /**\r\n   * Computes the CSS classes for the button based on current state and properties.\r\n   * @returns A space-separated string of CSS classes\r\n   */\r\n  get buttonClasses(): string {\r\n    const classes = [\r\n      'qk-btn',\r\n      `qk-btn--${this.variant}`,\r\n      `qk-btn--${this.size}`,\r\n    ];\r\n\r\n    if (this.fullWidth) {\r\n      classes.push('qk-btn--full-width');\r\n    }\r\n\r\n    if (this.rounded) {\r\n      classes.push('qk-btn--rounded');\r\n    }\r\n\r\n    if (this.square) {\r\n      classes.push('qk-btn--square');\r\n    }\r\n\r\n    if (this.loading) {\r\n      classes.push('qk-btn--loading');\r\n    }\r\n\r\n    if (this.disabled) {\r\n      classes.push('qk-btn--disabled');\r\n    }\r\n\r\n    if (this.customClass) {\r\n      classes.push(this.customClass);\r\n    }\r\n\r\n    return classes.join(' ');\r\n  }\r\n\r\n  /**\r\n   * Handles button click events.\r\n   * Prevents action if button is disabled or loading.\r\n   * @param event The mouse click event\r\n   */\r\n  handleClick(event: MouseEvent): void {\r\n    if (!this.disabled && !this.loading) {\r\n      this.clicked.emit(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button focus events.\r\n   * @param event The focus event\r\n   */\r\n  handleFocus(event: FocusEvent): void {\r\n    this.focused.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Handles button blur events.\r\n   * @param event The blur event\r\n   */\r\n  handleBlur(event: FocusEvent): void {\r\n    this.blurred.emit(event);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// Button Base Styles\r\n.qk-btn {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 0.5rem;\r\n  border: 1px solid transparent;\r\n  border-radius: 0.375rem;\r\n  font-family: inherit;\r\n  font-weight: 500;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  vertical-align: middle;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  transition: all 0.15s ease-in-out;\r\n  position: relative;\r\n  overflow: hidden;\r\n\r\n  &:focus {\r\n    outline: 2px solid transparent;\r\n    outline-offset: 2px;\r\n    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);\r\n  }\r\n\r\n  &:disabled,\r\n  &--disabled {\r\n    pointer-events: none;\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  // Button Variants\r\n  &--primary {\r\n    background-color: #3b82f6;\r\n    border-color: #3b82f6;\r\n    color: #ffffff;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #2563eb;\r\n      border-color: #2563eb;\r\n    }\r\n\r\n    &:active:not(:disabled) {\r\n      background-color: #1d4ed8;\r\n      border-color: #1d4ed8;\r\n    }\r\n  }\r\n\r\n  &--secondary {\r\n    background-color: #6b7280;\r\n    border-color: #6b7280;\r\n    color: #ffffff;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #4b5563;\r\n      border-color: #4b5563;\r\n    }\r\n\r\n    &:active:not(:disabled) {\r\n      background-color: #374151;\r\n      border-color: #374151;\r\n    }\r\n  }\r\n\r\n  &--success {\r\n    background-color: #10b981;\r\n    border-color: #10b981;\r\n    color: #ffffff;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #059669;\r\n      border-color: #059669;\r\n    }\r\n\r\n    &:active:not(:disabled) {\r\n      background-color: #047857;\r\n      border-color: #047857;\r\n    }\r\n  }\r\n\r\n  &--danger {\r\n    background-color: #ef4444;\r\n    border-color: #ef4444;\r\n    color: #ffffff;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #dc2626;\r\n      border-color: #dc2626;\r\n    }\r\n\r\n    &:active:not(:disabled) {\r\n      background-color: #b91c1c;\r\n      border-color: #b91c1c;\r\n    }\r\n  }\r\n\r\n  &--warning {\r\n    background-color: #f59e0b;\r\n    border-color: #f59e0b;\r\n    color: #ffffff;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #d97706;\r\n      border-color: #d97706;\r\n    }\r\n\r\n    &:active:not(:disabled) {\r\n      background-color: #b45309;\r\n      border-color: #b45309;\r\n    }\r\n  }\r\n\r\n  &--info {\r\n    background-color: #06b6d4;\r\n    border-color: #06b6d4;\r\n    color: #ffffff;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #0891b2;\r\n      border-color: #0891b2;\r\n    }\r\n\r\n    &:active:not(:disabled) {\r\n      background-color: #0e7490;\r\n      border-color: #0e7490;\r\n    }\r\n  }\r\n\r\n  &--light {\r\n    background-color: #f8fafc;\r\n    border-color: #e2e8f0;\r\n    color: #1e293b;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #f1f5f9;\r\n      border-color: #cbd5e1;\r\n    }\r\n\r\n    &:active:not(:disabled) {\r\n      background-color: #e2e8f0;\r\n      border-color: #94a3b8;\r\n    }\r\n  }\r\n\r\n  &--dark {\r\n    background-color: #1e293b;\r\n    border-color: #1e293b;\r\n    color: #ffffff;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #0f172a;\r\n      border-color: #0f172a;\r\n    }\r\n\r\n    &:active:not(:disabled) {\r\n      background-color: #020617;\r\n      border-color: #020617;\r\n    }\r\n  }\r\n\r\n  // Outline Variants\r\n  &--outline-primary {\r\n    background-color: transparent;\r\n    border-color: #3b82f6;\r\n    color: #3b82f6;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #3b82f6;\r\n      color: #ffffff;\r\n    }\r\n  }\r\n\r\n  &--outline-secondary {\r\n    background-color: transparent;\r\n    border-color: #6b7280;\r\n    color: #6b7280;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #6b7280;\r\n      color: #ffffff;\r\n    }\r\n  }\r\n\r\n  &--outline-success {\r\n    background-color: transparent;\r\n    border-color: #10b981;\r\n    color: #10b981;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #10b981;\r\n      color: #ffffff;\r\n    }\r\n  }\r\n\r\n  &--outline-danger {\r\n    background-color: transparent;\r\n    border-color: #ef4444;\r\n    color: #ef4444;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #ef4444;\r\n      color: #ffffff;\r\n    }\r\n  }\r\n\r\n  &--outline-warning {\r\n    background-color: transparent;\r\n    border-color: #f59e0b;\r\n    color: #f59e0b;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #f59e0b;\r\n      color: #ffffff;\r\n    }\r\n  }\r\n\r\n  &--outline-info {\r\n    background-color: transparent;\r\n    border-color: #06b6d4;\r\n    color: #06b6d4;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #06b6d4;\r\n      color: #ffffff;\r\n    }\r\n  }\r\n\r\n  &--outline-light {\r\n    background-color: transparent;\r\n    border-color: #e2e8f0;\r\n    color: #64748b;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #f8fafc;\r\n      border-color: #cbd5e1;\r\n    }\r\n  }\r\n\r\n  &--outline-dark {\r\n    background-color: transparent;\r\n    border-color: #1e293b;\r\n    color: #1e293b;\r\n\r\n    &:hover:not(:disabled) {\r\n      background-color: #1e293b;\r\n      color: #ffffff;\r\n    }\r\n  }\r\n\r\n  // Button Sizes\r\n  &--xs {\r\n    padding: 0.375rem 0.75rem;\r\n    font-size: 0.75rem;\r\n    line-height: 1rem;\r\n  }\r\n\r\n  &--sm {\r\n    padding: 0.5rem 1rem;\r\n    font-size: 0.875rem;\r\n    line-height: 1.25rem;\r\n  }\r\n\r\n  &--md {\r\n    padding: 0.625rem 1.25rem;\r\n    font-size: 0.875rem;\r\n    line-height: 1.25rem;\r\n  }\r\n\r\n  &--lg {\r\n    padding: 0.75rem 1.5rem;\r\n    font-size: 1rem;\r\n    line-height: 1.5rem;\r\n  }\r\n\r\n  &--xl {\r\n    padding: 0.875rem 1.75rem;\r\n    font-size: 1.125rem;\r\n    line-height: 1.75rem;\r\n  }\r\n\r\n  // Button Modifiers\r\n  &--full-width {\r\n    width: 100%;\r\n  }\r\n\r\n  &--rounded {\r\n    border-radius: 9999px;\r\n  }\r\n\r\n  &--square {\r\n    border-radius: 0;\r\n  }\r\n\r\n  &--loading {\r\n    pointer-events: none;\r\n  }\r\n}\r\n\r\n// Button Content\r\n.qk-btn-content {\r\n  transition: opacity 0.15s ease-in-out;\r\n\r\n  &--hidden {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n// Loading Spinner\r\n.qk-btn-spinner {\r\n  display: inline-block;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  border: 2px solid transparent;\r\n  border-top: 2px solid currentColor;\r\n  border-radius: 50%;\r\n  animation: qk-btn-spin 1s linear infinite;\r\n}\r\n\r\n@keyframes qk-btn-spin {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n// Focus visible for better accessibility\r\n.qk-btn:focus-visible {\r\n  outline: 2px solid transparent;\r\n  outline-offset: 2px;\r\n  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);\r\n}\r\n\r\n// High contrast mode support\r\n@media (prefers-contrast: high) {\r\n  .qk-btn {\r\n    border-width: 2px;\r\n  }\r\n}\r\n\r\n// Reduced motion support\r\n@media (prefers-reduced-motion: reduce) {\r\n  .qk-btn {\r\n    transition: none;\r\n  }\r\n  \r\n  .qk-btn-spinner {\r\n    animation: none;\r\n  }\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 84,
                        "rawdescription": "\n\nComputes the CSS classes for the button based on current state and properties.\n",
                        "description": "<p>Computes the CSS classes for the button based on current state and properties.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2567,
                                "end": 2620,
                                "kind": 342,
                                "id": 0,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "tagName": {
                                    "pos": 2568,
                                    "end": 2575,
                                    "kind": 80,
                                    "id": 0,
                                    "flags": 16842752,
                                    "transformFlags": 0,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>A space-separated string of CSS classes</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<button\r\n  [type]=\"type\"\r\n  [disabled]=\"disabled || loading\"\r\n  [class]=\"buttonClasses\"\r\n  (click)=\"handleClick($event)\"\r\n  (focus)=\"handleFocus($event)\"\r\n  (blur)=\"handleBlur($event)\"\r\n  [attr.aria-label]=\"ariaLabel\"\r\n  [attr.aria-pressed]=\"ariaPressed\"\r\n  [attr.data-testid]=\"testId\"\r\n>\r\n  <span *ngIf=\"loading\" class=\"qk-btn-spinner\" aria-hidden=\"true\"></span>\r\n  <ng-content select=\"[slot=icon-left]\"></ng-content>\r\n  <span class=\"qk-btn-content\" [class.qk-btn-content--hidden]=\"loading && hideTextOnLoading\">\r\n    <ng-content></ng-content>\r\n  </span>\r\n  <ng-content select=\"[slot=icon-right]\"></ng-content>\r\n</button>\r\n"
        },
        {
            "name": "ChipComponent",
            "id": "component-ChipComponent-5b740b1d14152a681615cca66f75b8a7d2fcc619b91414ccd91307a416b8cfff80d89eed382f9a50c31e78ab41751573315387753087fe46f22e82cf6eaa4375",
            "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qk-chip",
            "styleUrls": [
                "./chip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaPressed",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "clickable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "elevation",
                    "defaultValue": "'flat'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ChipElevation",
                    "decorators": []
                },
                {
                    "name": "hasAvatar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasLeadingIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasTrailingIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inList",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "removable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "removeAriaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "ChipSize",
                    "decorators": []
                },
                {
                    "name": "testId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'assist'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "ChipVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "blurred",
                    "defaultValue": "new EventEmitter<FocusEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                },
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                },
                {
                    "name": "focused",
                    "defaultValue": "new EventEmitter<FocusEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                },
                {
                    "name": "removed",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getAriaLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRemoveAriaLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTabIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRemove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRemoveKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nexport type ChipVariant = 'assist' | 'filter' | 'input' | 'suggestion';\r\nexport type ChipSize = 'sm' | 'md';\r\nexport type ChipElevation = 'flat' | 'elevated';\r\n\r\n@Component({\r\n  selector: 'qk-chip',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './chip.component.html',\r\n  styleUrls: ['./chip.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ChipComponent {\r\n  @Input() variant: ChipVariant = 'assist';\r\n  @Input() size: ChipSize = 'md';\r\n  @Input() elevation: ChipElevation = 'flat';\r\n  @Input() disabled = false;\r\n  @Input() selected = false;\r\n  @Input() clickable = true;\r\n  @Input() removable = false;\r\n  @Input() hasLeadingIcon = false;\r\n  @Input() hasTrailingIcon = false;\r\n  @Input() hasAvatar = false;\r\n  @Input() customClass = '';\r\n  @Input() ariaLabel = '';\r\n  @Input() ariaPressed: boolean | null = null;\r\n  @Input() removeAriaLabel = '';\r\n  @Input() testId = '';\r\n  @Input() inList = false;\r\n\r\n  @Output() clicked = new EventEmitter<MouseEvent>();\r\n  @Output() removed = new EventEmitter<MouseEvent>();\r\n  @Output() focused = new EventEmitter<FocusEvent>();\r\n  @Output() blurred = new EventEmitter<FocusEvent>();\r\n  @Output() selectionChange = new EventEmitter<boolean>();\r\n\r\n  get role(): string {\r\n    // Avoid nested interactive elements - if removable, don't set interactive roles on container\r\n    if (this.removable) return '';\r\n    if (this.variant === 'filter') return 'checkbox';\r\n    // Only make the chip interactive if it's clickable AND not removable (to avoid nested interactive elements)\r\n    return this.clickable && !this.disabled ? 'button' : '';\r\n  }\r\n\r\n  getTabIndex(): number {\r\n    if (this.disabled) return -1;\r\n    // Avoid nested interactive elements - if removable, don't make container focusable\r\n    if (this.removable) return -1;\r\n    // Make clickable chips focusable\r\n    if (this.clickable) return 0;\r\n    // Filter chips should be focusable for selection\r\n    if (this.variant === 'filter') return 0;\r\n    return -1;\r\n  }\r\n\r\n  getAriaLabel(): string {\r\n    return this.ariaLabel || '';\r\n  }\r\n\r\n  getRemoveAriaLabel(): string {\r\n    if (this.removeAriaLabel) {\r\n      return this.removeAriaLabel;\r\n    }\r\n    \r\n    // Provide a meaningful default for the remove button\r\n    return this.ariaLabel ? `Remove ${this.ariaLabel}` : 'Remove chip';\r\n  }\r\n\r\n  get chipClasses(): string {\r\n    const classes = [\r\n      'qk-chip',\r\n      `qk-chip--${this.variant}`,\r\n      `qk-chip--${this.size}`,\r\n      `qk-chip--${this.elevation}`\r\n    ];\r\n\r\n    if (this.disabled) classes.push('qk-chip--disabled');\r\n    if (this.selected) classes.push('qk-chip--selected');\r\n    if (this.clickable && !this.disabled) classes.push('qk-chip--clickable');\r\n    if (this.removable) classes.push('qk-chip--removable');\r\n    if (this.hasLeadingIcon) classes.push('qk-chip--has-leading-icon');\r\n    if (this.hasTrailingIcon) classes.push('qk-chip--has-trailing-icon');\r\n    if (this.hasAvatar) classes.push('qk-chip--has-avatar');\r\n    if (this.customClass) classes.push(this.customClass);\r\n\r\n    return classes.join(' ');\r\n  }\r\n\r\n  handleClick(event: MouseEvent): void {\r\n    if (this.disabled || !this.clickable) return;\r\n    \r\n    // If this is a removable chip, only handle click if it's not on the remove button\r\n    if (this.removable) {\r\n      const target = event.target as HTMLElement;\r\n      const removeButton = target.closest('.qk-chip__remove-button');\r\n      if (removeButton) return; // Let the remove button handle its own click\r\n    }\r\n\r\n    this.clicked.emit(event);\r\n    \r\n    if (this.variant === 'filter') {\r\n      this.selected = !this.selected;\r\n      this.selectionChange.emit(this.selected);\r\n    }\r\n  }\r\n\r\n  handleRemove(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n    if (!this.disabled) {\r\n      this.removed.emit(event);\r\n    }\r\n  }\r\n\r\n  handleRemoveKeydown(event: KeyboardEvent): void {\r\n    if ((event.key === 'Enter' || event.key === ' ') && !this.disabled) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.removed.emit(event as any);\r\n    }\r\n  }\r\n\r\n  handleKeydown(event: KeyboardEvent): void {\r\n    if (this.disabled || !this.clickable) return;\r\n\r\n    if (event.key === 'Enter' || event.key === ' ') {\r\n      event.preventDefault();\r\n      this.handleClick(event as any);\r\n    }\r\n  }\r\n\r\n  handleFocus(event: FocusEvent): void {\r\n    this.focused.emit(event);\r\n  }\r\n\r\n  handleBlur(event: FocusEvent): void {\r\n    this.blurred.emit(event);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// Material UI 3 Chip Component Styles\r\n// Reference: https://m3.material.io/components/chips/overview\r\n\r\n.qk-chip {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  height: 32px;\r\n  min-width: 48px;\r\n  padding: 0 16px;\r\n  border-radius: 8px;\r\n  border: 1px solid transparent;\r\n  font-family: inherit;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  line-height: 20px;\r\n  letter-spacing: 0.1px;\r\n  text-decoration: none;\r\n  cursor: default;\r\n  user-select: none;\r\n  transition: all 0.2s cubic-bezier(0.2, 0, 0, 1);\r\n  position: relative;\r\n  overflow: hidden;\r\n\r\n  // Focus outline\r\n  &:focus-visible {\r\n    outline: 3px solid #6750A4;\r\n    outline-offset: 2px;\r\n  }\r\n\r\n  // High contrast mode support\r\n  @media (prefers-contrast: high) {\r\n    &:focus-visible {\r\n      outline: 3px solid currentColor;\r\n    }\r\n  }\r\n\r\n  // Reduced motion support\r\n  @media (prefers-reduced-motion: reduce) {\r\n    transition: none;\r\n  }\r\n\r\n  // Base Variants\r\n  &--assist {\r\n    background-color: transparent;\r\n    border-color: #79747E;\r\n    color: #000000; /* Changed to black */\r\n\r\n    &:hover:not(.qk-chip--disabled) {\r\n      background-color: rgba(103, 80, 164, 0.08);\r\n    }\r\n\r\n    &.qk-chip--elevated {\r\n      background-color: #F7F2FA;\r\n      border-color: transparent;\r\n      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 1px 3px 1px rgba(0, 0, 0, 0.15);\r\n\r\n      &:hover:not(.qk-chip--disabled) {\r\n        background-color: #F1EBF4;\r\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 2px 6px 2px rgba(0, 0, 0, 0.15);\r\n      }\r\n    }\r\n  }\r\n\r\n  &--filter {\r\n    background-color: transparent;\r\n    border-color: #79747E;\r\n    color: #000000; /* Changed to black */\r\n\r\n    &:hover:not(.qk-chip--disabled) {\r\n      background-color: rgba(103, 80, 164, 0.08);\r\n    }\r\n\r\n    &.qk-chip--selected {\r\n      background-color: #D4E6F1; /* Changed to lighter blue for better contrast with black text */\r\n      border-color: transparent;\r\n      color: #000000; /* Ensure black text on selected state */\r\n\r\n      &:hover:not(.qk-chip--disabled) {\r\n        background-color: #C5D9ED; /* Slightly darker on hover */\r\n      }\r\n\r\n      &.qk-chip--elevated {\r\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 1px 3px 1px rgba(0, 0, 0, 0.15);\r\n      }\r\n    }\r\n\r\n    &.qk-chip--elevated {\r\n      background-color: #F7F2FA;\r\n      border-color: transparent;\r\n      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 1px 3px 1px rgba(0, 0, 0, 0.15);\r\n\r\n      &:hover:not(.qk-chip--disabled) {\r\n        background-color: #F1EBF4;\r\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 2px 6px 2px rgba(0, 0, 0, 0.15);\r\n      }\r\n    }\r\n  }\r\n\r\n  &--input {\r\n    background-color: transparent;\r\n    border-color: #79747E;\r\n    color: #000000; /* Changed to black */\r\n\r\n    &:hover:not(.qk-chip--disabled) {\r\n      background-color: rgba(103, 80, 164, 0.08);\r\n    }\r\n\r\n    &.qk-chip--elevated {\r\n      background-color: #F7F2FA;\r\n      border-color: transparent;\r\n      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 1px 3px 1px rgba(0, 0, 0, 0.15);\r\n\r\n      &:hover:not(.qk-chip--disabled) {\r\n        background-color: #F1EBF4;\r\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 2px 6px 2px rgba(0, 0, 0, 0.15);\r\n      }\r\n    }\r\n  }\r\n\r\n  &--suggestion {\r\n    background-color: transparent;\r\n    border-color: #79747E;\r\n    color: #000000; /* Changed to black */\r\n\r\n    &:hover:not(.qk-chip--disabled) {\r\n      background-color: rgba(103, 80, 164, 0.08);\r\n    }\r\n\r\n    &.qk-chip--elevated {\r\n      background-color: #F7F2FA;\r\n      border-color: transparent;\r\n      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 1px 3px 1px rgba(0, 0, 0, 0.15);\r\n\r\n      &:hover:not(.qk-chip--disabled) {\r\n        background-color: #F1EBF4;\r\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 2px 6px 2px rgba(0, 0, 0, 0.15);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Sizes\r\n  &--sm {\r\n    height: 24px;\r\n    padding: 0 12px;\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    border-radius: 6px;\r\n\r\n    .qk-chip__icon {\r\n      width: 16px;\r\n      height: 16px;\r\n    }\r\n\r\n    .qk-chip__avatar {\r\n      width: 16px;\r\n      height: 16px;\r\n    }\r\n\r\n    .qk-chip__remove-button {\r\n      width: 16px;\r\n      height: 16px;\r\n      margin-left: 4px;\r\n      margin-right: -4px;\r\n    }\r\n\r\n    .qk-chip__remove-icon svg {\r\n      width: 12px;\r\n      height: 12px;\r\n    }\r\n  }\r\n\r\n  &--md {\r\n    height: 32px;\r\n    padding: 0 16px;\r\n    font-size: 14px;\r\n    line-height: 20px;\r\n    border-radius: 8px;\r\n\r\n    .qk-chip__icon {\r\n      width: 18px;\r\n      height: 18px;\r\n    }\r\n\r\n    .qk-chip__avatar {\r\n      width: 24px;\r\n      height: 24px;\r\n    }\r\n\r\n    .qk-chip__remove-button {\r\n      width: 18px;\r\n      height: 18px;\r\n      margin-left: 8px;\r\n      margin-right: -6px;\r\n    }\r\n\r\n    .qk-chip__remove-icon svg {\r\n      width: 18px;\r\n      height: 18px;\r\n    }\r\n  }\r\n\r\n  // States\r\n  &--clickable {\r\n    cursor: pointer;\r\n\r\n    &:active:not(.qk-chip--disabled) {\r\n      transform: scale(0.98);\r\n    }\r\n  }\r\n\r\n  &--disabled {\r\n    opacity: 0.38;\r\n    cursor: not-allowed;\r\n    pointer-events: none;\r\n  }\r\n\r\n  // Icon spacing adjustments\r\n  &--has-leading-icon {\r\n    padding-left: 12px;\r\n\r\n    &.qk-chip--sm {\r\n      padding-left: 8px;\r\n    }\r\n  }\r\n\r\n  &--has-trailing-icon {\r\n    padding-right: 12px;\r\n\r\n    &.qk-chip--sm {\r\n      padding-right: 8px;\r\n    }\r\n  }\r\n\r\n  &--has-avatar {\r\n    padding-left: 4px;\r\n\r\n    &.qk-chip--sm {\r\n      padding-left: 4px;\r\n    }\r\n  }\r\n\r\n  &--removable {\r\n    padding-right: 4px;\r\n\r\n    &.qk-chip--sm {\r\n      padding-right: 4px;\r\n    }\r\n  }\r\n}\r\n\r\n// Chip Elements\r\n.qk-chip__label {\r\n  flex: 1;\r\n  min-width: 0;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n.qk-chip__icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-shrink: 0;\r\n  width: 18px;\r\n  height: 18px;\r\n  color: inherit;\r\n\r\n  &--leading {\r\n    margin-right: 8px;\r\n    margin-left: -4px;\r\n\r\n    .qk-chip--sm & {\r\n      margin-right: 4px;\r\n      margin-left: -4px;\r\n    }\r\n  }\r\n\r\n  &--trailing {\r\n    margin-left: 8px;\r\n    margin-right: -4px;\r\n\r\n    .qk-chip--sm & {\r\n      margin-left: 4px;\r\n      margin-right: -4px;\r\n    }\r\n  }\r\n\r\n  svg {\r\n    width: 100%;\r\n    height: 100%;\r\n    fill: currentColor;\r\n  }\r\n}\r\n\r\n.qk-chip__avatar {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-shrink: 0;\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-right: 8px;\r\n  margin-left: -4px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  background-color: #E8DEF8;\r\n  color: #000000; /* Changed to black for better contrast */\r\n\r\n  .qk-chip--sm & {\r\n    width: 16px;\r\n    height: 16px;\r\n    margin-right: 4px;\r\n    margin-left: -4px;\r\n  }\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n}\r\n\r\n.qk-chip__remove-button {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-shrink: 0;\r\n  width: 18px;\r\n  height: 18px;\r\n  margin-left: 8px;\r\n  margin-right: -6px;\r\n  padding: 0;\r\n  border: none;\r\n  border-radius: 50%;\r\n  background-color: transparent;\r\n  color: inherit;\r\n  cursor: pointer;\r\n  transition: all 0.2s cubic-bezier(0.2, 0, 0, 1);\r\n\r\n  &:hover:not(:disabled) {\r\n    background-color: rgba(103, 80, 164, 0.12);\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active:not(:disabled) {\r\n    background-color: rgba(103, 80, 164, 0.2);\r\n    transform: scale(0.95);\r\n  }\r\n\r\n  &:focus-visible {\r\n    outline: 3px solid #6750A4;\r\n    outline-offset: 1px;\r\n  }\r\n\r\n  // High contrast mode support\r\n  @media (prefers-contrast: high) {\r\n    &:focus-visible {\r\n      outline: 3px solid currentColor;\r\n    }\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.38;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  .qk-chip--sm & {\r\n    width: 16px;\r\n    height: 16px;\r\n    margin-left: 4px;\r\n    margin-right: -4px;\r\n  }\r\n}\r\n\r\n.qk-chip__remove-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  svg {\r\n    width: 18px;\r\n    height: 18px;\r\n    fill: currentColor;\r\n\r\n    .qk-chip--sm & {\r\n      width: 12px;\r\n      height: 12px;\r\n    }\r\n  }\r\n}\r\n\r\n// Ripple effect for clickable chips\r\n.qk-chip--clickable::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: currentColor;\r\n  opacity: 0;\r\n  border-radius: inherit;\r\n  transition: opacity 0.2s cubic-bezier(0.2, 0, 0, 1);\r\n  pointer-events: none;\r\n}\r\n\r\n.qk-chip--clickable:hover::before {\r\n  opacity: 0.08;\r\n}\r\n\r\n.qk-chip--clickable:active::before {\r\n  opacity: 0.12;\r\n}\r\n\r\n// High contrast mode support\r\n@media (prefers-contrast: high) {\r\n  .qk-chip {\r\n    border-width: 2px;\r\n  }\r\n}\r\n\r\n// Reduced motion support\r\n@media (prefers-reduced-motion: reduce) {\r\n  .qk-chip,\r\n  .qk-chip__remove-button,\r\n  .qk-chip::before {\r\n    transition: none;\r\n  }\r\n}\r\n\r\n// Dark theme support\r\n@media (prefers-color-scheme: dark) {\r\n  .qk-chip {\r\n    &--assist {\r\n      background-color: #F5F5F5; /* Light background for dark theme */\r\n      border-color: #CCCCCC;\r\n      color: #000000; /* Keep black text */\r\n\r\n      &:hover:not(.qk-chip--disabled) {\r\n        background-color: #E8E8E8;\r\n      }\r\n\r\n      &.qk-chip--elevated {\r\n        background-color: #FFFFFF;\r\n        border-color: transparent;\r\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 1px 3px 1px rgba(0, 0, 0, 0.15);\r\n\r\n        &:hover:not(.qk-chip--disabled) {\r\n          background-color: #F5F5F5;\r\n        }\r\n      }\r\n    }\r\n\r\n    &--filter {\r\n      background-color: #F5F5F5; /* Light background for dark theme */\r\n      border-color: #CCCCCC;\r\n      color: #000000; /* Keep black text */\r\n\r\n      &:hover:not(.qk-chip--disabled) {\r\n        background-color: #E8E8E8;\r\n      }\r\n\r\n      &.qk-chip--selected {\r\n        background-color: #B3D9FF; /* Light blue background for selected state */\r\n        border-color: transparent;\r\n        color: #000000; /* Keep black text */\r\n\r\n        &:hover:not(.qk-chip--disabled) {\r\n          background-color: #99CCFF;\r\n        }\r\n      }\r\n\r\n      &.qk-chip--elevated {\r\n        background-color: #FFFFFF;\r\n        border-color: transparent;\r\n\r\n        &:hover:not(.qk-chip--disabled) {\r\n          background-color: #F5F5F5;\r\n        }\r\n      }\r\n    }\r\n\r\n    &--input,\r\n    &--suggestion {\r\n      background-color: #F5F5F5; /* Light background for dark theme */\r\n      border-color: #CCCCCC;\r\n      color: #000000; /* Keep black text */\r\n\r\n      &:hover:not(.qk-chip--disabled) {\r\n        background-color: #E8E8E8;\r\n      }\r\n\r\n      &.qk-chip--elevated {\r\n        background-color: #FFFFFF;\r\n        border-color: transparent;\r\n\r\n        &:hover:not(.qk-chip--disabled) {\r\n          background-color: #F5F5F5;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .qk-chip__avatar {\r\n    background-color: #E8DEF8;\r\n    color: #000000; /* Keep black text */\r\n  }\r\n\r\n  // Hidden utility class\r\n  .qk-chip__hidden {\r\n    display: none !important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./chip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "role": {
                    "name": "role",
                    "getSignature": {
                        "name": "role",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                },
                "chipClasses": {
                    "name": "chipClasses",
                    "getSignature": {
                        "name": "chipClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 72
                    }
                }
            },
            "templateData": "<div\r\n  [class]=\"chipClasses\"\r\n  [attr.role]=\"role\"\r\n  [attr.aria-label]=\"getAriaLabel()\"\r\n  [attr.aria-checked]=\"role === 'checkbox' && variant === 'filter' ? selected : null\"\r\n  [attr.aria-disabled]=\"disabled\"\r\n  [attr.data-testid]=\"testId\"\r\n  (click)=\"handleClick($event)\"\r\n  (keydown)=\"handleKeydown($event)\"\r\n  (focus)=\"handleFocus($event)\"\r\n  (blur)=\"handleBlur($event)\"\r\n  [tabindex]=\"getTabIndex()\"\r\n>\r\n  <!-- Leading Icon -->\r\n  <span [style.display]=\"hasLeadingIcon ? 'inline' : 'none'\" class=\"qk-chip__icon qk-chip__icon--leading\" aria-hidden=\"true\">\r\n    <ng-content select=\"[leading-icon]\"></ng-content>\r\n  </span>\r\n\r\n  <!-- Avatar -->\r\n  <span [style.display]=\"hasAvatar ? 'inline' : 'none'\" class=\"qk-chip__avatar\" aria-hidden=\"true\">\r\n    <ng-content select=\"[avatar]\"></ng-content>\r\n  </span>\r\n\r\n  <!-- Label -->\r\n  <span class=\"qk-chip__label\">\r\n    <ng-content></ng-content>\r\n  </span>\r\n\r\n  <!-- Trailing Icon -->\r\n  <span [style.display]=\"hasTrailingIcon ? 'inline' : 'none'\" class=\"qk-chip__icon qk-chip__icon--trailing\" aria-hidden=\"true\">\r\n    <ng-content select=\"[trailing-icon]\"></ng-content>\r\n  </span>\r\n\r\n  <!-- Remove Button -->\r\n  <button\r\n    [style.display]=\"removable ? 'inline-flex' : 'none'\"\r\n    type=\"button\"\r\n    class=\"qk-chip__remove-button\"\r\n    [attr.aria-label]=\"getRemoveAriaLabel()\"\r\n    [disabled]=\"disabled\"\r\n    [tabindex]=\"disabled ? -1 : 0\"\r\n    (click)=\"handleRemove($event)\"\r\n    (keydown)=\"handleRemoveKeydown($event)\"\r\n    (focus)=\"$event.stopPropagation()\"\r\n  >\r\n    <span class=\"qk-chip__remove-icon\" aria-hidden=\"true\">\r\n      <ng-content select=\"[remove-icon]\">×</ng-content>\r\n    </span>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-c1adc3a3679984e3da2f1969e6087afd096a3e808fc3fe18212ce17ab31aaf525fff095c5bd4b5b60e52ac45e4cd8ee3ed3f789c07206fcc87a7b988277b3aa3",
            "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qk-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "maxWidth",
                    "defaultValue": "'320px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "offset",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "persistent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "TooltipPosition",
                    "decorators": []
                },
                {
                    "name": "showDelay",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "trigger",
                    "defaultValue": "'hover'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "TooltipTrigger",
                    "decorators": []
                },
                {
                    "name": "triggerTabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'plain'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "TooltipType",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tooltipHide",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                },
                {
                    "name": "tooltipShow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter"
                },
                {
                    "name": "tooltipToggle",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hasInteractiveChildren",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "hideTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isVisible",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "showTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltipElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tooltipElement'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tooltipId",
                    "defaultValue": "`qk-tooltip-${Date.now()}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "triggerElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'triggerElement', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearTimeouts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "detectInteractiveChildren",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTooltipMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTooltipMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTriggerBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTriggerClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTriggerFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTriggerMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTriggerMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scheduleHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scheduleShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  signal,\r\n  computed,\r\n  effect\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nexport type TooltipPosition = 'top' | 'bottom' | 'left' | 'right' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'left-start' | 'left-end' | 'right-start' | 'right-end';\r\nexport type TooltipTrigger = 'hover' | 'focus' | 'click' | 'manual';\r\nexport type TooltipType = 'plain' | 'rich';\r\n\r\n@Component({\r\n  selector: 'qk-tooltip',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './tooltip.component.html',\r\n  styleUrls: ['./tooltip.component.scss']\r\n})\r\nexport class TooltipComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @Input() text: string = '';\r\n  @Input() position: TooltipPosition = 'top';\r\n  @Input() trigger: TooltipTrigger = 'hover';\r\n  @Input() type: TooltipType = 'plain';\r\n  @Input() disabled: boolean = false;\r\n  @Input() showDelay: number = 500; // Material 3 spec: 500ms delay\r\n  @Input() hideDelay: number = 0;\r\n  @Input() persistent: boolean = false; // For rich tooltips\r\n  @Input() customClass: string = '';\r\n  @Input() maxWidth: string = '320px'; // Material 3 spec\r\n  @Input() triggerTabIndex: number = 0;\r\n  @Input() offset: number = 8; // Distance from trigger element\r\n\r\n  @Output() tooltipShow = new EventEmitter<void>();\r\n  @Output() tooltipHide = new EventEmitter<void>();\r\n  @Output() tooltipToggle = new EventEmitter<boolean>();\r\n\r\n  @ViewChild('triggerElement', { static: true }) triggerElement!: ElementRef<HTMLElement>;\r\n  @ViewChild('tooltipElement') tooltipElement?: ElementRef<HTMLElement>;\r\n\r\n  // Signals for reactive state management\r\n  isVisible = signal(false);\r\n  tooltipId = `qk-tooltip-${Date.now()}`;\r\n  \r\n  // Simple accessibility state\r\n  hasInteractiveChildren = signal(false);\r\n\r\n  // Computed class and style strings\r\n  get tooltipClasses(): string {\r\n    const classes = ['qk-tooltip', `qk-tooltip--${this.position}`, `qk-tooltip--${this.type}`];\r\n    if (this.customClass) classes.push(this.customClass);\r\n    if (this.persistent) classes.push('qk-tooltip--persistent');\r\n    return classes.join(' ');\r\n  }\r\n\r\n  get arrowClasses(): string {\r\n    return `qk-tooltip-arrow qk-tooltip-arrow--${this.position}`;\r\n  }\r\n\r\n  get tooltipStyles(): object {\r\n    return { 'max-width': this.maxWidth, 'z-index': '1000' };\r\n  }\r\n\r\n  private showTimeout?: number;\r\n  private hideTimeout?: number;\r\n\r\n  ngOnInit(): void {\r\n    if (!this.text && this.type === 'plain') {\r\n      console.warn('qk-tooltip: text is required for plain tooltips');\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.detectInteractiveChildren();\r\n  }\r\n\r\n  private detectInteractiveChildren(): void {\r\n    if (!this.triggerElement?.nativeElement) {\r\n      this.hasInteractiveChildren.set(false);\r\n      return;\r\n    }\r\n    \r\n    const interactiveElements = this.triggerElement.nativeElement.querySelectorAll('button, a, input, select, textarea');\r\n    this.hasInteractiveChildren.set(interactiveElements.length > 0);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.clearTimeouts();\r\n  }\r\n\r\n  // Trigger event handlers\r\n  onTriggerMouseEnter(): void {\r\n    if (this.disabled || this.trigger !== 'hover') return;\r\n    \r\n    this.clearTimeouts();\r\n    this.scheduleShow();\r\n  }\r\n\r\n  onTriggerMouseLeave(): void {\r\n    if (this.disabled || this.trigger !== 'hover') return;\r\n    \r\n    this.clearTimeouts();\r\n    this.scheduleHide();\r\n  }\r\n\r\n  onTriggerFocus(event?: FocusEvent): void {\r\n    if (this.disabled || this.trigger !== 'focus') return;\r\n    \r\n    this.clearTimeouts();\r\n    this.scheduleShow();\r\n  }\r\n\r\n  onTriggerBlur(event?: FocusEvent): void {\r\n    if (this.disabled || this.trigger !== 'focus') return;\r\n    \r\n    this.clearTimeouts();\r\n    this.scheduleHide();\r\n  }\r\n\r\n  onTriggerClick(event?: MouseEvent): void {\r\n    if (this.disabled || this.trigger !== 'click') return;\r\n    \r\n    this.toggle();\r\n  }\r\n\r\n  // Tooltip event handlers - simplified\r\n  onTooltipMouseEnter(): void {\r\n    // Keep tooltip visible when hovering over it\r\n  }\r\n\r\n  onTooltipMouseLeave(): void {\r\n    // Hide tooltip when leaving it\r\n    if (this.trigger === 'hover') {\r\n      this.scheduleHide();\r\n    }\r\n  }\r\n\r\n  // Public API methods\r\n  show(): void {\r\n    if (this.disabled || this.isVisible()) return;\r\n    \r\n    this.clearTimeouts();\r\n    this.isVisible.set(true);\r\n    this.tooltipShow.emit();\r\n    this.tooltipToggle.emit(true);\r\n  }\r\n\r\n  hide(): void {\r\n    if (!this.isVisible()) return;\r\n    \r\n    this.clearTimeouts();\r\n    this.isVisible.set(false);\r\n    this.tooltipHide.emit();\r\n    this.tooltipToggle.emit(false);\r\n  }\r\n\r\n  toggle(): void {\r\n    this.isVisible() ? this.hide() : this.show();\r\n  }\r\n\r\n  // Simplified private methods\r\n  private scheduleShow(): void {\r\n    this.clearTimeouts();\r\n    this.showTimeout = window.setTimeout(() => this.show(), this.showDelay);\r\n  }\r\n\r\n  private scheduleHide(): void {\r\n    this.clearTimeouts();\r\n    this.hideTimeout = window.setTimeout(() => this.hide(), this.hideDelay);\r\n  }\r\n\r\n  private clearTimeouts(): void {\r\n    if (this.showTimeout) {\r\n      clearTimeout(this.showTimeout);\r\n      this.showTimeout = undefined;\r\n    }\r\n    if (this.hideTimeout) {\r\n      clearTimeout(this.hideTimeout);\r\n      this.hideTimeout = undefined;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// Material 3 Tooltip Component Styles\r\n// Based on Material Design 3 specifications\r\n\r\n.qk-tooltip-trigger {\r\n  display: inline-block;\r\n  cursor: help;\r\n\r\n  &:focus {\r\n    outline: 2px solid var(--md-sys-color-primary);\r\n    outline-offset: 2px;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  &:focus:not(:focus-visible) {\r\n    outline: none;\r\n  }\r\n\r\n  // When containing interactive elements, don't apply interactive styles to wrapper\r\n  &:not([role=\"button\"]) {\r\n    cursor: default;\r\n    \r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n}\r\n\r\n.qk-tooltip {\r\n  position: fixed;\r\n  z-index: 1000;\r\n  pointer-events: auto;\r\n  transition: opacity 0.15s ease-in-out, transform 0.15s ease-in-out;\r\n  opacity: 1;\r\n  transform: scale(1);\r\n  filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3)) drop-shadow(0 1px 3px rgba(0, 0, 0, 0.15));\r\n\r\n  // Material 3 elevation tokens\r\n  box-shadow: \r\n    0px 1px 2px 0px rgba(0, 0, 0, 0.3),\r\n    0px 1px 3px 1px rgba(0, 0, 0, 0.15);\r\n\r\n  &--plain {\r\n    background: var(--md-sys-color-inverse-surface, #313033);\r\n    color: var(--md-sys-color-inverse-on-surface, #f4eff4);\r\n    border-radius: 4px;\r\n    max-width: 320px;\r\n    padding: 4px 8px;\r\n    font-family: var(--md-sys-typescale-body-small-font, 'Roboto', sans-serif);\r\n    font-size: var(--md-sys-typescale-body-small-size, 12px);\r\n    font-weight: var(--md-sys-typescale-body-small-weight, 400);\r\n    line-height: var(--md-sys-typescale-body-small-line-height, 16px);\r\n    letter-spacing: var(--md-sys-typescale-body-small-tracking, 0.4px);\r\n  }\r\n\r\n  &--rich {\r\n    background: var(--md-sys-color-surface-container, #f3edf7);\r\n    color: var(--md-sys-color-on-surface, #1d1b20);\r\n    border-radius: 12px;\r\n    max-width: 320px;\r\n    padding: 16px;\r\n    font-family: var(--md-sys-typescale-body-medium-font, 'Roboto', sans-serif);\r\n    font-size: var(--md-sys-typescale-body-medium-size, 14px);\r\n    font-weight: var(--md-sys-typescale-body-medium-weight, 400);\r\n    line-height: var(--md-sys-typescale-body-medium-line-height, 20px);\r\n    letter-spacing: var(--md-sys-typescale-body-medium-tracking, 0.25px);\r\n    border: 1px solid var(--md-sys-color-outline-variant, #cac4d0);\r\n  }\r\n\r\n  &--persistent {\r\n    pointer-events: auto;\r\n    cursor: default;\r\n\r\n    &:hover {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  // Position-specific spacing adjustments\r\n  &--top,\r\n  &--top-start,\r\n  &--top-end {\r\n    margin-bottom: 8px;\r\n  }\r\n\r\n  &--bottom,\r\n  &--bottom-start,\r\n  &--bottom-end {\r\n    margin-top: 8px;\r\n  }\r\n\r\n  &--left,\r\n  &--left-start,\r\n  &--left-end {\r\n    margin-right: 8px;\r\n  }\r\n\r\n  &--right,\r\n  &--right-start,\r\n  &--right-end {\r\n    margin-left: 8px;\r\n  }\r\n}\r\n\r\n.qk-tooltip-text {\r\n  word-wrap: break-word;\r\n  hyphens: auto;\r\n}\r\n\r\n.qk-tooltip-rich {\r\n  word-wrap: break-word;\r\n  hyphens: auto;\r\n\r\n  // Rich tooltip content styling\r\n  h1, h2, h3, h4, h5, h6 {\r\n    margin: 0 0 8px 0;\r\n    font-weight: var(--md-sys-typescale-title-small-weight, 500);\r\n  }\r\n\r\n  p {\r\n    margin: 0 0 8px 0;\r\n\r\n    &:last-child {\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n\r\n  ul, ol {\r\n    margin: 0 0 8px 0;\r\n    padding-left: 16px;\r\n  }\r\n\r\n  li {\r\n    margin-bottom: 4px;\r\n\r\n    &:last-child {\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n\r\n  a {\r\n    color: var(--md-sys-color-primary, #6750a4);\r\n    text-decoration: underline;\r\n\r\n    &:hover {\r\n      color: var(--md-sys-color-primary, #6750a4);\r\n      text-decoration: none;\r\n    }\r\n\r\n    &:focus {\r\n      outline: 2px solid var(--md-sys-color-primary, #6750a4);\r\n      outline-offset: 2px;\r\n      border-radius: 2px;\r\n    }\r\n  }\r\n\r\n  code {\r\n    background: var(--md-sys-color-surface-variant, #e7e0ec);\r\n    color: var(--md-sys-color-on-surface-variant, #49454f);\r\n    padding: 2px 4px;\r\n    border-radius: 4px;\r\n    font-family: 'Roboto Mono', 'Courier New', monospace;\r\n    font-size: 12px;\r\n  }\r\n}\r\n\r\n.qk-tooltip-arrow {\r\n  position: absolute;\r\n  width: 0;\r\n  height: 0;\r\n  pointer-events: none;\r\n\r\n  // Plain tooltip arrow\r\n  .qk-tooltip--plain & {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n\r\n    &--top {\r\n      bottom: -4px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      border-width: 4px 4px 0 4px;\r\n      border-top-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--top-start {\r\n      bottom: -4px;\r\n      left: 12px;\r\n      border-width: 4px 4px 0 4px;\r\n      border-top-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--top-end {\r\n      bottom: -4px;\r\n      right: 12px;\r\n      border-width: 4px 4px 0 4px;\r\n      border-top-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--bottom {\r\n      top: -4px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      border-width: 0 4px 4px 4px;\r\n      border-bottom-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--bottom-start {\r\n      top: -4px;\r\n      left: 12px;\r\n      border-width: 0 4px 4px 4px;\r\n      border-bottom-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--bottom-end {\r\n      top: -4px;\r\n      right: 12px;\r\n      border-width: 0 4px 4px 4px;\r\n      border-bottom-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--left {\r\n      right: -4px;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      border-width: 4px 0 4px 4px;\r\n      border-left-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--left-start {\r\n      right: -4px;\r\n      top: 12px;\r\n      border-width: 4px 0 4px 4px;\r\n      border-left-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--left-end {\r\n      right: -4px;\r\n      bottom: 12px;\r\n      border-width: 4px 0 4px 4px;\r\n      border-left-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--right {\r\n      left: -4px;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      border-width: 4px 4px 4px 0;\r\n      border-right-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--right-start {\r\n      left: -4px;\r\n      top: 12px;\r\n      border-width: 4px 4px 4px 0;\r\n      border-right-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n\r\n    &--right-end {\r\n      left: -4px;\r\n      bottom: 12px;\r\n      border-width: 4px 4px 4px 0;\r\n      border-right-color: var(--md-sys-color-inverse-surface, #313033);\r\n    }\r\n  }\r\n\r\n  // Rich tooltip arrow (smaller, different color)\r\n  .qk-tooltip--rich & {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n\r\n    &--top {\r\n      bottom: -6px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      border-width: 6px 6px 0 6px;\r\n      border-top-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--top-start {\r\n      bottom: -6px;\r\n      left: 16px;\r\n      border-width: 6px 6px 0 6px;\r\n      border-top-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--top-end {\r\n      bottom: -6px;\r\n      right: 16px;\r\n      border-width: 6px 6px 0 6px;\r\n      border-top-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--bottom {\r\n      top: -6px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      border-width: 0 6px 6px 6px;\r\n      border-bottom-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--bottom-start {\r\n      top: -6px;\r\n      left: 16px;\r\n      border-width: 0 6px 6px 6px;\r\n      border-bottom-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--bottom-end {\r\n      top: -6px;\r\n      right: 16px;\r\n      border-width: 0 6px 6px 6px;\r\n      border-bottom-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--left {\r\n      right: -6px;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      border-width: 6px 0 6px 6px;\r\n      border-left-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--left-start {\r\n      right: -6px;\r\n      top: 16px;\r\n      border-width: 6px 0 6px 6px;\r\n      border-left-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--left-end {\r\n      right: -6px;\r\n      bottom: 16px;\r\n      border-width: 6px 0 6px 6px;\r\n      border-left-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--right {\r\n      left: -6px;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      border-width: 6px 6px 6px 0;\r\n      border-right-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--right-start {\r\n      left: -6px;\r\n      top: 16px;\r\n      border-width: 6px 6px 6px 0;\r\n      border-right-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n\r\n    &--right-end {\r\n      left: -6px;\r\n      bottom: 16px;\r\n      border-width: 6px 6px 6px 0;\r\n      border-right-color: var(--md-sys-color-outline-variant, #cac4d0);\r\n    }\r\n  }\r\n}\r\n\r\n// Animation states\r\n.qk-tooltip {\r\n  &[aria-hidden=\"true\"] {\r\n    opacity: 0;\r\n    transform: scale(0.8);\r\n    pointer-events: none;\r\n  }\r\n}\r\n\r\n// High contrast mode support\r\n@media (prefers-contrast: high) {\r\n  .qk-tooltip--plain {\r\n    border: 2px solid var(--md-sys-color-outline, #79747e);\r\n  }\r\n\r\n  .qk-tooltip--rich {\r\n    border: 2px solid var(--md-sys-color-outline, #79747e);\r\n  }\r\n}\r\n\r\n// Reduced motion support\r\n@media (prefers-reduced-motion: reduce) {\r\n  .qk-tooltip {\r\n    transition: none;\r\n  }\r\n}\r\n\r\n// Dark theme support\r\n@media (prefers-color-scheme: dark) {\r\n  .qk-tooltip--plain {\r\n    background: var(--md-sys-color-inverse-surface, #f4eff4);\r\n    color: var(--md-sys-color-inverse-on-surface, #313033);\r\n  }\r\n\r\n  .qk-tooltip--rich {\r\n    background: var(--md-sys-color-surface-container, #211f26);\r\n    color: var(--md-sys-color-on-surface, #e6e0e9);\r\n    border-color: var(--md-sys-color-outline-variant, #4a4458);\r\n  }\r\n}\r\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "tooltipClasses": {
                    "name": "tooltipClasses",
                    "getSignature": {
                        "name": "tooltipClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 60
                    }
                },
                "arrowClasses": {
                    "name": "arrowClasses",
                    "getSignature": {
                        "name": "arrowClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 67
                    }
                },
                "tooltipStyles": {
                    "name": "tooltipStyles",
                    "getSignature": {
                        "name": "tooltipStyles",
                        "type": "object",
                        "returnType": "object",
                        "line": 71
                    }
                }
            },
            "templateData": "<div \r\n  #triggerElement\r\n  class=\"qk-tooltip-trigger\"\r\n  [attr.aria-describedby]=\"!hasInteractiveChildren() && isVisible() ? tooltipId : null\"\r\n  [attr.aria-expanded]=\"!hasInteractiveChildren() ? isVisible() : null\"\r\n  (mouseenter)=\"onTriggerMouseEnter()\"\r\n  (mouseleave)=\"onTriggerMouseLeave()\"\r\n  (focus)=\"onTriggerFocus($event)\"\r\n  (blur)=\"onTriggerBlur($event)\"\r\n  (click)=\"onTriggerClick($event)\"\r\n  [attr.tabindex]=\"!hasInteractiveChildren() ? triggerTabIndex : null\"\r\n  [attr.role]=\"!hasInteractiveChildren() ? 'button' : null\">\r\n  <ng-content></ng-content>\r\n</div>\r\n\r\n@if (isVisible()) {\r\n  <div \r\n    #tooltipElement\r\n    [id]=\"tooltipId\"\r\n    class=\"qk-tooltip\"\r\n    [class]=\"tooltipClasses\"\r\n    [style]=\"tooltipStyles\"\r\n    role=\"tooltip\"\r\n    [attr.aria-hidden]=\"!isVisible()\"\r\n    (mouseenter)=\"onTooltipMouseEnter()\"\r\n    (mouseleave)=\"onTooltipMouseLeave()\">\r\n    \r\n    @if (type === 'plain') {\r\n      <div class=\"qk-tooltip-text\">{{ text }}</div>\r\n    } @else {\r\n      <div class=\"qk-tooltip-rich\">\r\n        <ng-content select=\"[slot=tooltip-content]\"></ng-content>\r\n      </div>\r\n    }\r\n    \r\n    <div class=\"qk-tooltip-arrow\" [class]=\"arrowClasses\"></div>\r\n  </div>\r\n}\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "AssistChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    size: 'md',\r\n    elevation: 'flat'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\"\r\n      (clicked)=\"clicked($event)\">\r\n      Assist Chip\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "BottomPosition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    text: 'Tooltip positioned on bottom',\r\n    position: 'bottom',\r\n    trigger: 'hover'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\">\r\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\r\n            Bottom Tooltip\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    text: 'This is a simple tooltip',\r\n    position: 'top',\r\n    trigger: 'hover'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\">\r\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\r\n            Hover me\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    text: 'This tooltip is disabled',\r\n    position: 'top',\r\n    trigger: 'hover',\r\n    disabled: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\"\r\n          [disabled]=\"disabled\">\r\n          <button style=\"padding: 8px 16px; background: #666; color: white; border: none; border-radius: 4px; cursor: not-allowed;\">\r\n            Disabled Tooltip\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        disabled: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\">\r\n      Disabled Button\r\n    </qk-button>`\r\n    })\r\n}"
            },
            {
                "name": "FilterChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'filter',\r\n    size: 'md',\r\n    elevation: 'flat',\r\n    selected: false\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [selected]=\"selected\"\r\n      [disabled]=\"disabled\"\r\n      (clicked)=\"clicked($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Filter Chip\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "InputChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    size: 'md',\r\n    elevation: 'flat',\r\n    removable: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [removable]=\"removable\"\r\n      [disabled]=\"disabled\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\">\r\n      Input Chip\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "LeftPosition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    text: 'Tooltip positioned on left',\r\n    position: 'left',\r\n    trigger: 'hover'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\">\r\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\r\n            Left Tooltip\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        loading: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [loading]=\"loading\">\r\n      Loading Button\r\n    </qk-button>`\r\n    })\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TooltipComponent>",
                "defaultValue": "{\r\n  title: 'Components/Tooltip',\r\n  component: TooltipComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [TooltipComponent],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe Tooltip component provides contextual information when users hover, focus, or click on an element.\r\nBased on Material Design 3 guidelines for tooltips.\r\n\r\n## Features\r\n- Multiple positions (top, bottom, left, right)\r\n- Different trigger types (hover, click, focus)\r\n- Plain and rich content support\r\n- Customizable delays and styling\r\n- Accessibility support with ARIA attributes\r\n- Keyboard navigation\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<qk-tooltip text=\"Helpful information\" position=\"top\">\r\n  <button>Hover me</button>\r\n</qk-tooltip>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    text: {\r\n      control: 'text',\r\n      description: 'Tooltip text content'\r\n    },\r\n    position: {\r\n      control: 'select',\r\n      options: ['top', 'bottom', 'left', 'right'] as TooltipPosition[],\r\n      description: 'Position of the tooltip relative to trigger'\r\n    },\r\n    trigger: {\r\n      control: 'select',\r\n      options: ['hover', 'click', 'focus'] as TooltipTrigger[],\r\n      description: 'How the tooltip is triggered'\r\n    },\r\n    type: {\r\n      control: 'select',\r\n      options: ['plain', 'rich'] as TooltipType[],\r\n      description: 'Type of tooltip content'\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Whether the tooltip is disabled'\r\n    },\r\n    showDelay: {\r\n      control: 'number',\r\n      description: 'Delay before showing tooltip (ms)'\r\n    },\r\n    hideDelay: {\r\n      control: 'number',\r\n      description: 'Delay before hiding tooltip (ms)'\r\n    },\r\n    persistent: {\r\n      control: 'boolean',\r\n      description: 'Whether tooltip stays open until explicitly closed'\r\n    },\r\n    customClass: {\r\n      control: 'text',\r\n      description: 'Custom CSS classes'\r\n    },\r\n    maxWidth: {\r\n      control: 'text',\r\n      description: 'Maximum width of tooltip'\r\n    },\r\n    offset: {\r\n      control: 'number',\r\n      description: 'Distance from trigger element in pixels'\r\n    }\r\n  },\r\n  tags: ['autodocs']\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ChipComponent>",
                "defaultValue": "{\r\n  title: 'Components/Chip',\r\n  component: ChipComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ChipComponent],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe Chip component implements Material Design 3 chip variants for compact information display and user interaction.\r\n\r\n## Features\r\n- Four chip variants (assist, filter, input, suggestion)\r\n- Multiple sizes (sm, md)\r\n- Elevation options (flat, elevated)\r\n- Selection states for filter chips\r\n- Removable functionality for input chips\r\n- Icon and avatar support\r\n- Accessibility features with ARIA attributes\r\n- Keyboard navigation support\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<qk-chip variant=\"filter\" [selected]=\"isSelected\" (selectionChange)=\"onSelectionChange($event)\">\r\n  Filter Option\r\n</qk-chip>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['assist', 'filter', 'input', 'suggestion'] as ChipVariant[],\r\n      description: 'The type of chip'\r\n    },\r\n    size: {\r\n      control: 'select',\r\n      options: ['sm', 'md'] as ChipSize[],\r\n      description: 'The size of the chip'\r\n    },\r\n    elevation: {\r\n      control: 'select',\r\n      options: ['flat', 'elevated'] as ChipElevation[],\r\n      description: 'The elevation level of the chip'\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip is disabled'\r\n    },\r\n    selected: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip is selected (filter chips only)'\r\n    },\r\n    removable: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip can be removed (input chips only)'\r\n    },\r\n    hasLeadingIcon: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has a leading icon'\r\n    },\r\n    hasTrailingIcon: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has a trailing icon'\r\n    },\r\n    hasAvatar: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has an avatar'\r\n    },\r\n    customClass: {\r\n      control: 'text',\r\n      description: 'Custom CSS classes to apply'\r\n    },\r\n    ariaLabel: {\r\n      control: 'text',\r\n      description: 'ARIA label for accessibility'\r\n    },\r\n    removeAriaLabel: {\r\n      control: 'text',\r\n      description: 'ARIA label for the remove button'\r\n    },\r\n    testId: {\r\n      control: 'text',\r\n      description: 'Test ID for testing purposes'\r\n    },\r\n    clicked: {\r\n      action: 'clicked',\r\n      description: 'Event emitted when chip is clicked'\r\n    },\r\n    removed: {\r\n      action: 'removed',\r\n      description: 'Event emitted when chip is removed'\r\n    },\r\n    focused: {\r\n      action: 'focused',\r\n      description: 'Event emitted when chip receives focus'\r\n    },\r\n    blurred: {\r\n      action: 'blurred',\r\n      description: 'Event emitted when chip loses focus'\r\n    },\r\n    selectionChange: {\r\n      action: 'selectionChange',\r\n      description: 'Event emitted when chip selection changes'\r\n    }\r\n  },\r\n  args: {\r\n    clicked: fn(),\r\n    removed: fn(),\r\n    focused: fn(),\r\n    blurred: fn(),\r\n    selectionChange: fn()\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n    title: 'Components/Button',\r\n    component: ButtonComponent,\r\n    tags: ['autodocs'],\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [ButtonComponent],\r\n        }),\r\n    ],\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                component: `\r\nThe Button component is a versatile UI element that supports various styles, sizes, and states.\r\nIt provides comprehensive functionality including loading states, accessibility features, and customization options.\r\n\r\n## Features\r\n- Multiple variants (primary, secondary, success, danger, warning, info, light, dark, and outline versions)\r\n- Various sizes (xs, sm, md, lg, xl)\r\n- Loading state with spinner\r\n- Disabled state\r\n- Full width option\r\n- Rounded and square variations\r\n- Accessibility support with ARIA attributes\r\n- Event emissions for click, focus, and blur\r\n- Icon slot support (left and right)\r\n- Keyboard navigation support\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<qk-button variant=\"primary\" size=\"md\" (clicked)=\"handleClick($event)\">\r\n  Click me\r\n</qk-button>\r\n\\`\\`\\`\r\n\r\n## With Icons\r\n\\`\\`\\`html\r\n<qk-button variant=\"primary\">\r\n  <svg slot=\"icon-left\" width=\"16\" height=\"16\">...</svg>\r\n  Save Changes\r\n  <svg slot=\"icon-right\" width=\"16\" height=\"16\">...</svg>\r\n</qk-button>\r\n\\`\\`\\`\r\n        `\r\n            }\r\n        }\r\n    },\r\n    argTypes: {\r\n        variant: {\r\n            control: 'select',\r\n            options: [\r\n                'primary',\r\n                'secondary',\r\n                'success',\r\n                'danger',\r\n                'warning',\r\n                'info',\r\n                'light',\r\n                'dark',\r\n                'outline-primary',\r\n                'outline-secondary',\r\n                'outline-success',\r\n                'outline-danger',\r\n                'outline-warning',\r\n                'outline-info',\r\n                'outline-light',\r\n                'outline-dark'\r\n            ] as ButtonVariant[],\r\n            description: 'The visual style variant of the button'\r\n        },\r\n        size: {\r\n            control: 'select',\r\n            options: ['xs', 'sm', 'md', 'lg', 'xl'] as ButtonSize[],\r\n            description: 'The size of the button'\r\n        },\r\n        type: {\r\n            control: 'select',\r\n            options: ['button', 'submit', 'reset'] as ButtonType[],\r\n            description: 'The HTML type attribute of the button'\r\n        },\r\n        disabled: {\r\n            control: 'boolean',\r\n            description: 'Whether the button is disabled'\r\n        },\r\n        loading: {\r\n            control: 'boolean',\r\n            description: 'Whether the button is in loading state'\r\n        },\r\n        hideTextOnLoading: {\r\n            control: 'boolean',\r\n            description: 'Whether to hide text content when loading'\r\n        },\r\n        fullWidth: {\r\n            control: 'boolean',\r\n            description: 'Whether the button should take full width'\r\n        },\r\n        rounded: {\r\n            control: 'boolean',\r\n            description: 'Whether the button has rounded corners'\r\n        },\r\n        square: {\r\n            control: 'boolean',\r\n            description: 'Whether the button has no border radius'\r\n        },\r\n        customClass: {\r\n            control: 'text',\r\n            description: 'Custom CSS classes to apply'\r\n        },\r\n        ariaLabel: {\r\n            control: 'text',\r\n            description: 'ARIA label for accessibility'\r\n        },\r\n        testId: {\r\n            control: 'text',\r\n            description: 'Test ID for testing purposes'\r\n        },\r\n        clicked: {\r\n            action: 'clicked',\r\n            description: 'Event emitted when button is clicked'\r\n        },\r\n        focused: {\r\n            action: 'focused',\r\n            description: 'Event emitted when button receives focus'\r\n        },\r\n        blurred: {\r\n            action: 'blurred',\r\n            description: 'Event emitted when button loses focus'\r\n        }\r\n    },\r\n    args: {\r\n        clicked: fn(),\r\n        focused: fn(),\r\n        blurred: fn()\r\n    }\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      (clicked)=\"clicked($event)\">\r\n      Primary Button\r\n    </qk-button>`\r\n    })\r\n}"
            },
            {
                "name": "RightPosition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    text: 'Tooltip positioned on right',\r\n    position: 'right',\r\n    trigger: 'hover'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\">\r\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\r\n            Right Tooltip\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'secondary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      (clicked)=\"clicked($event)\">\r\n      Secondary Button\r\n    </qk-button>`\r\n    })\r\n}"
            },
            {
                "name": "SuggestionChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'suggestion',\r\n    size: 'md',\r\n    elevation: 'flat'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\"\r\n      (clicked)=\"clicked($event)\">\r\n      Suggestion Chip\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "TopPosition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    text: 'Tooltip positioned on top',\r\n    position: 'top',\r\n    trigger: 'hover'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\">\r\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\r\n            Top Tooltip\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "WithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\">\r\n      <svg slot=\"icon-left\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\r\n      </svg>\r\n      Add Item\r\n    </qk-button>`\r\n    })\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Supported button sizes</p>\n",
                "kind": 192
            },
            {
                "name": "ButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"submit\" | \"reset\"",
                "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Supported button types for form submission</p>\n",
                "kind": 192
            },
            {
                "name": "ButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\" | \"outline-primary\" | \"outline-secondary\" | \"outline-success\" | \"outline-danger\" | \"outline-warning\" | \"outline-info\" | \"outline-light\" | \"outline-dark\"",
                "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Supported button visual variants</p>\n",
                "kind": 192
            },
            {
                "name": "ChipElevation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"flat\" | \"elevated\"",
                "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ChipSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"md\"",
                "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ChipVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"assist\" | \"filter\" | \"input\" | \"suggestion\"",
                "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TooltipComponent>",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ChipComponent>",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TooltipPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"right-start\" | \"right-end\"",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TooltipTrigger",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"hover\" | \"focus\" | \"click\" | \"manual\"",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TooltipType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"plain\" | \"rich\"",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/quanta-kit/src/lib/Chip/chip.stories.ts": [
                {
                    "name": "AssistChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    size: 'md',\r\n    elevation: 'flat'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\"\r\n      (clicked)=\"clicked($event)\">\r\n      Assist Chip\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "FilterChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'filter',\r\n    size: 'md',\r\n    elevation: 'flat',\r\n    selected: false\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [selected]=\"selected\"\r\n      [disabled]=\"disabled\"\r\n      (clicked)=\"clicked($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Filter Chip\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "InputChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    size: 'md',\r\n    elevation: 'flat',\r\n    removable: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [removable]=\"removable\"\r\n      [disabled]=\"disabled\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\">\r\n      Input Chip\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ChipComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Chip',\r\n  component: ChipComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ChipComponent],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe Chip component implements Material Design 3 chip variants for compact information display and user interaction.\r\n\r\n## Features\r\n- Four chip variants (assist, filter, input, suggestion)\r\n- Multiple sizes (sm, md)\r\n- Elevation options (flat, elevated)\r\n- Selection states for filter chips\r\n- Removable functionality for input chips\r\n- Icon and avatar support\r\n- Accessibility features with ARIA attributes\r\n- Keyboard navigation support\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<qk-chip variant=\"filter\" [selected]=\"isSelected\" (selectionChange)=\"onSelectionChange($event)\">\r\n  Filter Option\r\n</qk-chip>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['assist', 'filter', 'input', 'suggestion'] as ChipVariant[],\r\n      description: 'The type of chip'\r\n    },\r\n    size: {\r\n      control: 'select',\r\n      options: ['sm', 'md'] as ChipSize[],\r\n      description: 'The size of the chip'\r\n    },\r\n    elevation: {\r\n      control: 'select',\r\n      options: ['flat', 'elevated'] as ChipElevation[],\r\n      description: 'The elevation level of the chip'\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip is disabled'\r\n    },\r\n    selected: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip is selected (filter chips only)'\r\n    },\r\n    removable: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip can be removed (input chips only)'\r\n    },\r\n    hasLeadingIcon: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has a leading icon'\r\n    },\r\n    hasTrailingIcon: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has a trailing icon'\r\n    },\r\n    hasAvatar: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has an avatar'\r\n    },\r\n    customClass: {\r\n      control: 'text',\r\n      description: 'Custom CSS classes to apply'\r\n    },\r\n    ariaLabel: {\r\n      control: 'text',\r\n      description: 'ARIA label for accessibility'\r\n    },\r\n    removeAriaLabel: {\r\n      control: 'text',\r\n      description: 'ARIA label for the remove button'\r\n    },\r\n    testId: {\r\n      control: 'text',\r\n      description: 'Test ID for testing purposes'\r\n    },\r\n    clicked: {\r\n      action: 'clicked',\r\n      description: 'Event emitted when chip is clicked'\r\n    },\r\n    removed: {\r\n      action: 'removed',\r\n      description: 'Event emitted when chip is removed'\r\n    },\r\n    focused: {\r\n      action: 'focused',\r\n      description: 'Event emitted when chip receives focus'\r\n    },\r\n    blurred: {\r\n      action: 'blurred',\r\n      description: 'Event emitted when chip loses focus'\r\n    },\r\n    selectionChange: {\r\n      action: 'selectionChange',\r\n      description: 'Event emitted when chip selection changes'\r\n    }\r\n  },\r\n  args: {\r\n    clicked: fn(),\r\n    removed: fn(),\r\n    focused: fn(),\r\n    blurred: fn(),\r\n    selectionChange: fn()\r\n  }\r\n}"
                },
                {
                    "name": "SuggestionChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'suggestion',\r\n    size: 'md',\r\n    elevation: 'flat'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\"\r\n      (clicked)=\"clicked($event)\">\r\n      Suggestion Chip\r\n    </qk-chip>`\r\n  })\r\n}"
                }
            ],
            "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts": [
                {
                    "name": "BottomPosition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    text: 'Tooltip positioned on bottom',\r\n    position: 'bottom',\r\n    trigger: 'hover'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\">\r\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\r\n            Bottom Tooltip\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    text: 'This is a simple tooltip',\r\n    position: 'top',\r\n    trigger: 'hover'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\">\r\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\r\n            Hover me\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    text: 'This tooltip is disabled',\r\n    position: 'top',\r\n    trigger: 'hover',\r\n    disabled: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\"\r\n          [disabled]=\"disabled\">\r\n          <button style=\"padding: 8px 16px; background: #666; color: white; border: none; border-radius: 4px; cursor: not-allowed;\">\r\n            Disabled Tooltip\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "LeftPosition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    text: 'Tooltip positioned on left',\r\n    position: 'left',\r\n    trigger: 'hover'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\">\r\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\r\n            Left Tooltip\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TooltipComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Tooltip',\r\n  component: TooltipComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [TooltipComponent],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe Tooltip component provides contextual information when users hover, focus, or click on an element.\r\nBased on Material Design 3 guidelines for tooltips.\r\n\r\n## Features\r\n- Multiple positions (top, bottom, left, right)\r\n- Different trigger types (hover, click, focus)\r\n- Plain and rich content support\r\n- Customizable delays and styling\r\n- Accessibility support with ARIA attributes\r\n- Keyboard navigation\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<qk-tooltip text=\"Helpful information\" position=\"top\">\r\n  <button>Hover me</button>\r\n</qk-tooltip>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    text: {\r\n      control: 'text',\r\n      description: 'Tooltip text content'\r\n    },\r\n    position: {\r\n      control: 'select',\r\n      options: ['top', 'bottom', 'left', 'right'] as TooltipPosition[],\r\n      description: 'Position of the tooltip relative to trigger'\r\n    },\r\n    trigger: {\r\n      control: 'select',\r\n      options: ['hover', 'click', 'focus'] as TooltipTrigger[],\r\n      description: 'How the tooltip is triggered'\r\n    },\r\n    type: {\r\n      control: 'select',\r\n      options: ['plain', 'rich'] as TooltipType[],\r\n      description: 'Type of tooltip content'\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Whether the tooltip is disabled'\r\n    },\r\n    showDelay: {\r\n      control: 'number',\r\n      description: 'Delay before showing tooltip (ms)'\r\n    },\r\n    hideDelay: {\r\n      control: 'number',\r\n      description: 'Delay before hiding tooltip (ms)'\r\n    },\r\n    persistent: {\r\n      control: 'boolean',\r\n      description: 'Whether tooltip stays open until explicitly closed'\r\n    },\r\n    customClass: {\r\n      control: 'text',\r\n      description: 'Custom CSS classes'\r\n    },\r\n    maxWidth: {\r\n      control: 'text',\r\n      description: 'Maximum width of tooltip'\r\n    },\r\n    offset: {\r\n      control: 'number',\r\n      description: 'Distance from trigger element in pixels'\r\n    }\r\n  },\r\n  tags: ['autodocs']\r\n}"
                },
                {
                    "name": "RightPosition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    text: 'Tooltip positioned on right',\r\n    position: 'right',\r\n    trigger: 'hover'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\">\r\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\r\n            Right Tooltip\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "TopPosition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    text: 'Tooltip positioned on top',\r\n    position: 'top',\r\n    trigger: 'hover'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"padding: 50px; text-align: center;\">\r\n        <qk-tooltip \r\n          [text]=\"text\" \r\n          [position]=\"position\" \r\n          [trigger]=\"trigger\">\r\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\r\n            Top Tooltip\r\n          </button>\r\n        </qk-tooltip>\r\n      </div>\r\n    `\r\n  })\r\n}"
                }
            ],
            "projects/quanta-kit/src/lib/Button/button.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        disabled: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\">\r\n      Disabled Button\r\n    </qk-button>`\r\n    })\r\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        loading: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [loading]=\"loading\">\r\n      Loading Button\r\n    </qk-button>`\r\n    })\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n    title: 'Components/Button',\r\n    component: ButtonComponent,\r\n    tags: ['autodocs'],\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [ButtonComponent],\r\n        }),\r\n    ],\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                component: `\r\nThe Button component is a versatile UI element that supports various styles, sizes, and states.\r\nIt provides comprehensive functionality including loading states, accessibility features, and customization options.\r\n\r\n## Features\r\n- Multiple variants (primary, secondary, success, danger, warning, info, light, dark, and outline versions)\r\n- Various sizes (xs, sm, md, lg, xl)\r\n- Loading state with spinner\r\n- Disabled state\r\n- Full width option\r\n- Rounded and square variations\r\n- Accessibility support with ARIA attributes\r\n- Event emissions for click, focus, and blur\r\n- Icon slot support (left and right)\r\n- Keyboard navigation support\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<qk-button variant=\"primary\" size=\"md\" (clicked)=\"handleClick($event)\">\r\n  Click me\r\n</qk-button>\r\n\\`\\`\\`\r\n\r\n## With Icons\r\n\\`\\`\\`html\r\n<qk-button variant=\"primary\">\r\n  <svg slot=\"icon-left\" width=\"16\" height=\"16\">...</svg>\r\n  Save Changes\r\n  <svg slot=\"icon-right\" width=\"16\" height=\"16\">...</svg>\r\n</qk-button>\r\n\\`\\`\\`\r\n        `\r\n            }\r\n        }\r\n    },\r\n    argTypes: {\r\n        variant: {\r\n            control: 'select',\r\n            options: [\r\n                'primary',\r\n                'secondary',\r\n                'success',\r\n                'danger',\r\n                'warning',\r\n                'info',\r\n                'light',\r\n                'dark',\r\n                'outline-primary',\r\n                'outline-secondary',\r\n                'outline-success',\r\n                'outline-danger',\r\n                'outline-warning',\r\n                'outline-info',\r\n                'outline-light',\r\n                'outline-dark'\r\n            ] as ButtonVariant[],\r\n            description: 'The visual style variant of the button'\r\n        },\r\n        size: {\r\n            control: 'select',\r\n            options: ['xs', 'sm', 'md', 'lg', 'xl'] as ButtonSize[],\r\n            description: 'The size of the button'\r\n        },\r\n        type: {\r\n            control: 'select',\r\n            options: ['button', 'submit', 'reset'] as ButtonType[],\r\n            description: 'The HTML type attribute of the button'\r\n        },\r\n        disabled: {\r\n            control: 'boolean',\r\n            description: 'Whether the button is disabled'\r\n        },\r\n        loading: {\r\n            control: 'boolean',\r\n            description: 'Whether the button is in loading state'\r\n        },\r\n        hideTextOnLoading: {\r\n            control: 'boolean',\r\n            description: 'Whether to hide text content when loading'\r\n        },\r\n        fullWidth: {\r\n            control: 'boolean',\r\n            description: 'Whether the button should take full width'\r\n        },\r\n        rounded: {\r\n            control: 'boolean',\r\n            description: 'Whether the button has rounded corners'\r\n        },\r\n        square: {\r\n            control: 'boolean',\r\n            description: 'Whether the button has no border radius'\r\n        },\r\n        customClass: {\r\n            control: 'text',\r\n            description: 'Custom CSS classes to apply'\r\n        },\r\n        ariaLabel: {\r\n            control: 'text',\r\n            description: 'ARIA label for accessibility'\r\n        },\r\n        testId: {\r\n            control: 'text',\r\n            description: 'Test ID for testing purposes'\r\n        },\r\n        clicked: {\r\n            action: 'clicked',\r\n            description: 'Event emitted when button is clicked'\r\n        },\r\n        focused: {\r\n            action: 'focused',\r\n            description: 'Event emitted when button receives focus'\r\n        },\r\n        blurred: {\r\n            action: 'blurred',\r\n            description: 'Event emitted when button loses focus'\r\n        }\r\n    },\r\n    args: {\r\n        clicked: fn(),\r\n        focused: fn(),\r\n        blurred: fn()\r\n    }\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      (clicked)=\"clicked($event)\">\r\n      Primary Button\r\n    </qk-button>`\r\n    })\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'secondary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      (clicked)=\"clicked($event)\">\r\n      Secondary Button\r\n    </qk-button>`\r\n    })\r\n}"
                },
                {
                    "name": "WithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\">\r\n      <svg slot=\"icon-left\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\r\n      </svg>\r\n      Add Item\r\n    </qk-button>`\r\n    })\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/quanta-kit/src/lib/Button/button.component.ts": [
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Supported button sizes</p>\n",
                    "kind": 192
                },
                {
                    "name": "ButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"submit\" | \"reset\"",
                    "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Supported button types for form submission</p>\n",
                    "kind": 192
                },
                {
                    "name": "ButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\" | \"outline-primary\" | \"outline-secondary\" | \"outline-success\" | \"outline-danger\" | \"outline-warning\" | \"outline-info\" | \"outline-light\" | \"outline-dark\"",
                    "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Supported button visual variants</p>\n",
                    "kind": 192
                }
            ],
            "projects/quanta-kit/src/lib/Chip/chip.component.ts": [
                {
                    "name": "ChipElevation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"flat\" | \"elevated\"",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ChipSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"md\"",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ChipVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"assist\" | \"filter\" | \"input\" | \"suggestion\"",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TooltipComponent>",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/quanta-kit/src/lib/Chip/chip.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ChipComponent>",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/quanta-kit/src/lib/Button/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts": [
                {
                    "name": "TooltipPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"right-start\" | \"right-end\"",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TooltipTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"hover\" | \"focus\" | \"click\" | \"manual\"",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TooltipType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"plain\" | \"rich\"",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 12,
        "status": "low",
        "files": [
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 100,
                "coverageCount": "20/20",
                "status": "very-good"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonSize",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonType",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonVariant",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ChipElevation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ChipSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ChipVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AssistChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FilterChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuggestionChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/40",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TooltipPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TooltipTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TooltipType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TopPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}