(self.webpackChunkquanta_kit_angular=self.webpackChunkquanta_kit_angular||[]).push([[792],{"./projects/quanta-kit/.storybook/preview.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>_storybook_preview});var angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js");const documentation_namespaceObject=JSON.parse('{"pipes":[],"interfaces":[],"injectables":[],"guards":[],"interceptors":[],"classes":[],"directives":[],"components":[],"modules":[],"miscellaneous":{"variables":[{"name":"AllModifiersCombined","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'success\',\\n        size: \'lg\',\\n        fullWidth: true,\\n        rounded: true,\\n        loading: true,\\n        disabled: false,\\n        customClass: \'test-modifier-class\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [loading]=\\"loading\\"\\n      [disabled]=\\"disabled\\"\\n      [customClass]=\\"customClass\\">\\n      All Modifiers Combined\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests all possible modifier combinations to ensure buttonClasses getter covers all branches.\'\\n            }\\n        }\\n    }\\n}"},{"name":"AllSizes","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    render: () => ({\\n        template: `\\n    <div style=\\"display: flex; flex-direction: column; gap: 1rem; align-items: flex-start;\\">\\n      <qk-button variant=\\"primary\\" size=\\"xs\\">Extra Small</qk-button>\\n      <qk-button variant=\\"primary\\" size=\\"sm\\">Small</qk-button>\\n      <qk-button variant=\\"primary\\" size=\\"md\\">Medium</qk-button>\\n      <qk-button variant=\\"primary\\" size=\\"lg\\">Large</qk-button>\\n      <qk-button variant=\\"primary\\" size=\\"xl\\">Extra Large</qk-button>\\n    </div>\\n    `\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Buttons are available in 5 different sizes: xs, sm, md, lg, xl\'\\n            }\\n        }\\n    }\\n}"},{"name":"AllVariants","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    render: () => ({\\n        template: `\\n    <div style=\\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem;\\">\\n      <qk-button variant=\\"primary\\">Primary</qk-button>\\n      <qk-button variant=\\"secondary\\">Secondary</qk-button>\\n      <qk-button variant=\\"success\\">Success</qk-button>\\n      <qk-button variant=\\"danger\\">Danger</qk-button>\\n      <qk-button variant=\\"warning\\">Warning</qk-button>\\n      <qk-button variant=\\"info\\">Info</qk-button>\\n      <qk-button variant=\\"light\\">Light</qk-button>\\n      <qk-button variant=\\"dark\\">Dark</qk-button>\\n      <qk-button variant=\\"outline-primary\\">Outline Primary</qk-button>\\n      <qk-button variant=\\"outline-secondary\\">Outline Secondary</qk-button>\\n      <qk-button variant=\\"outline-success\\">Outline Success</qk-button>\\n      <qk-button variant=\\"outline-danger\\">Outline Danger</qk-button>\\n      <qk-button variant=\\"outline-warning\\">Outline Warning</qk-button>\\n      <qk-button variant=\\"outline-info\\">Outline Info</qk-button>\\n      <qk-button variant=\\"outline-light\\">Outline Light</qk-button>\\n      <qk-button variant=\\"outline-dark\\">Outline Dark</qk-button>\\n    </div>\\n    `\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'All available button variants including solid and outline styles\'\\n            }\\n        }\\n    }\\n}"},{"name":"ClickWhenDisabled","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        disabled: true\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [disabled]=\\"disabled\\"\\n      (clicked)=\\"clicked($event)\\">\\n      Disabled Button (Click Test)\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests that click events are not emitted when button is disabled. The button has pointer-events: none so interactions are prevented.\'\\n            }\\n        }\\n    },\\n    play: async ({ canvasElement }) => {\\n        const canvas = within(canvasElement);\\n        const button = canvas.getByRole(\'button\');\\n\\n        // Verify the button is disabled (has correct attributes)\\n        expect(button).toBeDisabled();\\n        expect(button).toHaveClass(\'qk-btn--disabled\');\\n    }\\n}"},{"name":"ClickWhenLoading","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        loading: true\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [loading]=\\"loading\\"\\n      (clicked)=\\"clicked($event)\\">\\n      Loading Button (Click Test)\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests that click events are not emitted when button is in loading state. The button has pointer-events: none so interactions are prevented.\'\\n            }\\n        }\\n    },\\n    play: async ({ canvasElement }) => {\\n        const canvas = within(canvasElement);\\n        const button = canvas.getByRole(\'button\');\\n\\n        // Verify the button is disabled due to loading and has loading class\\n        expect(button).toBeDisabled();\\n        expect(button).toHaveClass(\'qk-btn--loading\');\\n\\n        // Verify spinner is present\\n        const spinner = canvas.getByRole(\'button\').querySelector(\'.qk-btn-spinner\');\\n        expect(spinner).toBeInTheDocument();\\n    }\\n}"},{"name":"CustomClassHandling","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        customClass: \'my-custom-class another-custom-class\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [customClass]=\\"customClass\\">\\n      Button with Custom Classes\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests custom class handling in the buttonClasses getter.\'\\n            }\\n        }\\n    }\\n}"},{"name":"Danger","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'danger\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [disabled]=\\"disabled\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [square]=\\"square\\"\\n      [customClass]=\\"customClass\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      [testId]=\\"testId\\"\\n      (clicked)=\\"clicked($event)\\"\\n      (focused)=\\"focused($event)\\"\\n      (blurred)=\\"blurred($event)\\">\\n      Danger Button\\n    </qk-button>`\\n    })\\n}"},{"name":"Disabled","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        disabled: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [disabled]=\\"disabled\\">\\n      Disabled Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button in disabled state\'\\n            }\\n        }\\n    }\\n}"},{"name":"DisabledAndLoading","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'warning\',\\n        size: \'sm\',\\n        disabled: true,\\n        loading: true\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [disabled]=\\"disabled\\"\\n      [loading]=\\"loading\\">\\n      Disabled + Loading\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests combination of disabled and loading states.\'\\n            }\\n        }\\n    }\\n}"},{"name":"EmptyCustomClass","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        customClass: \'\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [customClass]=\\"customClass\\">\\n      Button with Empty Custom Class\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests handling of empty custom class to ensure no empty strings are added to classes.\'\\n            }\\n        }\\n    }\\n}"},{"name":"FocusAndBlurEvents","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `\\n    <div style=\\"display: flex; flex-direction: column; gap: 1rem;\\">\\n      <p>This story tests focus and blur events:</p>\\n      <qk-button \\n        [variant]=\\"variant\\" \\n        [size]=\\"size\\"\\n        (clicked)=\\"clicked($event)\\"\\n        (focused)=\\"focused($event)\\"\\n        (blurred)=\\"blurred($event)\\">\\n        Focus/Blur Test Button\\n      </qk-button>\\n      <qk-button variant=\\"secondary\\">Another Button (for tabbing)</qk-button>\\n    </div>\\n    `\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Story specifically designed to test focus and blur event handling. The play function will automatically trigger these events for testing coverage.\'\\n            }\\n        }\\n    },\\n    play: async ({ canvasElement }) => {\\n        const canvas = within(canvasElement);\\n        const button = canvas.getByText(\'Focus/Blur Test Button\');\\n\\n        // Focus the button\\n        await userEvent.click(button);\\n        await button.focus();\\n\\n        // Blur the button by focusing another element\\n        const secondButton = canvas.getByText(\'Another Button (for tabbing)\');\\n        await userEvent.tab();\\n        await secondButton.focus();\\n    }\\n}"},{"name":"FullWidth","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        fullWidth: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [fullWidth]=\\"fullWidth\\">\\n      Full Width Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button that takes the full width of its container\'\\n            }\\n        }\\n    }\\n}"},{"name":"FullWidthWithCustomClass","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'dark\',\\n        size: \'xl\',\\n        fullWidth: true,\\n        customClass: \'test-full-width-custom\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [customClass]=\\"customClass\\">\\n      Full Width + Custom Class\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests full width with custom class combination.\'\\n            }\\n        }\\n    }\\n}"},{"name":"IconOnly","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        ariaLabel: \'Delete item\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      style=\\"padding: 0.625rem;\\">\\n      <svg width=\\"16\\" height=\\"16\\" fill=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n        <path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>\\n      </svg>\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with only an icon, useful for actions like delete, close, etc. Make sure to provide an aria-label for accessibility.\'\\n            }\\n        }\\n    }\\n}"},{"name":"InteractionTest","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `\\n    <div style=\\"display: flex; flex-direction: column; gap: 1rem;\\">\\n      <qk-button \\n        [variant]=\\"variant\\" \\n        [size]=\\"size\\"\\n        (clicked)=\\"clicked($event)\\"\\n        (focused)=\\"focused($event)\\"\\n        (blurred)=\\"blurred($event)\\">\\n        Interactive Test Button\\n      </qk-button>\\n      <input type=\\"text\\" placeholder=\\"Focus target\\" />\\n    </div>\\n    `\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Comprehensive interaction test that exercises all event handlers.\'\\n            }\\n        }\\n    },\\n    play: async ({ canvasElement, args }) => {\\n        const canvas = within(canvasElement);\\n        const button = canvas.getByText(\'Interactive Test Button\');\\n        const input = canvas.getByPlaceholderText(\'Focus target\');\\n\\n        // Test successful click\\n        await userEvent.click(button);\\n        expect(args.clicked).toHaveBeenCalled();\\n\\n        // Test focus\\n        await button.focus();\\n        expect(args.focused).toHaveBeenCalled();\\n\\n        // Test blur by focusing another element\\n        await input.focus();\\n        expect(args.blurred).toHaveBeenCalled();\\n    }\\n}"},{"name":"InteractiveStates","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    render: () => ({\\n        template: `\\n    <div style=\\"display: flex; flex-direction: column; gap: 1rem; align-items: flex-start; max-width: 300px;\\">\\n      <qk-button variant=\\"primary\\">Normal State</qk-button>\\n      <qk-button variant=\\"primary\\" [disabled]=\\"true\\">Disabled State</qk-button>\\n      <qk-button variant=\\"primary\\" [loading]=\\"true\\">Loading State</qk-button>\\n      <qk-button variant=\\"primary\\" [loading]=\\"true\\" [hideTextOnLoading]=\\"true\\">Loading (Hidden Text)</qk-button>\\n    </div>\\n    `\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Different interactive states of the button component\'\\n            }\\n        }\\n    }\\n}"},{"name":"Loading","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        loading: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\">\\n      Loading Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button in loading state with spinner animation\'\\n            }\\n        }\\n    }\\n}"},{"name":"LoadingHideText","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        loading: true,\\n        hideTextOnLoading: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\">\\n      Processing...\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button in loading state with hidden text content\'\\n            }\\n        }\\n    }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/quanta-kit.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<QuantaKit>","defaultValue":"{\\n  title: \'Example/Starter\',\\n  component: QuantaKit,\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    backgroundColor: {\\n      control: \'color\',\\n    },\\n  },\\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\\n  args: { onClick: fn() },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<ButtonComponent>","defaultValue":"{\\n    title: \'Components/Button\',\\n    component: ButtonComponent,\\n    tags: [\'autodocs\'],\\n    decorators: [\\n        moduleMetadata({\\n            imports: [ButtonComponent],\\n        }),\\n    ],\\n    parameters: {\\n        docs: {\\n            description: {\\n                component: `\\nThe Button component is a versatile UI element that supports various styles, sizes, and states.\\nIt provides comprehensive functionality including loading states, accessibility features, and customization options.\\n\\n## Features\\n- Multiple variants (primary, secondary, success, danger, warning, info, light, dark, and outline versions)\\n- Various sizes (xs, sm, md, lg, xl)\\n- Loading state with spinner\\n- Disabled state\\n- Full width option\\n- Rounded and square variations\\n- Accessibility support with ARIA attributes\\n- Event emissions for click, focus, and blur\\n- Icon slot support (left and right)\\n- Keyboard navigation support\\n\\n## Usage\\n\\\\`\\\\`\\\\`html\\n<qk-button variant=\\"primary\\" size=\\"md\\" (clicked)=\\"handleClick($event)\\">\\n  Click me\\n</qk-button>\\n\\\\`\\\\`\\\\`\\n\\n## With Icons\\n\\\\`\\\\`\\\\`html\\n<qk-button variant=\\"primary\\">\\n  <svg slot=\\"icon-left\\" width=\\"16\\" height=\\"16\\">...</svg>\\n  Save Changes\\n  <svg slot=\\"icon-right\\" width=\\"16\\" height=\\"16\\">...</svg>\\n</qk-button>\\n\\\\`\\\\`\\\\`\\n        `\\n            }\\n        }\\n    },\\n    argTypes: {\\n        variant: {\\n            control: \'select\',\\n            options: [\\n                \'primary\',\\n                \'secondary\',\\n                \'success\',\\n                \'danger\',\\n                \'warning\',\\n                \'info\',\\n                \'light\',\\n                \'dark\',\\n                \'outline-primary\',\\n                \'outline-secondary\',\\n                \'outline-success\',\\n                \'outline-danger\',\\n                \'outline-warning\',\\n                \'outline-info\',\\n                \'outline-light\',\\n                \'outline-dark\'\\n            ] as ButtonVariant[],\\n            description: \'The visual style variant of the button\'\\n        },\\n        size: {\\n            control: \'select\',\\n            options: [\'xs\', \'sm\', \'md\', \'lg\', \'xl\'] as ButtonSize[],\\n            description: \'The size of the button\'\\n        },\\n        type: {\\n            control: \'select\',\\n            options: [\'button\', \'submit\', \'reset\'] as ButtonType[],\\n            description: \'The HTML type attribute of the button\'\\n        },\\n        disabled: {\\n            control: \'boolean\',\\n            description: \'Whether the button is disabled\'\\n        },\\n        loading: {\\n            control: \'boolean\',\\n            description: \'Whether the button is in loading state\'\\n        },\\n        hideTextOnLoading: {\\n            control: \'boolean\',\\n            description: \'Whether to hide text content when loading\'\\n        },\\n        fullWidth: {\\n            control: \'boolean\',\\n            description: \'Whether the button should take full width\'\\n        },\\n        rounded: {\\n            control: \'boolean\',\\n            description: \'Whether the button has rounded corners\'\\n        },\\n        square: {\\n            control: \'boolean\',\\n            description: \'Whether the button has no border radius\'\\n        },\\n        customClass: {\\n            control: \'text\',\\n            description: \'Custom CSS classes to apply\'\\n        },\\n        ariaLabel: {\\n            control: \'text\',\\n            description: \'ARIA label for accessibility\'\\n        },\\n        testId: {\\n            control: \'text\',\\n            description: \'Test ID for testing purposes\'\\n        },\\n        clicked: {\\n            action: \'clicked\',\\n            description: \'Event emitted when button is clicked\'\\n        },\\n        focused: {\\n            action: \'focused\',\\n            description: \'Event emitted when button receives focus\'\\n        },\\n        blurred: {\\n            action: \'blurred\',\\n            description: \'Event emitted when button loses focus\'\\n        }\\n    },\\n    args: {\\n        clicked: fn(),\\n        focused: fn(),\\n        blurred: fn()\\n    }\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        disabled: false,\\n        loading: false,\\n        hideTextOnLoading: false,\\n        fullWidth: false,\\n        rounded: false,\\n        square: false,\\n        type: \'button\',\\n        customClass: \'\',\\n        ariaLabel: \'\',\\n        testId: \'button-playground\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [type]=\\"type\\"\\n      [disabled]=\\"disabled\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [square]=\\"square\\"\\n      [customClass]=\\"customClass\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      [testId]=\\"testId\\"\\n      (clicked)=\\"clicked($event)\\"\\n      (focused)=\\"focused($event)\\"\\n      (blurred)=\\"blurred($event)\\">\\n      Playground Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Interactive playground to experiment with all button properties and see real-time changes.\'\\n            }\\n        }\\n    }\\n}"},{"name":"preview","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/.storybook/preview.ts","deprecated":false,"deprecationMessage":"","type":"Preview","defaultValue":"{\\n  parameters: {\\n    controls: {\\n      matchers: {\\n       color: /(background|color)$/i,\\n       date: /Date$/i,\\n      },\\n    },\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/quanta-kit.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [disabled]=\\"disabled\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [square]=\\"square\\"\\n      [customClass]=\\"customClass\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      [testId]=\\"testId\\"\\n      (clicked)=\\"clicked($event)\\"\\n      (focused)=\\"focused($event)\\"\\n      (blurred)=\\"blurred($event)\\">\\n      Primary Button\\n    </qk-button>`\\n    })\\n}"},{"name":"Rounded","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        rounded: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [rounded]=\\"rounded\\">\\n      Rounded Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with fully rounded corners\'\\n            }\\n        }\\n    }\\n}"},{"name":"Secondary","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'secondary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [disabled]=\\"disabled\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [square]=\\"square\\"\\n      [customClass]=\\"customClass\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      [testId]=\\"testId\\"\\n      (clicked)=\\"clicked($event)\\"\\n      (focused)=\\"focused($event)\\"\\n      (blurred)=\\"blurred($event)\\">\\n      Secondary Button\\n    </qk-button>`\\n    })\\n}"},{"name":"Square","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        square: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [square]=\\"square\\">\\n      Square Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with no border radius (square corners)\'\\n            }\\n        }\\n    }\\n}"},{"name":"SquareModifier","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'info\',\\n        size: \'md\',\\n        square: true\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [square]=\\"square\\">\\n      Square Button Test\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests the square modifier to ensure it adds the correct CSS class.\'\\n            }\\n        }\\n    }\\n}"},{"name":"Success","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'success\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [disabled]=\\"disabled\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [square]=\\"square\\"\\n      [customClass]=\\"customClass\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      [testId]=\\"testId\\"\\n      (clicked)=\\"clicked($event)\\"\\n      (focused)=\\"focused($event)\\"\\n      (blurred)=\\"blurred($event)\\">\\n      Success Button\\n    </qk-button>`\\n    })\\n}"},{"name":"WithBothIcons","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\">\\n      <svg slot=\\"icon-left\\" width=\\"16\\" height=\\"16\\" fill=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n        <path d=\\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\\"/>\\n      </svg>\\n      Save Changes\\n      <svg slot=\\"icon-right\\" width=\\"16\\" height=\\"16\\" fill=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n        <path d=\\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\\"/>\\n      </svg>\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with icons on both left and right sides\'\\n            }\\n        }\\n    }\\n}"},{"name":"WithLeftIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\">\\n      <svg slot=\\"icon-left\\" width=\\"16\\" height=\\"16\\" fill=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n        <path d=\\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\\"/>\\n      </svg>\\n      Add Item\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with an icon on the left side\'\\n            }\\n        }\\n    }\\n}"},{"name":"WithRightIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\">\\n      Continue\\n      <svg slot=\\"icon-right\\" width=\\"16\\" height=\\"16\\" fill=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n        <path d=\\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\\"/>\\n      </svg>\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with an icon on the right side\'\\n            }\\n        }\\n    }\\n}"}],"functions":[],"typealiases":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<QuantaKit>","file":"projects/quanta-kit/src/lib/quanta-kit.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<ButtonComponent>","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"enumerations":[],"groupedVariables":{"projects/quanta-kit/src/lib/Button/button.stories.ts":[{"name":"AllModifiersCombined","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'success\',\\n        size: \'lg\',\\n        fullWidth: true,\\n        rounded: true,\\n        loading: true,\\n        disabled: false,\\n        customClass: \'test-modifier-class\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [loading]=\\"loading\\"\\n      [disabled]=\\"disabled\\"\\n      [customClass]=\\"customClass\\">\\n      All Modifiers Combined\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests all possible modifier combinations to ensure buttonClasses getter covers all branches.\'\\n            }\\n        }\\n    }\\n}"},{"name":"AllSizes","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    render: () => ({\\n        template: `\\n    <div style=\\"display: flex; flex-direction: column; gap: 1rem; align-items: flex-start;\\">\\n      <qk-button variant=\\"primary\\" size=\\"xs\\">Extra Small</qk-button>\\n      <qk-button variant=\\"primary\\" size=\\"sm\\">Small</qk-button>\\n      <qk-button variant=\\"primary\\" size=\\"md\\">Medium</qk-button>\\n      <qk-button variant=\\"primary\\" size=\\"lg\\">Large</qk-button>\\n      <qk-button variant=\\"primary\\" size=\\"xl\\">Extra Large</qk-button>\\n    </div>\\n    `\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Buttons are available in 5 different sizes: xs, sm, md, lg, xl\'\\n            }\\n        }\\n    }\\n}"},{"name":"AllVariants","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    render: () => ({\\n        template: `\\n    <div style=\\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem;\\">\\n      <qk-button variant=\\"primary\\">Primary</qk-button>\\n      <qk-button variant=\\"secondary\\">Secondary</qk-button>\\n      <qk-button variant=\\"success\\">Success</qk-button>\\n      <qk-button variant=\\"danger\\">Danger</qk-button>\\n      <qk-button variant=\\"warning\\">Warning</qk-button>\\n      <qk-button variant=\\"info\\">Info</qk-button>\\n      <qk-button variant=\\"light\\">Light</qk-button>\\n      <qk-button variant=\\"dark\\">Dark</qk-button>\\n      <qk-button variant=\\"outline-primary\\">Outline Primary</qk-button>\\n      <qk-button variant=\\"outline-secondary\\">Outline Secondary</qk-button>\\n      <qk-button variant=\\"outline-success\\">Outline Success</qk-button>\\n      <qk-button variant=\\"outline-danger\\">Outline Danger</qk-button>\\n      <qk-button variant=\\"outline-warning\\">Outline Warning</qk-button>\\n      <qk-button variant=\\"outline-info\\">Outline Info</qk-button>\\n      <qk-button variant=\\"outline-light\\">Outline Light</qk-button>\\n      <qk-button variant=\\"outline-dark\\">Outline Dark</qk-button>\\n    </div>\\n    `\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'All available button variants including solid and outline styles\'\\n            }\\n        }\\n    }\\n}"},{"name":"ClickWhenDisabled","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        disabled: true\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [disabled]=\\"disabled\\"\\n      (clicked)=\\"clicked($event)\\">\\n      Disabled Button (Click Test)\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests that click events are not emitted when button is disabled. The button has pointer-events: none so interactions are prevented.\'\\n            }\\n        }\\n    },\\n    play: async ({ canvasElement }) => {\\n        const canvas = within(canvasElement);\\n        const button = canvas.getByRole(\'button\');\\n\\n        // Verify the button is disabled (has correct attributes)\\n        expect(button).toBeDisabled();\\n        expect(button).toHaveClass(\'qk-btn--disabled\');\\n    }\\n}"},{"name":"ClickWhenLoading","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        loading: true\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [loading]=\\"loading\\"\\n      (clicked)=\\"clicked($event)\\">\\n      Loading Button (Click Test)\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests that click events are not emitted when button is in loading state. The button has pointer-events: none so interactions are prevented.\'\\n            }\\n        }\\n    },\\n    play: async ({ canvasElement }) => {\\n        const canvas = within(canvasElement);\\n        const button = canvas.getByRole(\'button\');\\n\\n        // Verify the button is disabled due to loading and has loading class\\n        expect(button).toBeDisabled();\\n        expect(button).toHaveClass(\'qk-btn--loading\');\\n\\n        // Verify spinner is present\\n        const spinner = canvas.getByRole(\'button\').querySelector(\'.qk-btn-spinner\');\\n        expect(spinner).toBeInTheDocument();\\n    }\\n}"},{"name":"CustomClassHandling","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        customClass: \'my-custom-class another-custom-class\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [customClass]=\\"customClass\\">\\n      Button with Custom Classes\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests custom class handling in the buttonClasses getter.\'\\n            }\\n        }\\n    }\\n}"},{"name":"Danger","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'danger\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [disabled]=\\"disabled\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [square]=\\"square\\"\\n      [customClass]=\\"customClass\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      [testId]=\\"testId\\"\\n      (clicked)=\\"clicked($event)\\"\\n      (focused)=\\"focused($event)\\"\\n      (blurred)=\\"blurred($event)\\">\\n      Danger Button\\n    </qk-button>`\\n    })\\n}"},{"name":"Disabled","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        disabled: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [disabled]=\\"disabled\\">\\n      Disabled Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button in disabled state\'\\n            }\\n        }\\n    }\\n}"},{"name":"DisabledAndLoading","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'warning\',\\n        size: \'sm\',\\n        disabled: true,\\n        loading: true\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [disabled]=\\"disabled\\"\\n      [loading]=\\"loading\\">\\n      Disabled + Loading\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests combination of disabled and loading states.\'\\n            }\\n        }\\n    }\\n}"},{"name":"EmptyCustomClass","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        customClass: \'\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [customClass]=\\"customClass\\">\\n      Button with Empty Custom Class\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests handling of empty custom class to ensure no empty strings are added to classes.\'\\n            }\\n        }\\n    }\\n}"},{"name":"FocusAndBlurEvents","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `\\n    <div style=\\"display: flex; flex-direction: column; gap: 1rem;\\">\\n      <p>This story tests focus and blur events:</p>\\n      <qk-button \\n        [variant]=\\"variant\\" \\n        [size]=\\"size\\"\\n        (clicked)=\\"clicked($event)\\"\\n        (focused)=\\"focused($event)\\"\\n        (blurred)=\\"blurred($event)\\">\\n        Focus/Blur Test Button\\n      </qk-button>\\n      <qk-button variant=\\"secondary\\">Another Button (for tabbing)</qk-button>\\n    </div>\\n    `\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Story specifically designed to test focus and blur event handling. The play function will automatically trigger these events for testing coverage.\'\\n            }\\n        }\\n    },\\n    play: async ({ canvasElement }) => {\\n        const canvas = within(canvasElement);\\n        const button = canvas.getByText(\'Focus/Blur Test Button\');\\n\\n        // Focus the button\\n        await userEvent.click(button);\\n        await button.focus();\\n\\n        // Blur the button by focusing another element\\n        const secondButton = canvas.getByText(\'Another Button (for tabbing)\');\\n        await userEvent.tab();\\n        await secondButton.focus();\\n    }\\n}"},{"name":"FullWidth","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        fullWidth: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [fullWidth]=\\"fullWidth\\">\\n      Full Width Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button that takes the full width of its container\'\\n            }\\n        }\\n    }\\n}"},{"name":"FullWidthWithCustomClass","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'dark\',\\n        size: \'xl\',\\n        fullWidth: true,\\n        customClass: \'test-full-width-custom\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [customClass]=\\"customClass\\">\\n      Full Width + Custom Class\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests full width with custom class combination.\'\\n            }\\n        }\\n    }\\n}"},{"name":"IconOnly","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        ariaLabel: \'Delete item\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      style=\\"padding: 0.625rem;\\">\\n      <svg width=\\"16\\" height=\\"16\\" fill=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n        <path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>\\n      </svg>\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with only an icon, useful for actions like delete, close, etc. Make sure to provide an aria-label for accessibility.\'\\n            }\\n        }\\n    }\\n}"},{"name":"InteractionTest","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `\\n    <div style=\\"display: flex; flex-direction: column; gap: 1rem;\\">\\n      <qk-button \\n        [variant]=\\"variant\\" \\n        [size]=\\"size\\"\\n        (clicked)=\\"clicked($event)\\"\\n        (focused)=\\"focused($event)\\"\\n        (blurred)=\\"blurred($event)\\">\\n        Interactive Test Button\\n      </qk-button>\\n      <input type=\\"text\\" placeholder=\\"Focus target\\" />\\n    </div>\\n    `\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Comprehensive interaction test that exercises all event handlers.\'\\n            }\\n        }\\n    },\\n    play: async ({ canvasElement, args }) => {\\n        const canvas = within(canvasElement);\\n        const button = canvas.getByText(\'Interactive Test Button\');\\n        const input = canvas.getByPlaceholderText(\'Focus target\');\\n\\n        // Test successful click\\n        await userEvent.click(button);\\n        expect(args.clicked).toHaveBeenCalled();\\n\\n        // Test focus\\n        await button.focus();\\n        expect(args.focused).toHaveBeenCalled();\\n\\n        // Test blur by focusing another element\\n        await input.focus();\\n        expect(args.blurred).toHaveBeenCalled();\\n    }\\n}"},{"name":"InteractiveStates","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    render: () => ({\\n        template: `\\n    <div style=\\"display: flex; flex-direction: column; gap: 1rem; align-items: flex-start; max-width: 300px;\\">\\n      <qk-button variant=\\"primary\\">Normal State</qk-button>\\n      <qk-button variant=\\"primary\\" [disabled]=\\"true\\">Disabled State</qk-button>\\n      <qk-button variant=\\"primary\\" [loading]=\\"true\\">Loading State</qk-button>\\n      <qk-button variant=\\"primary\\" [loading]=\\"true\\" [hideTextOnLoading]=\\"true\\">Loading (Hidden Text)</qk-button>\\n    </div>\\n    `\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Different interactive states of the button component\'\\n            }\\n        }\\n    }\\n}"},{"name":"Loading","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        loading: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\">\\n      Loading Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button in loading state with spinner animation\'\\n            }\\n        }\\n    }\\n}"},{"name":"LoadingHideText","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        loading: true,\\n        hideTextOnLoading: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\">\\n      Processing...\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button in loading state with hidden text content\'\\n            }\\n        }\\n    }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<ButtonComponent>","defaultValue":"{\\n    title: \'Components/Button\',\\n    component: ButtonComponent,\\n    tags: [\'autodocs\'],\\n    decorators: [\\n        moduleMetadata({\\n            imports: [ButtonComponent],\\n        }),\\n    ],\\n    parameters: {\\n        docs: {\\n            description: {\\n                component: `\\nThe Button component is a versatile UI element that supports various styles, sizes, and states.\\nIt provides comprehensive functionality including loading states, accessibility features, and customization options.\\n\\n## Features\\n- Multiple variants (primary, secondary, success, danger, warning, info, light, dark, and outline versions)\\n- Various sizes (xs, sm, md, lg, xl)\\n- Loading state with spinner\\n- Disabled state\\n- Full width option\\n- Rounded and square variations\\n- Accessibility support with ARIA attributes\\n- Event emissions for click, focus, and blur\\n- Icon slot support (left and right)\\n- Keyboard navigation support\\n\\n## Usage\\n\\\\`\\\\`\\\\`html\\n<qk-button variant=\\"primary\\" size=\\"md\\" (clicked)=\\"handleClick($event)\\">\\n  Click me\\n</qk-button>\\n\\\\`\\\\`\\\\`\\n\\n## With Icons\\n\\\\`\\\\`\\\\`html\\n<qk-button variant=\\"primary\\">\\n  <svg slot=\\"icon-left\\" width=\\"16\\" height=\\"16\\">...</svg>\\n  Save Changes\\n  <svg slot=\\"icon-right\\" width=\\"16\\" height=\\"16\\">...</svg>\\n</qk-button>\\n\\\\`\\\\`\\\\`\\n        `\\n            }\\n        }\\n    },\\n    argTypes: {\\n        variant: {\\n            control: \'select\',\\n            options: [\\n                \'primary\',\\n                \'secondary\',\\n                \'success\',\\n                \'danger\',\\n                \'warning\',\\n                \'info\',\\n                \'light\',\\n                \'dark\',\\n                \'outline-primary\',\\n                \'outline-secondary\',\\n                \'outline-success\',\\n                \'outline-danger\',\\n                \'outline-warning\',\\n                \'outline-info\',\\n                \'outline-light\',\\n                \'outline-dark\'\\n            ] as ButtonVariant[],\\n            description: \'The visual style variant of the button\'\\n        },\\n        size: {\\n            control: \'select\',\\n            options: [\'xs\', \'sm\', \'md\', \'lg\', \'xl\'] as ButtonSize[],\\n            description: \'The size of the button\'\\n        },\\n        type: {\\n            control: \'select\',\\n            options: [\'button\', \'submit\', \'reset\'] as ButtonType[],\\n            description: \'The HTML type attribute of the button\'\\n        },\\n        disabled: {\\n            control: \'boolean\',\\n            description: \'Whether the button is disabled\'\\n        },\\n        loading: {\\n            control: \'boolean\',\\n            description: \'Whether the button is in loading state\'\\n        },\\n        hideTextOnLoading: {\\n            control: \'boolean\',\\n            description: \'Whether to hide text content when loading\'\\n        },\\n        fullWidth: {\\n            control: \'boolean\',\\n            description: \'Whether the button should take full width\'\\n        },\\n        rounded: {\\n            control: \'boolean\',\\n            description: \'Whether the button has rounded corners\'\\n        },\\n        square: {\\n            control: \'boolean\',\\n            description: \'Whether the button has no border radius\'\\n        },\\n        customClass: {\\n            control: \'text\',\\n            description: \'Custom CSS classes to apply\'\\n        },\\n        ariaLabel: {\\n            control: \'text\',\\n            description: \'ARIA label for accessibility\'\\n        },\\n        testId: {\\n            control: \'text\',\\n            description: \'Test ID for testing purposes\'\\n        },\\n        clicked: {\\n            action: \'clicked\',\\n            description: \'Event emitted when button is clicked\'\\n        },\\n        focused: {\\n            action: \'focused\',\\n            description: \'Event emitted when button receives focus\'\\n        },\\n        blurred: {\\n            action: \'blurred\',\\n            description: \'Event emitted when button loses focus\'\\n        }\\n    },\\n    args: {\\n        clicked: fn(),\\n        focused: fn(),\\n        blurred: fn()\\n    }\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\',\\n        disabled: false,\\n        loading: false,\\n        hideTextOnLoading: false,\\n        fullWidth: false,\\n        rounded: false,\\n        square: false,\\n        type: \'button\',\\n        customClass: \'\',\\n        ariaLabel: \'\',\\n        testId: \'button-playground\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [type]=\\"type\\"\\n      [disabled]=\\"disabled\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [square]=\\"square\\"\\n      [customClass]=\\"customClass\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      [testId]=\\"testId\\"\\n      (clicked)=\\"clicked($event)\\"\\n      (focused)=\\"focused($event)\\"\\n      (blurred)=\\"blurred($event)\\">\\n      Playground Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Interactive playground to experiment with all button properties and see real-time changes.\'\\n            }\\n        }\\n    }\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [disabled]=\\"disabled\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [square]=\\"square\\"\\n      [customClass]=\\"customClass\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      [testId]=\\"testId\\"\\n      (clicked)=\\"clicked($event)\\"\\n      (focused)=\\"focused($event)\\"\\n      (blurred)=\\"blurred($event)\\">\\n      Primary Button\\n    </qk-button>`\\n    })\\n}"},{"name":"Rounded","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        rounded: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [rounded]=\\"rounded\\">\\n      Rounded Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with fully rounded corners\'\\n            }\\n        }\\n    }\\n}"},{"name":"Secondary","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'secondary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [disabled]=\\"disabled\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [square]=\\"square\\"\\n      [customClass]=\\"customClass\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      [testId]=\\"testId\\"\\n      (clicked)=\\"clicked($event)\\"\\n      (focused)=\\"focused($event)\\"\\n      (blurred)=\\"blurred($event)\\">\\n      Secondary Button\\n    </qk-button>`\\n    })\\n}"},{"name":"Square","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        square: true,\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [square]=\\"square\\">\\n      Square Button\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with no border radius (square corners)\'\\n            }\\n        }\\n    }\\n}"},{"name":"SquareModifier","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'info\',\\n        size: \'md\',\\n        square: true\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\"\\n      [square]=\\"square\\">\\n      Square Button Test\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Tests the square modifier to ensure it adds the correct CSS class.\'\\n            }\\n        }\\n    }\\n}"},{"name":"Success","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'success\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\" \\n      [disabled]=\\"disabled\\" \\n      [loading]=\\"loading\\"\\n      [hideTextOnLoading]=\\"hideTextOnLoading\\"\\n      [fullWidth]=\\"fullWidth\\"\\n      [rounded]=\\"rounded\\"\\n      [square]=\\"square\\"\\n      [customClass]=\\"customClass\\"\\n      [ariaLabel]=\\"ariaLabel\\"\\n      [testId]=\\"testId\\"\\n      (clicked)=\\"clicked($event)\\"\\n      (focused)=\\"focused($event)\\"\\n      (blurred)=\\"blurred($event)\\">\\n      Success Button\\n    </qk-button>`\\n    })\\n}"},{"name":"WithBothIcons","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\">\\n      <svg slot=\\"icon-left\\" width=\\"16\\" height=\\"16\\" fill=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n        <path d=\\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\\"/>\\n      </svg>\\n      Save Changes\\n      <svg slot=\\"icon-right\\" width=\\"16\\" height=\\"16\\" fill=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n        <path d=\\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\\"/>\\n      </svg>\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with icons on both left and right sides\'\\n            }\\n        }\\n    }\\n}"},{"name":"WithLeftIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\">\\n      <svg slot=\\"icon-left\\" width=\\"16\\" height=\\"16\\" fill=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n        <path d=\\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\\"/>\\n      </svg>\\n      Add Item\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with an icon on the left side\'\\n            }\\n        }\\n    }\\n}"},{"name":"WithRightIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    args: {\\n        variant: \'primary\',\\n        size: \'md\'\\n    },\\n    render: (args) => ({\\n        props: args,\\n        template: `<qk-button \\n      [variant]=\\"variant\\" \\n      [size]=\\"size\\">\\n      Continue\\n      <svg slot=\\"icon-right\\" width=\\"16\\" height=\\"16\\" fill=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n        <path d=\\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\\"/>\\n      </svg>\\n    </qk-button>`\\n    }),\\n    parameters: {\\n        docs: {\\n            description: {\\n                story: \'Button with an icon on the right side\'\\n            }\\n        }\\n    }\\n}"}],"projects/quanta-kit/src/lib/quanta-kit.stories.ts":[{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/quanta-kit.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<QuantaKit>","defaultValue":"{\\n  title: \'Example/Starter\',\\n  component: QuantaKit,\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    backgroundColor: {\\n      control: \'color\',\\n    },\\n  },\\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\\n  args: { onClick: fn() },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/src/lib/quanta-kit.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n}"}],"projects/quanta-kit/.storybook/preview.ts":[{"name":"preview","ctype":"miscellaneous","subtype":"variable","file":"projects/quanta-kit/.storybook/preview.ts","deprecated":false,"deprecationMessage":"","type":"Preview","defaultValue":"{\\n  parameters: {\\n    controls: {\\n      matchers: {\\n       color: /(background|color)$/i,\\n       date: /Date$/i,\\n      },\\n    },\\n  },\\n}"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{"projects/quanta-kit/src/lib/quanta-kit.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<QuantaKit>","file":"projects/quanta-kit/src/lib/quanta-kit.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/quanta-kit/src/lib/Button/button.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<ButtonComponent>","file":"projects/quanta-kit/src/lib/Button/button.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}]}},"routes":[],"coverage":{"count":0,"status":"low","files":[{"filePath":"projects/quanta-kit/.storybook/preview.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"preview","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AllModifiersCombined","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AllSizes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AllVariants","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ClickWhenDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ClickWhenLoading","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CustomClassHandling","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Danger","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Disabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DisabledAndLoading","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"EmptyCustomClass","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"FocusAndBlurEvents","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"FullWidth","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"FullWidthWithCustomClass","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"IconOnly","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"InteractionTest","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"InteractiveStates","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Loading","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoadingHideText","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Rounded","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Secondary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Square","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"SquareModifier","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Success","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithBothIcons","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithLeftIcon","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithRightIcon","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/Button/button.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/quanta-kit.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/quanta-kit.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/quanta-kit/src/lib/quanta-kit.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"}]}}');function cov_1f6hzb5561(){var path="/home/runner/work/quanta-kit-angular/quanta-kit-angular/projects/quanta-kit/.storybook/preview.ts",global=new Function("return this")(),gcv="__coverage__",coverageData={path:"/home/runner/work/quanta-kit-angular/quanta-kit-angular/projects/quanta-kit/.storybook/preview.ts",statementMap:{0:{start:{line:3,column:0},end:{line:3,column:25}},1:{start:{line:4,column:16},end:{line:13,column:1}}},fnMap:{},branchMap:{},s:{0:0,1:0},f:{},b:{},inputSourceMap:{version:3,file:void 0,names:["setCompodocJson","docJson","preview","parameters","controls","matchers","color","date"],sourceRoot:void 0,sources:["/home/runner/work/quanta-kit-angular/quanta-kit-angular/projects/quanta-kit/.storybook/preview.ts"],sourcesContent:['import { setCompodocJson } from "@storybook/addon-docs/angular";\nimport docJson from "../documentation.json";\nsetCompodocJson(docJson);\nconst preview = {\n    parameters: {\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/i,\n            },\n        },\n    },\n};\nexport default preview;\n'],mappings:"AAAA,SAASA,eAAe,QAAQ,+BAA+B;AAC/D,OAAOC,OAAO,MAAM,uBAAuB;AAC3CD,eAAe,CAACC,OAAO,CAAC;AACxB,MAAMC,OAAO,GAAG;EACZC,UAAU,EAAE;IACRC,QAAQ,EAAE;MACNC,QAAQ,EAAE;QACNC,KAAK,EAAE,sBAAsB;QAC7BC,IAAI,EAAE;MACV;IACJ;EACJ;AACJ,CAAC;AACD,eAAeL,OAAO",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"18401bef65b38e068805fa1d116dc90ecf05afa1"},coverage=global[gcv]||(global[gcv]={});coverage[path]&&"18401bef65b38e068805fa1d116dc90ecf05afa1"===coverage[path].hash||(coverage[path]=coverageData);var actualCoverage=coverage[path];return cov_1f6hzb5561=function(){return actualCoverage},actualCoverage}cov_1f6hzb5561(),cov_1f6hzb5561().s[0]++,(0,angular.$)(documentation_namespaceObject);const _storybook_preview=(cov_1f6hzb5561().s[1]++,{parameters:{controls:{matchers:{color:/(background|color)$/i,date:/Date$/i}}}})},"./projects/quanta-kit/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/quanta-kit\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./Configure.mdx":["./projects/quanta-kit/src/Configure.mdx",707]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then(()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e});var ids=map[req],id=ids[0];return __webpack_require__.e(ids[1]).then(()=>__webpack_require__(id))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./projects/quanta-kit/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/quanta-kit\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$",module.exports=webpackAsyncContext},"./projects/quanta-kit/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/quanta-kit\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cmjs%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./lib/Button/button.stories":["./projects/quanta-kit/src/lib/Button/button.stories.ts",558],"./lib/Button/button.stories.ts":["./projects/quanta-kit/src/lib/Button/button.stories.ts",558],"./lib/quanta-kit.stories":["./projects/quanta-kit/src/lib/quanta-kit.stories.ts",616],"./lib/quanta-kit.stories.ts":["./projects/quanta-kit/src/lib/quanta-kit.stories.ts",616]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then(()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e});var ids=map[req],id=ids[0];return __webpack_require__.e(ids[1]).then(()=>__webpack_require__(id))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./projects/quanta-kit/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/quanta-kit\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cmjs%7Cts%7Ctsx))$",module.exports=webpackAsyncContext},"./storybook-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var external_STORYBOOK_MODULE_CHANNELS_=__webpack_require__("storybook/internal/channels"),csf=(__webpack_require__("storybook/internal/core-events"),__webpack_require__("./node_modules/storybook/dist/csf/index.js")),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/preview-api"),asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");const pipeline=x=>x(),importers=[function(){var _ref=(0,asyncToGenerator.A)(function*(path){if(!/^\.[\\/](?:projects\/quanta-kit\/src(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.mdx)$/.exec(path))return;const pathRemainder=path.substring(26);return __webpack_require__("./projects/quanta-kit/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/quanta-kit\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$")("./"+pathRemainder)});return function(_x){return _ref.apply(this,arguments)}}(),function(){var _ref2=(0,asyncToGenerator.A)(function*(path){if(!/^\.[\\/](?:projects\/quanta-kit\/src(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.stories\.(js|jsx|mjs|ts|tsx))$/.exec(path))return;const pathRemainder=path.substring(26);return __webpack_require__("./projects/quanta-kit/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/quanta-kit\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cmjs%7Cts%7Ctsx))$")("./"+pathRemainder)});return function(_x2){return _ref2.apply(this,arguments)}}()];function _importFn(){return(_importFn=(0,asyncToGenerator.A)(function*(path){for(let i=0;i<importers.length;i++){const moduleExports=yield pipeline(()=>importers[i](path));if(moduleExports)return moduleExports}})).apply(this,arguments)}const channel=(0,external_STORYBOOK_MODULE_CHANNELS_.createBrowserChannel)({page:"preview"});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setChannel(channel),"DEVELOPMENT"===external_STORYBOOK_MODULE_GLOBAL_.global.CONFIG_TYPE&&(window.__STORYBOOK_SERVER_CHANNEL__=channel);const preview=new external_STORYBOOK_MODULE_PREVIEW_API_.PreviewWeb(function importFn(_x3){return _importFn.apply(this,arguments)},()=>{const previewAnnotations=[__webpack_require__("./node_modules/@storybook/angular/dist/client/preview-prod.mjs"),__webpack_require__("./node_modules/@storybook/angular/dist/client/config.mjs"),__webpack_require__("./node_modules/@storybook/angular/dist/client/docs/config.mjs"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-a11y/dist/preview.mjs"),__webpack_require__("./projects/quanta-kit/.storybook/preview.ts")],userPreview=previewAnnotations[previewAnnotations.length-1]?.default;return(0,csf.bU)(userPreview)?userPreview.composed:(0,external_STORYBOOK_MODULE_PREVIEW_API_.composeConfigs)(previewAnnotations)});window.__STORYBOOK_PREVIEW__=preview,window.__STORYBOOK_STORY_STORE__=preview.storyStore,window.__STORYBOOK_ADDONS_CHANNEL__=channel},"@storybook/global":module=>{"use strict";module.exports=__STORYBOOK_MODULE_GLOBAL__},"storybook/internal/channels":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CHANNELS__},"storybook/internal/client-logger":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CLIENT_LOGGER__},"storybook/internal/core-events":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS__},"storybook/internal/preview-errors":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS__},"storybook/preview-api":module=>{"use strict";module.exports=__STORYBOOK_MODULE_PREVIEW_API__},"storybook/test":module=>{"use strict";module.exports=__STORYBOOK_MODULE_TEST__}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[825],()=>(__webpack_exec__("./node_modules/@angular/compiler/fesm2022/compiler.mjs"),__webpack_exec__("./node_modules/zone.js/fesm2015/zone.js"),__webpack_exec__("./storybook-config-entry.js")));__webpack_require__.O()}]);