(self.webpackChunkquanta_kit_angular=self.webpackChunkquanta_kit_angular||[]).push([[558],{"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map(function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content}).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/noSourceMaps.js":module=>{"use strict";module.exports=function(i){return i[1]}},"./projects/quanta-kit/src/lib/Button/button.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".qk-btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  border: 1px solid transparent;\n  border-radius: 0.375rem;\n  font-family: inherit;\n  font-weight: 500;\n  text-align: center;\n  text-decoration: none;\n  vertical-align: middle;\n  cursor: pointer;\n  -webkit-user-select: none;\n          user-select: none;\n  transition: all 0.15s ease-in-out;\n  position: relative;\n  overflow: hidden;\n}\n.qk-btn:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);\n}\n.qk-btn:disabled, .qk-btn--disabled {\n  pointer-events: none;\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n.qk-btn--primary {\n  background-color: #3b82f6;\n  border-color: #3b82f6;\n  color: #ffffff;\n}\n.qk-btn--primary:hover:not(:disabled) {\n  background-color: #2563eb;\n  border-color: #2563eb;\n}\n.qk-btn--primary:active:not(:disabled) {\n  background-color: #1d4ed8;\n  border-color: #1d4ed8;\n}\n.qk-btn--secondary {\n  background-color: #6b7280;\n  border-color: #6b7280;\n  color: #ffffff;\n}\n.qk-btn--secondary:hover:not(:disabled) {\n  background-color: #4b5563;\n  border-color: #4b5563;\n}\n.qk-btn--secondary:active:not(:disabled) {\n  background-color: #374151;\n  border-color: #374151;\n}\n.qk-btn--success {\n  background-color: #10b981;\n  border-color: #10b981;\n  color: #ffffff;\n}\n.qk-btn--success:hover:not(:disabled) {\n  background-color: #059669;\n  border-color: #059669;\n}\n.qk-btn--success:active:not(:disabled) {\n  background-color: #047857;\n  border-color: #047857;\n}\n.qk-btn--danger {\n  background-color: #ef4444;\n  border-color: #ef4444;\n  color: #ffffff;\n}\n.qk-btn--danger:hover:not(:disabled) {\n  background-color: #dc2626;\n  border-color: #dc2626;\n}\n.qk-btn--danger:active:not(:disabled) {\n  background-color: #b91c1c;\n  border-color: #b91c1c;\n}\n.qk-btn--warning {\n  background-color: #f59e0b;\n  border-color: #f59e0b;\n  color: #ffffff;\n}\n.qk-btn--warning:hover:not(:disabled) {\n  background-color: #d97706;\n  border-color: #d97706;\n}\n.qk-btn--warning:active:not(:disabled) {\n  background-color: #b45309;\n  border-color: #b45309;\n}\n.qk-btn--info {\n  background-color: #06b6d4;\n  border-color: #06b6d4;\n  color: #ffffff;\n}\n.qk-btn--info:hover:not(:disabled) {\n  background-color: #0891b2;\n  border-color: #0891b2;\n}\n.qk-btn--info:active:not(:disabled) {\n  background-color: #0e7490;\n  border-color: #0e7490;\n}\n.qk-btn--light {\n  background-color: #f8fafc;\n  border-color: #e2e8f0;\n  color: #1e293b;\n}\n.qk-btn--light:hover:not(:disabled) {\n  background-color: #f1f5f9;\n  border-color: #cbd5e1;\n}\n.qk-btn--light:active:not(:disabled) {\n  background-color: #e2e8f0;\n  border-color: #94a3b8;\n}\n.qk-btn--dark {\n  background-color: #1e293b;\n  border-color: #1e293b;\n  color: #ffffff;\n}\n.qk-btn--dark:hover:not(:disabled) {\n  background-color: #0f172a;\n  border-color: #0f172a;\n}\n.qk-btn--dark:active:not(:disabled) {\n  background-color: #020617;\n  border-color: #020617;\n}\n.qk-btn--outline-primary {\n  background-color: transparent;\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n.qk-btn--outline-primary:hover:not(:disabled) {\n  background-color: #3b82f6;\n  color: #ffffff;\n}\n.qk-btn--outline-secondary {\n  background-color: transparent;\n  border-color: #6b7280;\n  color: #6b7280;\n}\n.qk-btn--outline-secondary:hover:not(:disabled) {\n  background-color: #6b7280;\n  color: #ffffff;\n}\n.qk-btn--outline-success {\n  background-color: transparent;\n  border-color: #10b981;\n  color: #10b981;\n}\n.qk-btn--outline-success:hover:not(:disabled) {\n  background-color: #10b981;\n  color: #ffffff;\n}\n.qk-btn--outline-danger {\n  background-color: transparent;\n  border-color: #ef4444;\n  color: #ef4444;\n}\n.qk-btn--outline-danger:hover:not(:disabled) {\n  background-color: #ef4444;\n  color: #ffffff;\n}\n.qk-btn--outline-warning {\n  background-color: transparent;\n  border-color: #f59e0b;\n  color: #f59e0b;\n}\n.qk-btn--outline-warning:hover:not(:disabled) {\n  background-color: #f59e0b;\n  color: #ffffff;\n}\n.qk-btn--outline-info {\n  background-color: transparent;\n  border-color: #06b6d4;\n  color: #06b6d4;\n}\n.qk-btn--outline-info:hover:not(:disabled) {\n  background-color: #06b6d4;\n  color: #ffffff;\n}\n.qk-btn--outline-light {\n  background-color: transparent;\n  border-color: #e2e8f0;\n  color: #64748b;\n}\n.qk-btn--outline-light:hover:not(:disabled) {\n  background-color: #f8fafc;\n  border-color: #cbd5e1;\n}\n.qk-btn--outline-dark {\n  background-color: transparent;\n  border-color: #1e293b;\n  color: #1e293b;\n}\n.qk-btn--outline-dark:hover:not(:disabled) {\n  background-color: #1e293b;\n  color: #ffffff;\n}\n.qk-btn--xs {\n  padding: 0.375rem 0.75rem;\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.qk-btn--sm {\n  padding: 0.5rem 1rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.qk-btn--md {\n  padding: 0.625rem 1.25rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.qk-btn--lg {\n  padding: 0.75rem 1.5rem;\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n.qk-btn--xl {\n  padding: 0.875rem 1.75rem;\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n.qk-btn--full-width {\n  width: 100%;\n}\n.qk-btn--rounded {\n  border-radius: 9999px;\n}\n.qk-btn--square {\n  border-radius: 0;\n}\n.qk-btn--loading {\n  pointer-events: none;\n}\n\n.qk-btn-content {\n  transition: opacity 0.15s ease-in-out;\n}\n.qk-btn-content--hidden {\n  opacity: 0;\n}\n\n.qk-btn-spinner {\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  border: 2px solid transparent;\n  border-top: 2px solid currentColor;\n  border-radius: 50%;\n  animation: qk-btn-spin 1s linear infinite;\n}\n\n@keyframes qk-btn-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.qk-btn:focus-visible {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);\n}\n\n@media (prefers-contrast: high) {\n  .qk-btn {\n    border-width: 2px;\n  }\n}\n@media (prefers-reduced-motion: reduce) {\n  .qk-btn {\n    transition: none;\n  }\n  .qk-btn-spinner {\n    animation: none;\n  }\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/quanta-kit/src/lib/Button/button.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllModifiersCombined:()=>AllModifiersCombined,AllSizes:()=>AllSizes,AllVariants:()=>AllVariants,ClickWhenDisabled:()=>ClickWhenDisabled,ClickWhenLoading:()=>ClickWhenLoading,CustomClassHandling:()=>CustomClassHandling,Danger:()=>Danger,Disabled:()=>Disabled,DisabledAndLoading:()=>DisabledAndLoading,EmptyCustomClass:()=>EmptyCustomClass,FocusAndBlurEvents:()=>FocusAndBlurEvents,FullWidth:()=>FullWidth,FullWidthWithCustomClass:()=>FullWidthWithCustomClass,IconOnly:()=>IconOnly,InteractionTest:()=>InteractionTest,InteractiveStates:()=>InteractiveStates,Loading:()=>Loading,LoadingHideText:()=>LoadingHideText,Playground:()=>Playground,Primary:()=>Primary,Rounded:()=>Rounded,Secondary:()=>Secondary,Square:()=>Square,SquareModifier:()=>SquareModifier,Success:()=>Success,WithBothIcons:()=>WithBothIcons,WithLeftIcon:()=>WithLeftIcon,WithRightIcon:()=>WithRightIcon,__namedExportsOrder:()=>__namedExportsOrder,default:()=>button_stories});var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");__webpack_require__("./node_modules/@storybook/angular/dist/chunk-LXSTVAFF.mjs"),__webpack_require__("storybook/preview-api");__webpack_require__("./node_modules/@storybook/angular/dist/chunk-CUDJAP6K.mjs");var external_STORYBOOK_MODULE_TEST_=__webpack_require__("storybook/test"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),button_componentngResource=__webpack_require__("./projects/quanta-kit/src/lib/Button/button.component.scss?ngResource"),button_componentngResource_default=__webpack_require__.n(button_componentngResource),debug_node=__webpack_require__("./node_modules/@angular/core/fesm2022/debug_node.mjs"),common_module=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module.mjs");function cov_16n1d392er(){var path="/home/runner/work/quanta-kit-angular/quanta-kit-angular/projects/quanta-kit/src/lib/Button/button.component.ts",global=new Function("return this")(),gcv="__coverage__",coverageData={path:"/home/runner/work/quanta-kit-angular/quanta-kit-angular/projects/quanta-kit/src/lib/Button/button.component.ts",statementMap:{0:{start:{line:5,column:22},end:{line:105,column:1}},1:{start:{line:6,column:12},end:{line:6,column:21}},2:{start:{line:7,column:9},end:{line:7,column:13}},3:{start:{line:8,column:9},end:{line:8,column:17}},4:{start:{line:9,column:13},end:{line:9,column:18}},5:{start:{line:10,column:12},end:{line:10,column:17}},6:{start:{line:11,column:22},end:{line:11,column:27}},7:{start:{line:12,column:14},end:{line:12,column:19}},8:{start:{line:13,column:12},end:{line:13,column:17}},9:{start:{line:14,column:11},end:{line:14,column:16}},10:{start:{line:15,column:16},end:{line:15,column:18}},11:{start:{line:16,column:14},end:{line:16,column:16}},12:{start:{line:17,column:16},end:{line:17,column:20}},13:{start:{line:18,column:11},end:{line:18,column:13}},14:{start:{line:19,column:12},end:{line:19,column:30}},15:{start:{line:20,column:12},end:{line:20,column:30}},16:{start:{line:21,column:12},end:{line:21,column:30}},17:{start:{line:23,column:20},end:{line:23,column:81}},18:{start:{line:24,column:4},end:{line:26,column:5}},19:{start:{line:25,column:6},end:{line:25,column:41}},20:{start:{line:27,column:4},end:{line:29,column:5}},21:{start:{line:28,column:6},end:{line:28,column:38}},22:{start:{line:30,column:4},end:{line:32,column:5}},23:{start:{line:31,column:6},end:{line:31,column:37}},24:{start:{line:33,column:4},end:{line:35,column:5}},25:{start:{line:34,column:6},end:{line:34,column:38}},26:{start:{line:36,column:4},end:{line:38,column:5}},27:{start:{line:37,column:6},end:{line:37,column:39}},28:{start:{line:39,column:4},end:{line:41,column:5}},29:{start:{line:40,column:6},end:{line:40,column:37}},30:{start:{line:42,column:4},end:{line:42,column:29}},31:{start:{line:45,column:4},end:{line:47,column:5}},32:{start:{line:46,column:6},end:{line:46,column:31}},33:{start:{line:50,column:4},end:{line:50,column:29}},34:{start:{line:53,column:4},end:{line:53,column:29}},35:{start:{line:55,column:26},end:{line:104,column:3}},36:{start:{line:106,column:0},end:{line:132,column:22}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:22,column:2},end:{line:22,column:3}},loc:{start:{line:22,column:22},end:{line:43,column:3}},line:22},1:{name:"(anonymous_1)",decl:{start:{line:44,column:2},end:{line:44,column:3}},loc:{start:{line:44,column:21},end:{line:48,column:3}},line:44},2:{name:"(anonymous_2)",decl:{start:{line:49,column:2},end:{line:49,column:3}},loc:{start:{line:49,column:21},end:{line:51,column:3}},line:49},3:{name:"(anonymous_3)",decl:{start:{line:52,column:2},end:{line:52,column:3}},loc:{start:{line:52,column:20},end:{line:54,column:3}},line:52}},branchMap:{0:{loc:{start:{line:24,column:4},end:{line:26,column:5}},type:"if",locations:[{start:{line:24,column:4},end:{line:26,column:5}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:24},1:{loc:{start:{line:27,column:4},end:{line:29,column:5}},type:"if",locations:[{start:{line:27,column:4},end:{line:29,column:5}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:27},2:{loc:{start:{line:30,column:4},end:{line:32,column:5}},type:"if",locations:[{start:{line:30,column:4},end:{line:32,column:5}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:30},3:{loc:{start:{line:33,column:4},end:{line:35,column:5}},type:"if",locations:[{start:{line:33,column:4},end:{line:35,column:5}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:33},4:{loc:{start:{line:36,column:4},end:{line:38,column:5}},type:"if",locations:[{start:{line:36,column:4},end:{line:38,column:5}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:36},5:{loc:{start:{line:39,column:4},end:{line:41,column:5}},type:"if",locations:[{start:{line:39,column:4},end:{line:41,column:5}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:39},6:{loc:{start:{line:45,column:4},end:{line:47,column:5}},type:"if",locations:[{start:{line:45,column:4},end:{line:47,column:5}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:45},7:{loc:{start:{line:45,column:8},end:{line:45,column:39}},type:"binary-expr",locations:[{start:{line:45,column:8},end:{line:45,column:22}},{start:{line:45,column:26},end:{line:45,column:39}}],line:45}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0},f:{0:0,1:0,2:0,3:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0]},inputSourceMap:{version:3,file:void 0,names:["__decorate","__NG_CLI_RESOURCE__0","Component","Input","Output","EventEmitter","ChangeDetectionStrategy","CommonModule","ButtonComponent","variant","size","type","disabled","loading","hideTextOnLoading","fullWidth","rounded","square","customClass","ariaLabel","ariaPressed","testId","clicked","focused","blurred","buttonClasses","classes","push","join","handleClick","event","emit","handleFocus","handleBlur","propDecorators","selector","standalone","imports","template","changeDetection","OnPush","styles"],sourceRoot:void 0,sources:["/home/runner/work/quanta-kit-angular/quanta-kit-angular/projects/quanta-kit/src/lib/Button/button.component.ts"],sourcesContent:['import { __decorate } from "tslib";\nimport __NG_CLI_RESOURCE__0 from "./button.component.scss?ngResource";\nimport { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from \'@angular/core\';\nimport { CommonModule } from \'@angular/common\';\nlet ButtonComponent = class ButtonComponent {\n    variant = \'primary\';\n    size = \'md\';\n    type = \'button\';\n    disabled = false;\n    loading = false;\n    hideTextOnLoading = false;\n    fullWidth = false;\n    rounded = false;\n    square = false;\n    customClass = \'\';\n    ariaLabel = \'\';\n    ariaPressed = null;\n    testId = \'\';\n    clicked = new EventEmitter();\n    focused = new EventEmitter();\n    blurred = new EventEmitter();\n    get buttonClasses() {\n        const classes = [\n            \'qk-btn\',\n            `qk-btn--${this.variant}`,\n            `qk-btn--${this.size}`,\n        ];\n        if (this.fullWidth) {\n            classes.push(\'qk-btn--full-width\');\n        }\n        if (this.rounded) {\n            classes.push(\'qk-btn--rounded\');\n        }\n        if (this.square) {\n            classes.push(\'qk-btn--square\');\n        }\n        if (this.loading) {\n            classes.push(\'qk-btn--loading\');\n        }\n        if (this.disabled) {\n            classes.push(\'qk-btn--disabled\');\n        }\n        if (this.customClass) {\n            classes.push(this.customClass);\n        }\n        return classes.join(\' \');\n    }\n    handleClick(event) {\n        if (!this.disabled && !this.loading) {\n            this.clicked.emit(event);\n        }\n    }\n    handleFocus(event) {\n        this.focused.emit(event);\n    }\n    handleBlur(event) {\n        this.blurred.emit(event);\n    }\n    static propDecorators = {\n        variant: [{ type: Input }],\n        size: [{ type: Input }],\n        type: [{ type: Input }],\n        disabled: [{ type: Input }],\n        loading: [{ type: Input }],\n        hideTextOnLoading: [{ type: Input }],\n        fullWidth: [{ type: Input }],\n        rounded: [{ type: Input }],\n        square: [{ type: Input }],\n        customClass: [{ type: Input }],\n        ariaLabel: [{ type: Input }],\n        ariaPressed: [{ type: Input }],\n        testId: [{ type: Input }],\n        clicked: [{ type: Output }],\n        focused: [{ type: Output }],\n        blurred: [{ type: Output }]\n    };\n};\nButtonComponent = __decorate([\n    Component({\n        selector: \'qk-button\',\n        standalone: true,\n        imports: [CommonModule],\n        template: `\n    <button\n      [type]="type"\n      [disabled]="disabled || loading"\n      [class]="buttonClasses"\n      (click)="handleClick($event)"\n      (focus)="handleFocus($event)"\n      (blur)="handleBlur($event)"\n      [attr.aria-label]="ariaLabel"\n      [attr.aria-pressed]="ariaPressed"\n      [attr.data-testid]="testId"\n    >\n      <span *ngIf="loading" class="qk-btn-spinner" aria-hidden="true"></span>\n      <ng-content select="[slot=icon-left]"></ng-content>\n      <span class="qk-btn-content" [class.qk-btn-content--hidden]="loading && hideTextOnLoading">\n        <ng-content></ng-content>\n      </span>\n      <ng-content select="[slot=icon-right]"></ng-content>\n    </button>\n  `,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [__NG_CLI_RESOURCE__0]\n    })\n], ButtonComponent);\nexport { ButtonComponent };\n'],mappings:"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",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dad89c0d5263cf0d36f828858c26b81297cfefae"},coverage=global[gcv]||(global[gcv]={});coverage[path]&&"dad89c0d5263cf0d36f828858c26b81297cfefae"===coverage[path].hash||(coverage[path]=coverageData);var actualCoverage=coverage[path];return cov_16n1d392er=function(){return actualCoverage},actualCoverage}cov_16n1d392er(),cov_16n1d392er().s[0]++;let ButtonComponent=class ButtonComponent{variant=(cov_16n1d392er().s[1]++,"primary");size=(cov_16n1d392er().s[2]++,"md");type=(cov_16n1d392er().s[3]++,"button");disabled=(cov_16n1d392er().s[4]++,!1);loading=(cov_16n1d392er().s[5]++,!1);hideTextOnLoading=(cov_16n1d392er().s[6]++,!1);fullWidth=(cov_16n1d392er().s[7]++,!1);rounded=(cov_16n1d392er().s[8]++,!1);square=(cov_16n1d392er().s[9]++,!1);customClass=(cov_16n1d392er().s[10]++,"");ariaLabel=(cov_16n1d392er().s[11]++,"");ariaPressed=(cov_16n1d392er().s[12]++,null);testId=(cov_16n1d392er().s[13]++,"");clicked=(cov_16n1d392er().s[14]++,new debug_node.bkB);focused=(cov_16n1d392er().s[15]++,new debug_node.bkB);blurred=(cov_16n1d392er().s[16]++,new debug_node.bkB);get buttonClasses(){cov_16n1d392er().f[0]++;const classes=(cov_16n1d392er().s[17]++,["qk-btn",`qk-btn--${this.variant}`,`qk-btn--${this.size}`]);return cov_16n1d392er().s[18]++,this.fullWidth?(cov_16n1d392er().b[0][0]++,cov_16n1d392er().s[19]++,classes.push("qk-btn--full-width")):cov_16n1d392er().b[0][1]++,cov_16n1d392er().s[20]++,this.rounded?(cov_16n1d392er().b[1][0]++,cov_16n1d392er().s[21]++,classes.push("qk-btn--rounded")):cov_16n1d392er().b[1][1]++,cov_16n1d392er().s[22]++,this.square?(cov_16n1d392er().b[2][0]++,cov_16n1d392er().s[23]++,classes.push("qk-btn--square")):cov_16n1d392er().b[2][1]++,cov_16n1d392er().s[24]++,this.loading?(cov_16n1d392er().b[3][0]++,cov_16n1d392er().s[25]++,classes.push("qk-btn--loading")):cov_16n1d392er().b[3][1]++,cov_16n1d392er().s[26]++,this.disabled?(cov_16n1d392er().b[4][0]++,cov_16n1d392er().s[27]++,classes.push("qk-btn--disabled")):cov_16n1d392er().b[4][1]++,cov_16n1d392er().s[28]++,this.customClass?(cov_16n1d392er().b[5][0]++,cov_16n1d392er().s[29]++,classes.push(this.customClass)):cov_16n1d392er().b[5][1]++,cov_16n1d392er().s[30]++,classes.join(" ")}handleClick(event){cov_16n1d392er().f[1]++,cov_16n1d392er().s[31]++,cov_16n1d392er().b[7][0]++,this.disabled||(cov_16n1d392er().b[7][1]++,this.loading)?cov_16n1d392er().b[6][1]++:(cov_16n1d392er().b[6][0]++,cov_16n1d392er().s[32]++,this.clicked.emit(event))}handleFocus(event){cov_16n1d392er().f[2]++,cov_16n1d392er().s[33]++,this.focused.emit(event)}handleBlur(event){cov_16n1d392er().f[3]++,cov_16n1d392er().s[34]++,this.blurred.emit(event)}static propDecorators=(cov_16n1d392er().s[35]++,{variant:[{type:debug_node.pde}],size:[{type:debug_node.pde}],type:[{type:debug_node.pde}],disabled:[{type:debug_node.pde}],loading:[{type:debug_node.pde}],hideTextOnLoading:[{type:debug_node.pde}],fullWidth:[{type:debug_node.pde}],rounded:[{type:debug_node.pde}],square:[{type:debug_node.pde}],customClass:[{type:debug_node.pde}],ariaLabel:[{type:debug_node.pde}],ariaPressed:[{type:debug_node.pde}],testId:[{type:debug_node.pde}],clicked:[{type:debug_node.k7i}],focused:[{type:debug_node.k7i}],blurred:[{type:debug_node.k7i}]})};cov_16n1d392er().s[36]++,ButtonComponent=(0,tslib_es6.Cg)([(0,debug_node.uAl)({selector:"qk-button",standalone:!0,imports:[common_module.MD],template:'\n    <button\n      [type]="type"\n      [disabled]="disabled || loading"\n      [class]="buttonClasses"\n      (click)="handleClick($event)"\n      (focus)="handleFocus($event)"\n      (blur)="handleBlur($event)"\n      [attr.aria-label]="ariaLabel"\n      [attr.aria-pressed]="ariaPressed"\n      [attr.data-testid]="testId"\n    >\n      <span *ngIf="loading" class="qk-btn-spinner" aria-hidden="true"></span>\n      <ng-content select="[slot=icon-left]"></ng-content>\n      <span class="qk-btn-content" [class.qk-btn-content--hidden]="loading && hideTextOnLoading">\n        <ng-content></ng-content>\n      </span>\n      <ng-content select="[slot=icon-right]"></ng-content>\n    </button>\n  ',changeDetection:debug_node.Ngq.OnPush,styles:[button_componentngResource_default()]})],ButtonComponent);var metadata;const button_stories={title:"Components/Button",component:ButtonComponent,tags:["autodocs"],decorators:[(metadata={imports:[ButtonComponent]},storyFn=>{let story=storyFn(),storyMetadata=story.moduleMetadata||{};return metadata=metadata||{},{...story,moduleMetadata:{declarations:[...metadata.declarations||[],...storyMetadata.declarations||[]],entryComponents:[...metadata.entryComponents||[],...storyMetadata.entryComponents||[]],imports:[...metadata.imports||[],...storyMetadata.imports||[]],schemas:[...metadata.schemas||[],...storyMetadata.schemas||[]],providers:[...metadata.providers||[],...storyMetadata.providers||[]]}}})],parameters:{docs:{description:{component:'\nThe Button component is a versatile UI element that supports various styles, sizes, and states.\nIt provides comprehensive functionality including loading states, accessibility features, and customization options.\n\n## Features\n- Multiple variants (primary, secondary, success, danger, warning, info, light, dark, and outline versions)\n- Various sizes (xs, sm, md, lg, xl)\n- Loading state with spinner\n- Disabled state\n- Full width option\n- Rounded and square variations\n- Accessibility support with ARIA attributes\n- Event emissions for click, focus, and blur\n- Icon slot support (left and right)\n- Keyboard navigation support\n\n## Usage\n```html\n<qk-button variant="primary" size="md" (clicked)="handleClick($event)">\n  Click me\n</qk-button>\n```\n\n## With Icons\n```html\n<qk-button variant="primary">\n  <svg slot="icon-left" width="16" height="16">...</svg>\n  Save Changes\n  <svg slot="icon-right" width="16" height="16">...</svg>\n</qk-button>\n```\n        '}}},argTypes:{variant:{control:"select",options:["primary","secondary","success","danger","warning","info","light","dark","outline-primary","outline-secondary","outline-success","outline-danger","outline-warning","outline-info","outline-light","outline-dark"],description:"The visual style variant of the button"},size:{control:"select",options:["xs","sm","md","lg","xl"],description:"The size of the button"},type:{control:"select",options:["button","submit","reset"],description:"The HTML type attribute of the button"},disabled:{control:"boolean",description:"Whether the button is disabled"},loading:{control:"boolean",description:"Whether the button is in loading state"},hideTextOnLoading:{control:"boolean",description:"Whether to hide text content when loading"},fullWidth:{control:"boolean",description:"Whether the button should take full width"},rounded:{control:"boolean",description:"Whether the button has rounded corners"},square:{control:"boolean",description:"Whether the button has no border radius"},customClass:{control:"text",description:"Custom CSS classes to apply"},ariaLabel:{control:"text",description:"ARIA label for accessibility"},testId:{control:"text",description:"Test ID for testing purposes"},clicked:{action:"clicked",description:"Event emitted when button is clicked"},focused:{action:"focused",description:"Event emitted when button receives focus"},blurred:{action:"blurred",description:"Event emitted when button loses focus"}},args:{clicked:(0,external_STORYBOOK_MODULE_TEST_.fn)(),focused:(0,external_STORYBOOK_MODULE_TEST_.fn)(),blurred:(0,external_STORYBOOK_MODULE_TEST_.fn)()}},Primary={args:{variant:"primary",size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [disabled]="disabled" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [square]="square"\n      [customClass]="customClass"\n      [ariaLabel]="ariaLabel"\n      [testId]="testId"\n      (clicked)="clicked($event)"\n      (focused)="focused($event)"\n      (blurred)="blurred($event)">\n      Primary Button\n    </qk-button>'})},Secondary={args:{variant:"secondary",size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [disabled]="disabled" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [square]="square"\n      [customClass]="customClass"\n      [ariaLabel]="ariaLabel"\n      [testId]="testId"\n      (clicked)="clicked($event)"\n      (focused)="focused($event)"\n      (blurred)="blurred($event)">\n      Secondary Button\n    </qk-button>'})},Success={args:{variant:"success",size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [disabled]="disabled" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [square]="square"\n      [customClass]="customClass"\n      [ariaLabel]="ariaLabel"\n      [testId]="testId"\n      (clicked)="clicked($event)"\n      (focused)="focused($event)"\n      (blurred)="blurred($event)">\n      Success Button\n    </qk-button>'})},Danger={args:{variant:"danger",size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [disabled]="disabled" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [square]="square"\n      [customClass]="customClass"\n      [ariaLabel]="ariaLabel"\n      [testId]="testId"\n      (clicked)="clicked($event)"\n      (focused)="focused($event)"\n      (blurred)="blurred($event)">\n      Danger Button\n    </qk-button>'})},AllSizes={render:()=>({template:'\n    <div style="display: flex; flex-direction: column; gap: 1rem; align-items: flex-start;">\n      <qk-button variant="primary" size="xs">Extra Small</qk-button>\n      <qk-button variant="primary" size="sm">Small</qk-button>\n      <qk-button variant="primary" size="md">Medium</qk-button>\n      <qk-button variant="primary" size="lg">Large</qk-button>\n      <qk-button variant="primary" size="xl">Extra Large</qk-button>\n    </div>\n    '}),parameters:{docs:{description:{story:"Buttons are available in 5 different sizes: xs, sm, md, lg, xl"}}}},AllVariants={render:()=>({template:'\n    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem;">\n      <qk-button variant="primary">Primary</qk-button>\n      <qk-button variant="secondary">Secondary</qk-button>\n      <qk-button variant="success">Success</qk-button>\n      <qk-button variant="danger">Danger</qk-button>\n      <qk-button variant="warning">Warning</qk-button>\n      <qk-button variant="info">Info</qk-button>\n      <qk-button variant="light">Light</qk-button>\n      <qk-button variant="dark">Dark</qk-button>\n      <qk-button variant="outline-primary">Outline Primary</qk-button>\n      <qk-button variant="outline-secondary">Outline Secondary</qk-button>\n      <qk-button variant="outline-success">Outline Success</qk-button>\n      <qk-button variant="outline-danger">Outline Danger</qk-button>\n      <qk-button variant="outline-warning">Outline Warning</qk-button>\n      <qk-button variant="outline-info">Outline Info</qk-button>\n      <qk-button variant="outline-light">Outline Light</qk-button>\n      <qk-button variant="outline-dark">Outline Dark</qk-button>\n    </div>\n    '}),parameters:{docs:{description:{story:"All available button variants including solid and outline styles"}}}},Loading={args:{variant:"primary",loading:!0,size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading">\n      Loading Button\n    </qk-button>'}),parameters:{docs:{description:{story:"Button in loading state with spinner animation"}}}},LoadingHideText={args:{variant:"primary",loading:!0,hideTextOnLoading:!0,size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading">\n      Processing...\n    </qk-button>'}),parameters:{docs:{description:{story:"Button in loading state with hidden text content"}}}},Disabled={args:{variant:"primary",disabled:!0,size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [disabled]="disabled">\n      Disabled Button\n    </qk-button>'}),parameters:{docs:{description:{story:"Button in disabled state"}}}},FullWidth={args:{variant:"primary",fullWidth:!0,size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [fullWidth]="fullWidth">\n      Full Width Button\n    </qk-button>'}),parameters:{docs:{description:{story:"Button that takes the full width of its container"}}}},Rounded={args:{variant:"primary",rounded:!0,size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [rounded]="rounded">\n      Rounded Button\n    </qk-button>'}),parameters:{docs:{description:{story:"Button with fully rounded corners"}}}},Square={args:{variant:"primary",square:!0,size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [square]="square">\n      Square Button\n    </qk-button>'}),parameters:{docs:{description:{story:"Button with no border radius (square corners)"}}}},WithLeftIcon={args:{variant:"primary",size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size">\n      <svg slot="icon-left" width="16" height="16" fill="currentColor" viewBox="0 0 24 24">\n        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>\n      </svg>\n      Add Item\n    </qk-button>'}),parameters:{docs:{description:{story:"Button with an icon on the left side"}}}},WithRightIcon={args:{variant:"primary",size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size">\n      Continue\n      <svg slot="icon-right" width="16" height="16" fill="currentColor" viewBox="0 0 24 24">\n        <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/>\n      </svg>\n    </qk-button>'}),parameters:{docs:{description:{story:"Button with an icon on the right side"}}}},WithBothIcons={args:{variant:"primary",size:"md"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size">\n      <svg slot="icon-left" width="16" height="16" fill="currentColor" viewBox="0 0 24 24">\n        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>\n      </svg>\n      Save Changes\n      <svg slot="icon-right" width="16" height="16" fill="currentColor" viewBox="0 0 24 24">\n        <path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"/>\n      </svg>\n    </qk-button>'}),parameters:{docs:{description:{story:"Button with icons on both left and right sides"}}}},IconOnly={args:{variant:"primary",size:"md",ariaLabel:"Delete item"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size"\n      [ariaLabel]="ariaLabel"\n      style="padding: 0.625rem;">\n      <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">\n        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>\n      </svg>\n    </qk-button>'}),parameters:{docs:{description:{story:"Button with only an icon, useful for actions like delete, close, etc. Make sure to provide an aria-label for accessibility."}}}},InteractiveStates={render:()=>({template:'\n    <div style="display: flex; flex-direction: column; gap: 1rem; align-items: flex-start; max-width: 300px;">\n      <qk-button variant="primary">Normal State</qk-button>\n      <qk-button variant="primary" [disabled]="true">Disabled State</qk-button>\n      <qk-button variant="primary" [loading]="true">Loading State</qk-button>\n      <qk-button variant="primary" [loading]="true" [hideTextOnLoading]="true">Loading (Hidden Text)</qk-button>\n    </div>\n    '}),parameters:{docs:{description:{story:"Different interactive states of the button component"}}}},Playground={args:{variant:"primary",size:"md",disabled:!1,loading:!1,hideTextOnLoading:!1,fullWidth:!1,rounded:!1,square:!1,type:"button",customClass:"",ariaLabel:"",testId:"button-playground"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size" \n      [type]="type"\n      [disabled]="disabled" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [square]="square"\n      [customClass]="customClass"\n      [ariaLabel]="ariaLabel"\n      [testId]="testId"\n      (clicked)="clicked($event)"\n      (focused)="focused($event)"\n      (blurred)="blurred($event)">\n      Playground Button\n    </qk-button>'}),parameters:{docs:{description:{story:"Interactive playground to experiment with all button properties and see real-time changes."}}}},FocusAndBlurEvents={args:{variant:"primary",size:"md"},render:args=>({props:args,template:'\n    <div style="display: flex; flex-direction: column; gap: 1rem;">\n      <p>This story tests focus and blur events:</p>\n      <qk-button \n        [variant]="variant" \n        [size]="size"\n        (clicked)="clicked($event)"\n        (focused)="focused($event)"\n        (blurred)="blurred($event)">\n        Focus/Blur Test Button\n      </qk-button>\n      <qk-button variant="secondary">Another Button (for tabbing)</qk-button>\n    </div>\n    '}),parameters:{docs:{description:{story:"Story specifically designed to test focus and blur event handling. The play function will automatically trigger these events for testing coverage."}}},play:(_ref=(0,asyncToGenerator.A)(function*({canvasElement}){const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),button=canvas.getByText("Focus/Blur Test Button");yield external_STORYBOOK_MODULE_TEST_.userEvent.click(button),yield button.focus();const secondButton=canvas.getByText("Another Button (for tabbing)");yield external_STORYBOOK_MODULE_TEST_.userEvent.tab(),yield secondButton.focus()}),function play(_x){return _ref.apply(this,arguments)})};var _ref;const CustomClassHandling={args:{variant:"primary",size:"md",customClass:"my-custom-class another-custom-class"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size"\n      [customClass]="customClass">\n      Button with Custom Classes\n    </qk-button>'}),parameters:{docs:{description:{story:"Tests custom class handling in the buttonClasses getter."}}}},EmptyCustomClass={args:{variant:"primary",size:"md",customClass:""},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size"\n      [customClass]="customClass">\n      Button with Empty Custom Class\n    </qk-button>'}),parameters:{docs:{description:{story:"Tests handling of empty custom class to ensure no empty strings are added to classes."}}}},AllModifiersCombined={args:{variant:"success",size:"lg",fullWidth:!0,rounded:!0,loading:!0,disabled:!1,customClass:"test-modifier-class"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [loading]="loading"\n      [disabled]="disabled"\n      [customClass]="customClass">\n      All Modifiers Combined\n    </qk-button>'}),parameters:{docs:{description:{story:"Tests all possible modifier combinations to ensure buttonClasses getter covers all branches."}}}},ClickWhenDisabled={args:{variant:"primary",size:"md",disabled:!0},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size"\n      [disabled]="disabled"\n      (clicked)="clicked($event)">\n      Disabled Button (Click Test)\n    </qk-button>'}),parameters:{docs:{description:{story:"Tests that click events are not emitted when button is disabled. The button has pointer-events: none so interactions are prevented."}}},play:(_ref2=(0,asyncToGenerator.A)(function*({canvasElement}){const button=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement).getByRole("button");(0,external_STORYBOOK_MODULE_TEST_.expect)(button).toBeDisabled(),(0,external_STORYBOOK_MODULE_TEST_.expect)(button).toHaveClass("qk-btn--disabled")}),function play(_x2){return _ref2.apply(this,arguments)})};var _ref2;const ClickWhenLoading={args:{variant:"primary",size:"md",loading:!0},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size"\n      [loading]="loading"\n      (clicked)="clicked($event)">\n      Loading Button (Click Test)\n    </qk-button>'}),parameters:{docs:{description:{story:"Tests that click events are not emitted when button is in loading state. The button has pointer-events: none so interactions are prevented."}}},play:(_ref3=(0,asyncToGenerator.A)(function*({canvasElement}){const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),button=canvas.getByRole("button");(0,external_STORYBOOK_MODULE_TEST_.expect)(button).toBeDisabled(),(0,external_STORYBOOK_MODULE_TEST_.expect)(button).toHaveClass("qk-btn--loading");const spinner=canvas.getByRole("button").querySelector(".qk-btn-spinner");(0,external_STORYBOOK_MODULE_TEST_.expect)(spinner).toBeInTheDocument()}),function play(_x3){return _ref3.apply(this,arguments)})};var _ref3;const SquareModifier={args:{variant:"info",size:"md",square:!0},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size"\n      [square]="square">\n      Square Button Test\n    </qk-button>'}),parameters:{docs:{description:{story:"Tests the square modifier to ensure it adds the correct CSS class."}}}},DisabledAndLoading={args:{variant:"warning",size:"sm",disabled:!0,loading:!0},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size"\n      [disabled]="disabled"\n      [loading]="loading">\n      Disabled + Loading\n    </qk-button>'}),parameters:{docs:{description:{story:"Tests combination of disabled and loading states."}}}},FullWidthWithCustomClass={args:{variant:"dark",size:"xl",fullWidth:!0,customClass:"test-full-width-custom"},render:args=>({props:args,template:'<qk-button \n      [variant]="variant" \n      [size]="size"\n      [fullWidth]="fullWidth"\n      [customClass]="customClass">\n      Full Width + Custom Class\n    </qk-button>'}),parameters:{docs:{description:{story:"Tests full width with custom class combination."}}}},InteractionTest={args:{variant:"primary",size:"md"},render:args=>({props:args,template:'\n    <div style="display: flex; flex-direction: column; gap: 1rem;">\n      <qk-button \n        [variant]="variant" \n        [size]="size"\n        (clicked)="clicked($event)"\n        (focused)="focused($event)"\n        (blurred)="blurred($event)">\n        Interactive Test Button\n      </qk-button>\n      <input type="text" placeholder="Focus target" />\n    </div>\n    '}),parameters:{docs:{description:{story:"Comprehensive interaction test that exercises all event handlers."}}},play:(_ref4=(0,asyncToGenerator.A)(function*({canvasElement,args}){const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),button=canvas.getByText("Interactive Test Button"),input=canvas.getByPlaceholderText("Focus target");yield external_STORYBOOK_MODULE_TEST_.userEvent.click(button),(0,external_STORYBOOK_MODULE_TEST_.expect)(args.clicked).toHaveBeenCalled(),yield button.focus(),(0,external_STORYBOOK_MODULE_TEST_.expect)(args.focused).toHaveBeenCalled(),yield input.focus(),(0,external_STORYBOOK_MODULE_TEST_.expect)(args.blurred).toHaveBeenCalled()}),function play(_x4){return _ref4.apply(this,arguments)})};var _ref4;const __namedExportsOrder=["Primary","Secondary","Success","Danger","AllSizes","AllVariants","Loading","LoadingHideText","Disabled","FullWidth","Rounded","Square","WithLeftIcon","WithRightIcon","WithBothIcons","IconOnly","InteractiveStates","Playground","FocusAndBlurEvents","CustomClassHandling","EmptyCustomClass","AllModifiersCombined","ClickWhenDisabled","ClickWhenLoading","SquareModifier","DisabledAndLoading","FullWidthWithCustomClass","InteractionTest"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size" \n      [disabled]="disabled" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [square]="square"\n      [customClass]="customClass"\n      [ariaLabel]="ariaLabel"\n      [testId]="testId"\n      (clicked)="clicked($event)"\n      (focused)="focused($event)"\n      (blurred)="blurred($event)">\n      Primary Button\n    </qk-button>`\n  })\n}',...Primary.parameters?.docs?.source}}},Secondary.parameters={...Secondary.parameters,docs:{...Secondary.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'secondary\',\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size" \n      [disabled]="disabled" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [square]="square"\n      [customClass]="customClass"\n      [ariaLabel]="ariaLabel"\n      [testId]="testId"\n      (clicked)="clicked($event)"\n      (focused)="focused($event)"\n      (blurred)="blurred($event)">\n      Secondary Button\n    </qk-button>`\n  })\n}',...Secondary.parameters?.docs?.source}}},Success.parameters={...Success.parameters,docs:{...Success.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'success\',\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size" \n      [disabled]="disabled" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [square]="square"\n      [customClass]="customClass"\n      [ariaLabel]="ariaLabel"\n      [testId]="testId"\n      (clicked)="clicked($event)"\n      (focused)="focused($event)"\n      (blurred)="blurred($event)">\n      Success Button\n    </qk-button>`\n  })\n}',...Success.parameters?.docs?.source}}},Danger.parameters={...Danger.parameters,docs:{...Danger.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'danger\',\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size" \n      [disabled]="disabled" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [square]="square"\n      [customClass]="customClass"\n      [ariaLabel]="ariaLabel"\n      [testId]="testId"\n      (clicked)="clicked($event)"\n      (focused)="focused($event)"\n      (blurred)="blurred($event)">\n      Danger Button\n    </qk-button>`\n  })\n}',...Danger.parameters?.docs?.source}}},AllSizes.parameters={...AllSizes.parameters,docs:{...AllSizes.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n    <div style="display: flex; flex-direction: column; gap: 1rem; align-items: flex-start;">\n      <qk-button variant="primary" size="xs">Extra Small</qk-button>\n      <qk-button variant="primary" size="sm">Small</qk-button>\n      <qk-button variant="primary" size="md">Medium</qk-button>\n      <qk-button variant="primary" size="lg">Large</qk-button>\n      <qk-button variant="primary" size="xl">Extra Large</qk-button>\n    </div>\n    `\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Buttons are available in 5 different sizes: xs, sm, md, lg, xl\'\n      }\n    }\n  }\n}',...AllSizes.parameters?.docs?.source}}},AllVariants.parameters={...AllVariants.parameters,docs:{...AllVariants.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem;">\n      <qk-button variant="primary">Primary</qk-button>\n      <qk-button variant="secondary">Secondary</qk-button>\n      <qk-button variant="success">Success</qk-button>\n      <qk-button variant="danger">Danger</qk-button>\n      <qk-button variant="warning">Warning</qk-button>\n      <qk-button variant="info">Info</qk-button>\n      <qk-button variant="light">Light</qk-button>\n      <qk-button variant="dark">Dark</qk-button>\n      <qk-button variant="outline-primary">Outline Primary</qk-button>\n      <qk-button variant="outline-secondary">Outline Secondary</qk-button>\n      <qk-button variant="outline-success">Outline Success</qk-button>\n      <qk-button variant="outline-danger">Outline Danger</qk-button>\n      <qk-button variant="outline-warning">Outline Warning</qk-button>\n      <qk-button variant="outline-info">Outline Info</qk-button>\n      <qk-button variant="outline-light">Outline Light</qk-button>\n      <qk-button variant="outline-dark">Outline Dark</qk-button>\n    </div>\n    `\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'All available button variants including solid and outline styles\'\n      }\n    }\n  }\n}',...AllVariants.parameters?.docs?.source}}},Loading.parameters={...Loading.parameters,docs:{...Loading.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    loading: true,\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading">\n      Loading Button\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Button in loading state with spinner animation\'\n      }\n    }\n  }\n}',...Loading.parameters?.docs?.source}}},LoadingHideText.parameters={...LoadingHideText.parameters,docs:{...LoadingHideText.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    loading: true,\n    hideTextOnLoading: true,\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading">\n      Processing...\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Button in loading state with hidden text content\'\n      }\n    }\n  }\n}',...LoadingHideText.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    variant: 'primary',\n    disabled: true,\n    size: 'md'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [disabled]=\"disabled\">\n      Disabled Button\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Button in disabled state'\n      }\n    }\n  }\n}",...Disabled.parameters?.docs?.source}}},FullWidth.parameters={...FullWidth.parameters,docs:{...FullWidth.parameters?.docs,source:{originalSource:"{\n  args: {\n    variant: 'primary',\n    fullWidth: true,\n    size: 'md'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [fullWidth]=\"fullWidth\">\n      Full Width Button\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Button that takes the full width of its container'\n      }\n    }\n  }\n}",...FullWidth.parameters?.docs?.source}}},Rounded.parameters={...Rounded.parameters,docs:{...Rounded.parameters?.docs,source:{originalSource:"{\n  args: {\n    variant: 'primary',\n    rounded: true,\n    size: 'md'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [rounded]=\"rounded\">\n      Rounded Button\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Button with fully rounded corners'\n      }\n    }\n  }\n}",...Rounded.parameters?.docs?.source}}},Square.parameters={...Square.parameters,docs:{...Square.parameters?.docs,source:{originalSource:"{\n  args: {\n    variant: 'primary',\n    square: true,\n    size: 'md'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [square]=\"square\">\n      Square Button\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Button with no border radius (square corners)'\n      }\n    }\n  }\n}",...Square.parameters?.docs?.source}}},WithLeftIcon.parameters={...WithLeftIcon.parameters,docs:{...WithLeftIcon.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size">\n      <svg slot="icon-left" width="16" height="16" fill="currentColor" viewBox="0 0 24 24">\n        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>\n      </svg>\n      Add Item\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Button with an icon on the left side\'\n      }\n    }\n  }\n}',...WithLeftIcon.parameters?.docs?.source}}},WithRightIcon.parameters={...WithRightIcon.parameters,docs:{...WithRightIcon.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size">\n      Continue\n      <svg slot="icon-right" width="16" height="16" fill="currentColor" viewBox="0 0 24 24">\n        <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/>\n      </svg>\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Button with an icon on the right side\'\n      }\n    }\n  }\n}',...WithRightIcon.parameters?.docs?.source}}},WithBothIcons.parameters={...WithBothIcons.parameters,docs:{...WithBothIcons.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size">\n      <svg slot="icon-left" width="16" height="16" fill="currentColor" viewBox="0 0 24 24">\n        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>\n      </svg>\n      Save Changes\n      <svg slot="icon-right" width="16" height="16" fill="currentColor" viewBox="0 0 24 24">\n        <path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"/>\n      </svg>\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Button with icons on both left and right sides\'\n      }\n    }\n  }\n}',...WithBothIcons.parameters?.docs?.source}}},IconOnly.parameters={...IconOnly.parameters,docs:{...IconOnly.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    size: \'md\',\n    ariaLabel: \'Delete item\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size"\n      [ariaLabel]="ariaLabel"\n      style="padding: 0.625rem;">\n      <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">\n        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>\n      </svg>\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Button with only an icon, useful for actions like delete, close, etc. Make sure to provide an aria-label for accessibility.\'\n      }\n    }\n  }\n}',...IconOnly.parameters?.docs?.source}}},InteractiveStates.parameters={...InteractiveStates.parameters,docs:{...InteractiveStates.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n    <div style="display: flex; flex-direction: column; gap: 1rem; align-items: flex-start; max-width: 300px;">\n      <qk-button variant="primary">Normal State</qk-button>\n      <qk-button variant="primary" [disabled]="true">Disabled State</qk-button>\n      <qk-button variant="primary" [loading]="true">Loading State</qk-button>\n      <qk-button variant="primary" [loading]="true" [hideTextOnLoading]="true">Loading (Hidden Text)</qk-button>\n    </div>\n    `\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Different interactive states of the button component\'\n      }\n    }\n  }\n}',...InteractiveStates.parameters?.docs?.source}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    size: \'md\',\n    disabled: false,\n    loading: false,\n    hideTextOnLoading: false,\n    fullWidth: false,\n    rounded: false,\n    square: false,\n    type: \'button\',\n    customClass: \'\',\n    ariaLabel: \'\',\n    testId: \'button-playground\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size" \n      [type]="type"\n      [disabled]="disabled" \n      [loading]="loading"\n      [hideTextOnLoading]="hideTextOnLoading"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [square]="square"\n      [customClass]="customClass"\n      [ariaLabel]="ariaLabel"\n      [testId]="testId"\n      (clicked)="clicked($event)"\n      (focused)="focused($event)"\n      (blurred)="blurred($event)">\n      Playground Button\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Interactive playground to experiment with all button properties and see real-time changes.\'\n      }\n    }\n  }\n}',...Playground.parameters?.docs?.source}}},FocusAndBlurEvents.parameters={...FocusAndBlurEvents.parameters,docs:{...FocusAndBlurEvents.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `\n    <div style="display: flex; flex-direction: column; gap: 1rem;">\n      <p>This story tests focus and blur events:</p>\n      <qk-button \n        [variant]="variant" \n        [size]="size"\n        (clicked)="clicked($event)"\n        (focused)="focused($event)"\n        (blurred)="blurred($event)">\n        Focus/Blur Test Button\n      </qk-button>\n      <qk-button variant="secondary">Another Button (for tabbing)</qk-button>\n    </div>\n    `\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Story specifically designed to test focus and blur event handling. The play function will automatically trigger these events for testing coverage.\'\n      }\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByText(\'Focus/Blur Test Button\');\n\n    // Focus the button\n    await userEvent.click(button);\n    await button.focus();\n\n    // Blur the button by focusing another element\n    const secondButton = canvas.getByText(\'Another Button (for tabbing)\');\n    await userEvent.tab();\n    await secondButton.focus();\n  }\n}',...FocusAndBlurEvents.parameters?.docs?.source}}},CustomClassHandling.parameters={...CustomClassHandling.parameters,docs:{...CustomClassHandling.parameters?.docs,source:{originalSource:"{\n  args: {\n    variant: 'primary',\n    size: 'md',\n    customClass: 'my-custom-class another-custom-class'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\"\n      [customClass]=\"customClass\">\n      Button with Custom Classes\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Tests custom class handling in the buttonClasses getter.'\n      }\n    }\n  }\n}",...CustomClassHandling.parameters?.docs?.source}}},EmptyCustomClass.parameters={...EmptyCustomClass.parameters,docs:{...EmptyCustomClass.parameters?.docs,source:{originalSource:"{\n  args: {\n    variant: 'primary',\n    size: 'md',\n    customClass: ''\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\"\n      [customClass]=\"customClass\">\n      Button with Empty Custom Class\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Tests handling of empty custom class to ensure no empty strings are added to classes.'\n      }\n    }\n  }\n}",...EmptyCustomClass.parameters?.docs?.source}}},AllModifiersCombined.parameters={...AllModifiersCombined.parameters,docs:{...AllModifiersCombined.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'success\',\n    size: \'lg\',\n    fullWidth: true,\n    rounded: true,\n    loading: true,\n    disabled: false,\n    customClass: \'test-modifier-class\'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size"\n      [fullWidth]="fullWidth"\n      [rounded]="rounded"\n      [loading]="loading"\n      [disabled]="disabled"\n      [customClass]="customClass">\n      All Modifiers Combined\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Tests all possible modifier combinations to ensure buttonClasses getter covers all branches.\'\n      }\n    }\n  }\n}',...AllModifiersCombined.parameters?.docs?.source}}},ClickWhenDisabled.parameters={...ClickWhenDisabled.parameters,docs:{...ClickWhenDisabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    variant: 'primary',\n    size: 'md',\n    disabled: true\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      (clicked)=\"clicked($event)\">\n      Disabled Button (Click Test)\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Tests that click events are not emitted when button is disabled. The button has pointer-events: none so interactions are prevented.'\n      }\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByRole('button');\n\n    // Verify the button is disabled (has correct attributes)\n    expect(button).toBeDisabled();\n    expect(button).toHaveClass('qk-btn--disabled');\n  }\n}",...ClickWhenDisabled.parameters?.docs?.source}}},ClickWhenLoading.parameters={...ClickWhenLoading.parameters,docs:{...ClickWhenLoading.parameters?.docs,source:{originalSource:"{\n  args: {\n    variant: 'primary',\n    size: 'md',\n    loading: true\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\"\n      [loading]=\"loading\"\n      (clicked)=\"clicked($event)\">\n      Loading Button (Click Test)\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Tests that click events are not emitted when button is in loading state. The button has pointer-events: none so interactions are prevented.'\n      }\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByRole('button');\n\n    // Verify the button is disabled due to loading and has loading class\n    expect(button).toBeDisabled();\n    expect(button).toHaveClass('qk-btn--loading');\n\n    // Verify spinner is present\n    const spinner = canvas.getByRole('button').querySelector('.qk-btn-spinner');\n    expect(spinner).toBeInTheDocument();\n  }\n}",...ClickWhenLoading.parameters?.docs?.source}}},SquareModifier.parameters={...SquareModifier.parameters,docs:{...SquareModifier.parameters?.docs,source:{originalSource:"{\n  args: {\n    variant: 'info',\n    size: 'md',\n    square: true\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\"\n      [square]=\"square\">\n      Square Button Test\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Tests the square modifier to ensure it adds the correct CSS class.'\n      }\n    }\n  }\n}",...SquareModifier.parameters?.docs?.source}}},DisabledAndLoading.parameters={...DisabledAndLoading.parameters,docs:{...DisabledAndLoading.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'warning\',\n    size: \'sm\',\n    disabled: true,\n    loading: true\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]="variant" \n      [size]="size"\n      [disabled]="disabled"\n      [loading]="loading">\n      Disabled + Loading\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Tests combination of disabled and loading states.\'\n      }\n    }\n  }\n}',...DisabledAndLoading.parameters?.docs?.source}}},FullWidthWithCustomClass.parameters={...FullWidthWithCustomClass.parameters,docs:{...FullWidthWithCustomClass.parameters?.docs,source:{originalSource:"{\n  args: {\n    variant: 'dark',\n    size: 'xl',\n    fullWidth: true,\n    customClass: 'test-full-width-custom'\n  },\n  render: args => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\"\n      [fullWidth]=\"fullWidth\"\n      [customClass]=\"customClass\">\n      Full Width + Custom Class\n    </qk-button>`\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Tests full width with custom class combination.'\n      }\n    }\n  }\n}",...FullWidthWithCustomClass.parameters?.docs?.source}}},InteractionTest.parameters={...InteractionTest.parameters,docs:{...InteractionTest.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    size: \'md\'\n  },\n  render: args => ({\n    props: args,\n    template: `\n    <div style="display: flex; flex-direction: column; gap: 1rem;">\n      <qk-button \n        [variant]="variant" \n        [size]="size"\n        (clicked)="clicked($event)"\n        (focused)="focused($event)"\n        (blurred)="blurred($event)">\n        Interactive Test Button\n      </qk-button>\n      <input type="text" placeholder="Focus target" />\n    </div>\n    `\n  }),\n  parameters: {\n    docs: {\n      description: {\n        story: \'Comprehensive interaction test that exercises all event handlers.\'\n      }\n    }\n  },\n  play: async ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByText(\'Interactive Test Button\');\n    const input = canvas.getByPlaceholderText(\'Focus target\');\n\n    // Test successful click\n    await userEvent.click(button);\n    expect(args.clicked).toHaveBeenCalled();\n\n    // Test focus\n    await button.focus();\n    expect(args.focused).toHaveBeenCalled();\n\n    // Test blur by focusing another element\n    await input.focus();\n    expect(args.blurred).toHaveBeenCalled();\n  }\n}',...InteractionTest.parameters?.docs?.source}}}}}]);