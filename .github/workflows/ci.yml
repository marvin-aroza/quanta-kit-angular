name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm ls || true

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: install
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Restore node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-

    - name: Install dependencies (fallback)
      run: npm ci

    - name: Build application
      run: |
        npm run build
        npm run build-storybook

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x'
      with:
        name: build-artifacts
        path: |
          dist/
          storybook-static/
        retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [install, build]
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Chrome
      uses: browser-actions/setup-chrome@v1

    - name: Restore node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-

    - name: Install dependencies (fallback)
      run: npm ci

    - name: Install additional dependencies for testing
      run: |
        npm install -g http-server wait-on

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Clean dist directory to avoid Jest conflicts
      run: rm -rf dist/

    - name: Run unit tests
      run: |
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
      env:
        CI: true

    - name: Build Storybook for testing
      run: |
        npm run build-storybook
      env:
        CI: true

    - name: Start Storybook server
      run: |
        http-server storybook-static --port 6006 --silent &
        wait-on http://localhost:6006 --timeout 30000
      env:
        CI: true

    - name: Run Storybook tests
      run: |
        npm run test-storybook
      env:
        CI: true
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false