name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm ls || true

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-22-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-22-

  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: install

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Restore node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-22-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-22-

    - name: Install dependencies (fallback)
      run: npm ci

    - name: Run security audit
      run: |
        npm audit
        
    - name: Generate audit report
      run: |
        npm audit --json > audit-report.json || true
        
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-report
        path: audit-report.json
        retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: install

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Restore node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-22-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-22-

    - name: Install dependencies (fallback)
      run: npm ci

    - name: Build application
      run: |
        npm run build
        npm run build-storybook

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          storybook-static/
        retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [install, build, audit]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Install Chrome
      uses: browser-actions/setup-chrome@v1

    - name: Restore node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-22-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-22-

    - name: Install dependencies (fallback)
      run: npm ci

    - name: Install additional dependencies for testing
      run: |
        npm install -g http-server wait-on
        sudo apt-get update && sudo apt-get install -y bc

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Clean dist directory to avoid Jest conflicts
      run: rm -rf dist/

    - name: Run unit tests
      run: |
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
      env:
        CI: true

    - name: Check unit test coverage threshold
      run: |
        # Extract coverage percentages from lcov.info
        if [ -f "coverage/lcov.info" ]; then
          echo "Checking unit test coverage..."
          npx nyc report --reporter=text-summary --temp-dir=coverage
          
          # Check if coverage meets 90% threshold
          LINES_COVERAGE=$(grep -oP 'Lines\s*:\s*\K[0-9.]+(?=%)' coverage/lcov-report/index.html || echo "0")
          FUNCTIONS_COVERAGE=$(grep -oP 'Functions\s*:\s*\K[0-9.]+(?=%)' coverage/lcov-report/index.html || echo "0")
          BRANCHES_COVERAGE=$(grep -oP 'Branches\s*:\s*\K[0-9.]+(?=%)' coverage/lcov-report/index.html || echo "0")
          STATEMENTS_COVERAGE=$(grep -oP 'Statements\s*:\s*\K[0-9.]+(?=%)' coverage/lcov-report/index.html || echo "0")
          
          echo "Coverage Summary:"
          echo "Lines: ${LINES_COVERAGE}%"
          echo "Functions: ${FUNCTIONS_COVERAGE}%"
          echo "Branches: ${BRANCHES_COVERAGE}%"
          echo "Statements: ${STATEMENTS_COVERAGE}%"
          
          # Check if all coverage types meet 90% threshold
          if (( $(echo "$LINES_COVERAGE >= 90" | bc -l) )) && \
             (( $(echo "$FUNCTIONS_COVERAGE >= 90" | bc -l) )) && \
             (( $(echo "$BRANCHES_COVERAGE >= 90" | bc -l) )) && \
             (( $(echo "$STATEMENTS_COVERAGE >= 90" | bc -l) )); then
            echo "✅ All coverage thresholds met (90% minimum)"
          else
            echo "❌ Coverage below 90% threshold:"
            echo "Lines: ${LINES_COVERAGE}% (required: 90%)"
            echo "Functions: ${FUNCTIONS_COVERAGE}% (required: 90%)"
            echo "Branches: ${BRANCHES_COVERAGE}% (required: 90%)"
            echo "Statements: ${STATEMENTS_COVERAGE}% (required: 90%)"
            exit 1
          fi
        else
          echo "❌ No coverage report found"
          exit 1
        fi

    - name: Build Storybook for testing
      run: |
        npm run build-storybook
      env:
        CI: true

    - name: Start Storybook server
      run: |
        http-server storybook-static --port 6006 --silent &
        wait-on http://localhost:6006 --timeout 30000
      env:
        CI: true

    - name: Run Storybook tests
      run: |
        npm run test-storybook
      env:
        CI: true

    - name: Check Storybook test coverage threshold
      run: |
        # Check Storybook coverage if it exists
        if [ -f "coverage/storybook/lcov.info" ]; then
          echo "Checking Storybook test coverage..."
          
          # Extract coverage from Storybook coverage report
          if [ -f "coverage/storybook/lcov-report/index.html" ]; then
            SB_LINES_COVERAGE=$(grep -oP 'Lines\s*:\s*\K[0-9.]+(?=%)' coverage/storybook/lcov-report/index.html || echo "0")
            SB_FUNCTIONS_COVERAGE=$(grep -oP 'Functions\s*:\s*\K[0-9.]+(?=%)' coverage/storybook/lcov-report/index.html || echo "0")
            SB_BRANCHES_COVERAGE=$(grep -oP 'Branches\s*:\s*\K[0-9.]+(?=%)' coverage/storybook/lcov-report/index.html || echo "0")
            SB_STATEMENTS_COVERAGE=$(grep -oP 'Statements\s*:\s*\K[0-9.]+(?=%)' coverage/storybook/lcov-report/index.html || echo "0")
            
            echo "Storybook Coverage Summary:"
            echo "Lines: ${SB_LINES_COVERAGE}%"
            echo "Functions: ${SB_FUNCTIONS_COVERAGE}%"
            echo "Branches: ${SB_BRANCHES_COVERAGE}%"
            echo "Statements: ${SB_STATEMENTS_COVERAGE}%"
            
            # Check if Storybook coverage meets 90% threshold
            if (( $(echo "$SB_LINES_COVERAGE >= 90" | bc -l) )) && \
               (( $(echo "$SB_FUNCTIONS_COVERAGE >= 90" | bc -l) )) && \
               (( $(echo "$SB_BRANCHES_COVERAGE >= 90" | bc -l) )) && \
               (( $(echo "$SB_STATEMENTS_COVERAGE >= 90" | bc -l) )); then
              echo "✅ Storybook coverage thresholds met (90% minimum)"
            else
              echo "❌ Storybook coverage below 90% threshold:"
              echo "Lines: ${SB_LINES_COVERAGE}% (required: 90%)"
              echo "Functions: ${SB_FUNCTIONS_COVERAGE}% (required: 90%)"
              echo "Branches: ${SB_BRANCHES_COVERAGE}% (required: 90%)"
              echo "Statements: ${SB_STATEMENTS_COVERAGE}% (required: 90%)"
              exit 1
            fi
          fi
        else
          echo "⚠️  No Storybook coverage report found, skipping threshold check"
        fi
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/**/lcov.info,./coverage/storybook/lcov.info
        fail_ci_if_error: false
        name: coverage-node-22

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage-reports
        path: |
          coverage/
        retention-days: 7