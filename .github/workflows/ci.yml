name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm ls || true

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-22-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-22-

  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: install

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Restore node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-22-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-22-

    - name: Install dependencies (fallback)
      run: npm ci

    - name: Run security audit
      run: |
        npm audit
        
    - name: Generate audit report
      run: |
        npm audit --json > audit-report.json || true
        
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-report
        path: audit-report.json
        retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: install

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Restore node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-22-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-22-

    - name: Install dependencies (fallback)
      run: npm ci

    - name: Build application
      run: |
        npm run build
        npm run build-storybook

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          storybook-static/
        retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [install, build, audit]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Install Chrome
      uses: browser-actions/setup-chrome@v1

    - name: Restore node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-22-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-22-

    - name: Install dependencies (fallback)
      run: npm ci

    - name: Install additional dependencies for testing
      run: |
        npm install -g http-server wait-on
        sudo apt-get update && sudo apt-get install -y bc

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Clean dist directory to avoid Jest conflicts
      run: rm -rf dist/

    - name: Build Storybook for testing
      run: |
        npm run build-storybook
      env:
        CI: true

    - name: Start Storybook server
      run: |
        http-server storybook-static --port 6006 --silent &
        wait-on http://localhost:6006 --timeout 30000
      env:
        CI: true

    - name: Run Storybook tests
      run: |
        npm run test-storybook
      env:
        CI: true

    - name: Check Storybook test coverage threshold
      run: |
        # Check Storybook coverage if it exists
        if [ -f "coverage/storybook/lcov.info" ]; then
          echo "Checking Storybook test coverage..."
          
          # Extract coverage from Storybook coverage report
          if [ -f "coverage/storybook/lcov-report/index.html" ]; then
            SB_LINES_COVERAGE=$(grep -oP 'Lines\s*:\s*\K[0-9.]+(?=%)' coverage/storybook/lcov-report/index.html || echo "0")
            SB_FUNCTIONS_COVERAGE=$(grep -oP 'Functions\s*:\s*\K[0-9.]+(?=%)' coverage/storybook/lcov-report/index.html || echo "0")
            SB_BRANCHES_COVERAGE=$(grep -oP 'Branches\s*:\s*\K[0-9.]+(?=%)' coverage/storybook/lcov-report/index.html || echo "0")
            SB_STATEMENTS_COVERAGE=$(grep -oP 'Statements\s*:\s*\K[0-9.]+(?=%)' coverage/storybook/lcov-report/index.html || echo "0")
            
            echo "Storybook Coverage Summary:" | tee coverage-storybook-summary.txt
            echo "Lines: ${SB_LINES_COVERAGE}%" | tee -a coverage-storybook-summary.txt
            echo "Functions: ${SB_FUNCTIONS_COVERAGE}%" | tee -a coverage-storybook-summary.txt
            echo "Branches: ${SB_BRANCHES_COVERAGE}%" | tee -a coverage-storybook-summary.txt
            echo "Statements: ${SB_STATEMENTS_COVERAGE}%" | tee -a coverage-storybook-summary.txt
            
            # Check if Storybook coverage meets 90% threshold
            if (( $(echo "$SB_LINES_COVERAGE >= 90" | bc -l) )) && \
               (( $(echo "$SB_FUNCTIONS_COVERAGE >= 90" | bc -l) )) && \
               (( $(echo "$SB_BRANCHES_COVERAGE >= 90" | bc -l) )) && \
               (( $(echo "$SB_STATEMENTS_COVERAGE >= 90" | bc -l) )); then
              echo "✅ Storybook coverage thresholds met (90% minimum)" | tee -a coverage-storybook-summary.txt
              echo "STORYBOOK_COVERAGE_STATUS=✅ PASSED" >> $GITHUB_ENV
            else
              echo "❌ Storybook coverage below 90% threshold:" | tee -a coverage-storybook-summary.txt
              echo "Lines: ${SB_LINES_COVERAGE}% (required: 90%)" | tee -a coverage-storybook-summary.txt
              echo "Functions: ${SB_FUNCTIONS_COVERAGE}% (required: 90%)" | tee -a coverage-storybook-summary.txt
              echo "Branches: ${SB_BRANCHES_COVERAGE}% (required: 90%)" | tee -a coverage-storybook-summary.txt
              echo "Statements: ${SB_STATEMENTS_COVERAGE}% (required: 90%)" | tee -a coverage-storybook-summary.txt
              echo "STORYBOOK_COVERAGE_STATUS=❌ FAILED" >> $GITHUB_ENV
              echo "⚠️ Coverage is below threshold, but continuing pipeline for reporting..."
            fi
            
            # Save coverage values for PR comment
            echo "SB_LINES_COVERAGE=${SB_LINES_COVERAGE}" >> $GITHUB_ENV
            echo "SB_FUNCTIONS_COVERAGE=${SB_FUNCTIONS_COVERAGE}" >> $GITHUB_ENV
            echo "SB_BRANCHES_COVERAGE=${SB_BRANCHES_COVERAGE}" >> $GITHUB_ENV
            echo "SB_STATEMENTS_COVERAGE=${SB_STATEMENTS_COVERAGE}" >> $GITHUB_ENV
          else
            echo "⚠️ No Storybook HTML coverage report found, checking lcov.info directly..."
            # Try to extract basic coverage info from lcov.info
            if [ -f "coverage/storybook/lcov.info" ]; then
              echo "STORYBOOK_COVERAGE_STATUS=⚠️ PARTIAL REPORT" >> $GITHUB_ENV
              echo "SB_LINES_COVERAGE=N/A" >> $GITHUB_ENV
              echo "SB_FUNCTIONS_COVERAGE=N/A" >> $GITHUB_ENV
              echo "SB_BRANCHES_COVERAGE=N/A" >> $GITHUB_ENV
              echo "SB_STATEMENTS_COVERAGE=N/A" >> $GITHUB_ENV
            else
              echo "❌ No coverage files found"
              echo "STORYBOOK_COVERAGE_STATUS=❌ NO REPORT" >> $GITHUB_ENV
              echo "SB_LINES_COVERAGE=0" >> $GITHUB_ENV
              echo "SB_FUNCTIONS_COVERAGE=0" >> $GITHUB_ENV
              echo "SB_BRANCHES_COVERAGE=0" >> $GITHUB_ENV
              echo "SB_STATEMENTS_COVERAGE=0" >> $GITHUB_ENV
            fi
          fi
        else
          echo "⚠️  No Storybook coverage report found, skipping threshold check"
          echo "STORYBOOK_COVERAGE_STATUS=⚠️ NO REPORT" >> $GITHUB_ENV
          echo "SB_LINES_COVERAGE=0" >> $GITHUB_ENV
          echo "SB_FUNCTIONS_COVERAGE=0" >> $GITHUB_ENV
          echo "SB_BRANCHES_COVERAGE=0" >> $GITHUB_ENV
          echo "SB_STATEMENTS_COVERAGE=0" >> $GITHUB_ENV
        fi
        
        echo "Coverage check completed. Status: ${STORYBOOK_COVERAGE_STATUS:-UNKNOWN}"

    - name: Generate Coverage Report for PR
      if: github.event_name == 'pull_request'
      run: |
        # Create comprehensive coverage report for PR comment
        echo "## 📊 Code Coverage Report" > coverage-pr-report.md
        echo "" >> coverage-pr-report.md
        echo "### Storybook Tests Coverage" >> coverage-pr-report.md
        echo "| Metric | Coverage | Status |" >> coverage-pr-report.md
        echo "|--------|----------|--------|" >> coverage-pr-report.md
        
        # Add Storybook coverage rows
        SB_LINES_STATUS="❌"
        SB_FUNCTIONS_STATUS="❌"
        SB_BRANCHES_STATUS="❌"
        SB_STATEMENTS_STATUS="❌"
        
        if (( $(echo "${SB_LINES_COVERAGE:-0} >= 90" | bc -l) )); then SB_LINES_STATUS="✅"; fi
        if (( $(echo "${SB_FUNCTIONS_COVERAGE:-0} >= 90" | bc -l) )); then SB_FUNCTIONS_STATUS="✅"; fi
        if (( $(echo "${SB_BRANCHES_COVERAGE:-0} >= 90" | bc -l) )); then SB_BRANCHES_STATUS="✅"; fi
        if (( $(echo "${SB_STATEMENTS_COVERAGE:-0} >= 90" | bc -l) )); then SB_STATEMENTS_STATUS="✅"; fi
        
        echo "| Lines | ${SB_LINES_COVERAGE:-N/A}% | ${SB_LINES_STATUS} |" >> coverage-pr-report.md
        echo "| Functions | ${SB_FUNCTIONS_COVERAGE:-N/A}% | ${SB_FUNCTIONS_STATUS} |" >> coverage-pr-report.md
        echo "| Branches | ${SB_BRANCHES_COVERAGE:-N/A}% | ${SB_BRANCHES_STATUS} |" >> coverage-pr-report.md
        echo "| Statements | ${SB_STATEMENTS_COVERAGE:-N/A}% | ${SB_STATEMENTS_STATUS} |" >> coverage-pr-report.md
        echo "" >> coverage-pr-report.md
        echo "**Storybook Tests Status:** ${STORYBOOK_COVERAGE_STATUS:-⚠️ NO REPORT}" >> coverage-pr-report.md
        echo "" >> coverage-pr-report.md
        echo "### Summary" >> coverage-pr-report.md
        echo "- **Minimum Required Coverage:** 90%" >> coverage-pr-report.md
        echo "- **Storybook Tests:** ${STORYBOOK_COVERAGE_STATUS:-⚠️ NO REPORT}" >> coverage-pr-report.md
        echo "" >> coverage-pr-report.md
        echo "> 🎯 All coverage metrics must meet the 90% threshold for this PR to be approved." >> coverage-pr-report.md
        
        echo "Generated coverage report:"
        cat coverage-pr-report.md

    - name: Comment Coverage Report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          try {
            // Read the coverage report
            const coverageReport = fs.readFileSync('coverage-pr-report.md', 'utf8');
            
            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('📊 Code Coverage Report')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: coverageReport
              });
              console.log('Updated existing coverage comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageReport
              });
              console.log('Created new coverage comment');
            }
          } catch (error) {
            console.error('Failed to post coverage comment:', error.message);
            // Don't fail the workflow if commenting fails
            console.log('Continuing workflow despite comment failure...');
          }
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/storybook/lcov.info
        fail_ci_if_error: false
        name: storybook-coverage-node-22

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage-reports
        path: |
          coverage/
        retention-days: 7