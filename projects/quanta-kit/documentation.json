{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "AllClassModifiers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-wrap: wrap; gap: 8px; padding: 20px;\">\r\n        <!-- All variants -->\r\n        <qk-chip variant=\"assist\">Assist</qk-chip>\r\n        <qk-chip variant=\"filter\">Filter</qk-chip>\r\n        <qk-chip variant=\"input\">Input</qk-chip>\r\n        <qk-chip variant=\"suggestion\">Suggestion</qk-chip>\r\n        \r\n        <!-- All sizes -->\r\n        <qk-chip size=\"sm\">Small</qk-chip>\r\n        <qk-chip size=\"md\">Medium</qk-chip>\r\n        \r\n        <!-- All elevations -->\r\n        <qk-chip elevation=\"flat\">Flat</qk-chip>\r\n        <qk-chip elevation=\"elevated\">Elevated</qk-chip>\r\n        \r\n        <!-- All state modifiers -->\r\n        <qk-chip [disabled]=\"true\">Disabled</qk-chip>\r\n        <qk-chip [selected]=\"true\">Selected</qk-chip>\r\n        <qk-chip [clickable]=\"true\">Clickable</qk-chip>\r\n        <qk-chip [removable]=\"true\">Removable</qk-chip>\r\n        <qk-chip [hasLeadingIcon]=\"true\">Has Leading Icon</qk-chip>\r\n        <qk-chip [hasTrailingIcon]=\"true\">Has Trailing Icon</qk-chip>\r\n        <qk-chip [hasAvatar]=\"true\">Has Avatar</qk-chip>\r\n        <qk-chip [customClass]=\"'custom-test-class'\">Custom Class</qk-chip>\r\n        \r\n        <!-- Combined modifiers -->\r\n        <qk-chip \r\n          variant=\"filter\" \r\n          size=\"sm\" \r\n          elevation=\"elevated\" \r\n          [selected]=\"true\" \r\n          [hasLeadingIcon]=\"true\"\r\n          [customClass]=\"'combined-test'\">\r\n          Combined\r\n        </qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests all CSS class modifiers for complete styling coverage.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "AllElevations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\r\n        <span style=\"width: 80px; font-weight: 500;\">Flat:</span>\r\n        <qk-chip variant=\"assist\" elevation=\"flat\" ariaLabel=\"Flat assist\">Assist</qk-chip>\r\n        <qk-chip variant=\"filter\" elevation=\"flat\" ariaLabel=\"Flat filter\">Filter</qk-chip>\r\n        <qk-chip variant=\"input\" elevation=\"flat\" ariaLabel=\"Flat input\">Input</qk-chip>\r\n        <qk-chip variant=\"suggestion\" elevation=\"flat\" ariaLabel=\"Flat suggestion\">Suggestion</qk-chip>\r\n      </div>\r\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\r\n        <span style=\"width: 80px; font-weight: 500;\">Elevated:</span>\r\n        <qk-chip variant=\"assist\" elevation=\"elevated\" ariaLabel=\"Elevated assist\">Assist</qk-chip>\r\n        <qk-chip variant=\"filter\" elevation=\"elevated\" ariaLabel=\"Elevated filter\">Filter</qk-chip>\r\n        <qk-chip variant=\"input\" elevation=\"elevated\" ariaLabel=\"Elevated input\">Input</qk-chip>\r\n        <qk-chip variant=\"suggestion\" elevation=\"elevated\" ariaLabel=\"Elevated suggestion\">Suggestion</qk-chip>\r\n      </div>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Chips with flat and elevated styles'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "AllModifiersCombined",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'success',\r\n        size: 'lg',\r\n        fullWidth: true,\r\n        rounded: true,\r\n        loading: true,\r\n        disabled: false,\r\n        customClass: 'test-modifier-class'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [loading]=\"loading\"\r\n      [disabled]=\"disabled\"\r\n      [customClass]=\"customClass\">\r\n      All Modifiers Combined\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests all possible modifier combinations to ensure buttonClasses getter covers all branches.'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "AllRolesCoverage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px;\">\r\n        <!-- Filter chip (checkbox role) -->\r\n        <qk-chip variant=\"filter\">Filter Checkbox</qk-chip>\r\n        \r\n        <!-- Removable chip in list (listitem role) -->\r\n        <ul style=\"list-style: none; padding: 0;\">\r\n          <li>\r\n            <qk-chip [removable]=\"true\" [inList]=\"true\">Removable in List</qk-chip>\r\n          </li>\r\n        </ul>\r\n        \r\n        <!-- Removable chip standalone (presentation role) -->\r\n        <qk-chip [removable]=\"true\">Removable Standalone</qk-chip>\r\n        \r\n        <!-- Clickable chip (button role) -->\r\n        <qk-chip [clickable]=\"true\">Clickable Button</qk-chip>\r\n        \r\n        <!-- Non-clickable chip in list (listitem role) -->\r\n        <ul style=\"list-style: none; padding: 0;\">\r\n          <li>\r\n            <qk-chip [clickable]=\"false\" [inList]=\"true\">Non-clickable in List</qk-chip>\r\n          </li>\r\n        </ul>\r\n        \r\n        <!-- Non-clickable standalone (presentation role) -->\r\n        <qk-chip [clickable]=\"false\">Non-clickable Standalone</qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    \r\n    // Verify different ARIA roles are applied\r\n    const checkbox = canvas.getByRole('checkbox');\r\n    expect(checkbox).toHaveTextContent('Filter Checkbox');\r\n    \r\n    const buttons = canvas.getAllByRole('button');\r\n    expect(buttons.length).toBeGreaterThanOrEqual(1);\r\n    \r\n    const listitems = canvas.getAllByRole('listitem');\r\n    expect(listitems.length).toBeGreaterThanOrEqual(2);\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests all possible ARIA role combinations for comprehensive coverage.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "AllSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    render: () => ({\r\n        template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: flex-start;\">\r\n      <qk-button variant=\"primary\" size=\"xs\">Extra Small</qk-button>\r\n      <qk-button variant=\"primary\" size=\"sm\">Small</qk-button>\r\n      <qk-button variant=\"primary\" size=\"md\">Medium</qk-button>\r\n      <qk-button variant=\"primary\" size=\"lg\">Large</qk-button>\r\n      <qk-button variant=\"primary\" size=\"xl\">Extra Large</qk-button>\r\n    </div>\r\n    `\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Buttons are available in 5 different sizes: xs, sm, md, lg, xl'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "AllSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\r\n        <span style=\"width: 80px; font-weight: 500;\">Small:</span>\r\n        <qk-chip variant=\"assist\" size=\"sm\" ariaLabel=\"Small assist\">Small Chip</qk-chip>\r\n        <qk-chip variant=\"filter\" size=\"sm\" ariaLabel=\"Small filter\">Filter</qk-chip>\r\n        <qk-chip variant=\"input\" size=\"sm\" ariaLabel=\"Small input\">Input</qk-chip>\r\n        <qk-chip variant=\"suggestion\" size=\"sm\" ariaLabel=\"Small suggestion\">Suggestion</qk-chip>\r\n      </div>\r\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\r\n        <span style=\"width: 80px; font-weight: 500;\">Medium:</span>\r\n        <qk-chip variant=\"assist\" size=\"md\" ariaLabel=\"Medium assist\">Medium Chip</qk-chip>\r\n        <qk-chip variant=\"filter\" size=\"md\" ariaLabel=\"Medium filter\">Filter</qk-chip>\r\n        <qk-chip variant=\"input\" size=\"md\" ariaLabel=\"Medium input\">Input</qk-chip>\r\n        <qk-chip variant=\"suggestion\" size=\"md\" ariaLabel=\"Medium suggestion\">Suggestion</qk-chip>\r\n      </div>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Chips in small (24px) and medium (32px) sizes'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "AllVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    render: () => ({\r\n        template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem;\">\r\n      <qk-button variant=\"primary\">Primary</qk-button>\r\n      <qk-button variant=\"secondary\">Secondary</qk-button>\r\n      <qk-button variant=\"success\">Success</qk-button>\r\n      <qk-button variant=\"danger\">Danger</qk-button>\r\n      <qk-button variant=\"warning\">Warning</qk-button>\r\n      <qk-button variant=\"info\">Info</qk-button>\r\n      <qk-button variant=\"light\">Light</qk-button>\r\n      <qk-button variant=\"dark\">Dark</qk-button>\r\n      <qk-button variant=\"outline-primary\">Outline Primary</qk-button>\r\n      <qk-button variant=\"outline-secondary\">Outline Secondary</qk-button>\r\n      <qk-button variant=\"outline-success\">Outline Success</qk-button>\r\n      <qk-button variant=\"outline-danger\">Outline Danger</qk-button>\r\n      <qk-button variant=\"outline-warning\">Outline Warning</qk-button>\r\n      <qk-button variant=\"outline-info\">Outline Info</qk-button>\r\n      <qk-button variant=\"outline-light\">Outline Light</qk-button>\r\n      <qk-button variant=\"outline-dark\">Outline Dark</qk-button>\r\n    </div>\r\n    `\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'All available button variants including solid and outline styles'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "AllVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-wrap: wrap; gap: 12px; align-items: center;\">\r\n      <qk-chip variant=\"assist\" ariaLabel=\"Assist action\">Assist Chip</qk-chip>\r\n      <qk-chip variant=\"filter\" ariaLabel=\"Filter option\">Filter Chip</qk-chip>\r\n      <qk-chip variant=\"input\" ariaLabel=\"Input tag\">Input Chip</qk-chip>\r\n      <qk-chip variant=\"suggestion\" ariaLabel=\"Suggestion option\">Suggestion Chip</qk-chip>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'All four Material UI 3 chip variants'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "AssistChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    size: 'md',\r\n    elevation: 'flat'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\" \r\n      [selected]=\"selected\"\r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      [hasLeadingIcon]=\"hasLeadingIcon\"\r\n      [hasTrailingIcon]=\"hasTrailingIcon\"\r\n      [hasAvatar]=\"hasAvatar\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Assist Chip\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "ChipSet",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 20px;\">\r\n      <div>\r\n        <h4 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Assist Chips</h4>\r\n        <ul role=\"list\" style=\"display: flex; flex-wrap: wrap; gap: 8px; list-style: none; margin: 0; padding: 0;\">\r\n          <li>\r\n            <qk-chip variant=\"assist\" [hasLeadingIcon]=\"true\" [inList]=\"true\">\r\n              <svg slot=\"leading-icon\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zM12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"/>\r\n              </svg>\r\n              Set reminder\r\n            </qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"assist\" [hasLeadingIcon]=\"true\" [inList]=\"true\">\r\n              <svg slot=\"leading-icon\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n              </svg>\r\n              Add to cart\r\n            </qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"assist\" [inList]=\"true\">Get directions</qk-chip>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h4 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Filter Chips</h4>\r\n        <ul role=\"list\" style=\"display: flex; flex-wrap: wrap; gap: 8px; list-style: none; margin: 0; padding: 0;\">\r\n          <li>\r\n            <qk-chip variant=\"filter\" [selected]=\"true\" [inList]=\"true\" ariaLabel=\"Popular filter, currently selected\">Popular</qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"filter\" [inList]=\"true\" ariaLabel=\"Nearby filter\">Nearby</qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"filter\" [inList]=\"true\" ariaLabel=\"Price filter\">Price</qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"filter\" [inList]=\"true\" ariaLabel=\"Rating filter\">Rating</qk-chip>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h4 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Input Chips</h4>\r\n        <ul role=\"list\" style=\"display: flex; flex-wrap: wrap; gap: 8px; list-style: none; margin: 0; padding: 0;\">\r\n          <li>\r\n            <qk-chip variant=\"input\" [hasAvatar]=\"true\" [removable]=\"true\" [inList]=\"true\">\r\n              <span slot=\"avatar\" style=\"font-size: 12px; font-weight: 500;\">JS</span>\r\n              JavaScript\r\n            </qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"input\" [hasAvatar]=\"true\" [removable]=\"true\" [inList]=\"true\">\r\n              <span slot=\"avatar\" style=\"font-size: 12px; font-weight: 500;\">TS</span>\r\n              TypeScript\r\n            </qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"input\" [removable]=\"true\" [inList]=\"true\">Angular</qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"input\" [removable]=\"true\" [inList]=\"true\">React</qk-chip>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h4 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Suggestion Chips</h4>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n          <qk-chip variant=\"suggestion\">Coffee shops</qk-chip>\r\n          <qk-chip variant=\"suggestion\">Restaurants</qk-chip>\r\n          <qk-chip variant=\"suggestion\">Gas stations</qk-chip>\r\n          <qk-chip variant=\"suggestion\">Hotels</qk-chip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Real-world example showing different chip types in context'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "ClickHandlingEdgeCases",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    removable: true,\r\n    clickable: true,\r\n    clicked: fn(),\r\n    removed: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [removable]=\"removable\"\r\n      [clickable]=\"clickable\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\">\r\n      Click Test Chip\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const chip = canvas.getByText('Click Test Chip');\r\n    const removeButton = canvas.getByRole('button', { name: 'Remove chip' });\r\n    \r\n    // Test click on chip content (should work for removable input chips)\r\n    await userEvent.click(chip);\r\n    expect(args.clicked).toHaveBeenCalled();\r\n    \r\n    // Test click on remove button (should only trigger remove)\r\n    await userEvent.click(removeButton);\r\n    expect(args.removed).toHaveBeenCalled();\r\n    \r\n    // Reset call counts by creating new mock functions if needed\r\n    // The component logic handles preventing double events\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests click handling edge cases for removable chips.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "ClickWhenDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        disabled: true\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      (clicked)=\"clicked($event)\">\r\n      Disabled Button (Click Test)\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests that click events are not emitted when button is disabled. The button has pointer-events: none so interactions are prevented.'\r\n            }\r\n        }\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvas.getByRole('button');\r\n\r\n        // Verify the button is disabled (has correct attributes)\r\n        expect(button).toBeDisabled();\r\n        expect(button).toHaveClass('qk-btn--disabled');\r\n    }\r\n}"
            },
            {
                "name": "ClickWhenLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        loading: true\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [loading]=\"loading\"\r\n      (clicked)=\"clicked($event)\">\r\n      Loading Button (Click Test)\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests that click events are not emitted when button is in loading state. The button has pointer-events: none so interactions are prevented.'\r\n            }\r\n        }\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvas.getByRole('button');\r\n\r\n        // Verify the button is disabled due to loading and has loading class\r\n        expect(button).toBeDisabled();\r\n        expect(button).toHaveClass('qk-btn--loading');\r\n\r\n        // Verify spinner is present\r\n        const spinner = canvas.getByRole('button').querySelector('.qk-btn-spinner');\r\n        expect(spinner).toBeInTheDocument();\r\n    }\r\n}"
            },
            {
                "name": "ComplexRoleCombinations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px;\">\r\n        <!-- Test removable + inList combination (line 143) -->\r\n        <ul style=\"list-style: none; padding: 0;\">\r\n          <li>\r\n            <qk-chip [removable]=\"true\" [inList]=\"true\" [clickable]=\"false\">\r\n              Removable InList Non-clickable\r\n            </qk-chip>\r\n          </li>\r\n        </ul>\r\n        \r\n        <!-- Test just inList without removable or clickable (line 150) -->\r\n        <ul style=\"list-style: none; padding: 0;\">\r\n          <li>\r\n            <qk-chip [inList]=\"true\" [clickable]=\"false\" [removable]=\"false\">\r\n              InList Only\r\n            </qk-chip>\r\n          </li>\r\n        </ul>\r\n        \r\n        <!-- Test default presentation role -->\r\n        <qk-chip [clickable]=\"false\" [removable]=\"false\" [inList]=\"false\">\r\n          Default Presentation Role\r\n        </qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    \r\n    // Verify the different role combinations are applied\r\n    const removableInList = canvas.getByText('Removable InList Non-clickable');\r\n    expect(removableInList).toBeInTheDocument();\r\n    \r\n    const inListOnly = canvas.getByText('InList Only');\r\n    expect(inListOnly).toBeInTheDocument();\r\n    \r\n    const defaultRole = canvas.getByText('Default Presentation Role');\r\n    expect(defaultRole).toBeInTheDocument();\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests complex ARIA role combinations for comprehensive branch coverage.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "ComprehensiveShowcase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 24px; padding: 20px;\">\r\n      <div>\r\n        <h3 style=\"margin: 0 0 12px 0; font-size: 16px; font-weight: 600;\">Filter Chips (with selection)</h3>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n          <qk-chip variant=\"filter\" [selected]=\"true\" hasTrailingIcon>\r\n            Selected Filter\r\n            <span slot=\"trailing-icon\">✓</span>\r\n          </qk-chip>\r\n          <qk-chip variant=\"filter\" [selected]=\"false\" hasTrailingIcon>\r\n            Unselected Filter\r\n            <span slot=\"trailing-icon\">▼</span>\r\n          </qk-chip>\r\n        </div>\r\n      </div>\r\n      \r\n      <div>\r\n        <h3 style=\"margin: 0 0 12px 0; font-size: 16px; font-weight: 600;\">Input Chips (removable)</h3>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n          <qk-chip variant=\"input\" [removable]=\"true\" customClass=\"custom-input-chip\">\r\n            Removable Input\r\n          </qk-chip>\r\n          <qk-chip variant=\"input\" [removable]=\"true\" [disabled]=\"true\">\r\n            Disabled Removable\r\n          </qk-chip>\r\n        </div>\r\n      </div>\r\n      \r\n      <div>\r\n        <h3 style=\"margin: 0 0 12px 0; font-size: 16px; font-weight: 600;\">Suggestion Chips (interactive)</h3>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n          <qk-chip variant=\"suggestion\" [clickable]=\"true\" hasLeadingIcon>\r\n            <span slot=\"leading-icon\">🔍</span>\r\n            Clickable Suggestion\r\n          </qk-chip>\r\n          <qk-chip variant=\"suggestion\" [clickable]=\"false\">\r\n            Non-clickable\r\n          </qk-chip>\r\n        </div>\r\n      </div>\r\n      \r\n      <div>\r\n        <h3 style=\"margin: 0 0 12px 0; font-size: 16px; font-weight: 600;\">Assist Chips</h3>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n          <qk-chip variant=\"assist\" hasAvatar ariaLabel=\"User profile chip\">\r\n            <span slot=\"avatar\">👤</span>\r\n            With Avatar\r\n          </qk-chip>\r\n          <qk-chip variant=\"assist\" testId=\"assist-chip-test\">\r\n            Standard Assist\r\n          </qk-chip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Comprehensive showcase of all chip variants, features, and interactive states.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "CustomClassHandling",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        customClass: 'my-custom-class another-custom-class'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [customClass]=\"customClass\">\r\n      Button with Custom Classes\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests custom class handling in the buttonClasses getter.'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'danger',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [square]=\"square\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Danger Button\r\n    </qk-button>`\r\n    })\r\n}"
            },
            {
                "name": "Delete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n     variant: 'delete',\r\n    disabled: false,\r\n    loading: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-button\r\n      [disabled]=\"disabled\"\r\n      [variant]=\"variant\"\r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Delete Button\r\n    </qk-button>`,\r\n  }),\r\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        disabled: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\">\r\n      Disabled Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button in disabled state'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "DisabledAndLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'warning',\r\n        size: 'sm',\r\n        disabled: true,\r\n        loading: true\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      [loading]=\"loading\">\r\n      Disabled + Loading\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests combination of disabled and loading states.'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "DisabledStates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-wrap: wrap; gap: 12px;\">\r\n      <qk-chip variant=\"assist\" [disabled]=\"true\" ariaLabel=\"Disabled assist chip\">Disabled Assist</qk-chip>\r\n      <qk-chip variant=\"filter\" [disabled]=\"true\" ariaLabel=\"Disabled filter chip\">Disabled Filter</qk-chip>\r\n      <qk-chip variant=\"input\" [disabled]=\"true\" [removable]=\"true\" ariaLabel=\"Disabled input chip\">Disabled Input</qk-chip>\r\n      <qk-chip variant=\"suggestion\" [disabled]=\"true\" ariaLabel=\"Disabled suggestion chip\">Disabled Suggestion</qk-chip>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Chips in disabled state'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "DisabledStatesComprehensive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-wrap: wrap; gap: 12px; padding: 20px;\">\r\n        <!-- Disabled clickable chip -->\r\n        <qk-chip [disabled]=\"true\" [clickable]=\"true\">Disabled Clickable</qk-chip>\r\n        \r\n        <!-- Disabled removable chip -->\r\n        <qk-chip [disabled]=\"true\" [removable]=\"true\">Disabled Removable</qk-chip>\r\n        \r\n        <!-- Disabled filter chip -->\r\n        <qk-chip variant=\"filter\" [disabled]=\"true\" [selected]=\"true\">Disabled Selected Filter</qk-chip>\r\n        \r\n        <!-- Non-clickable chip -->\r\n        <qk-chip [clickable]=\"false\">Non-clickable</qk-chip>\r\n        \r\n        <!-- Non-clickable filter chip -->\r\n        <qk-chip variant=\"filter\" [clickable]=\"false\">Non-clickable Filter</qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    \r\n    // Test that disabled chips are present and have disabled styling\r\n    const disabledChips = canvas.getAllByText(/Disabled/);\r\n    expect(disabledChips.length).toBe(3);\r\n    \r\n    // Test non-clickable chips are present\r\n    const nonClickableChips = canvas.getAllByText(/Non-clickable/);\r\n    expect(nonClickableChips.length).toBe(2);\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Comprehensive testing of disabled and non-clickable states.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "ElevationAndBlurTest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    elevation: 'elevated',\r\n    blurred: fn(),\r\n    focused: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [elevation]=\"elevation\"\r\n      (blurred)=\"blurred($event)\"\r\n      (focused)=\"focused($event)\">\r\n      Elevation Test Chip\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const chip = canvas.getByRole('button');\r\n    \r\n    // Test focus and blur events\r\n    chip.focus();\r\n    expect(args.focused).toHaveBeenCalled();\r\n    \r\n    chip.blur();\r\n    expect(args.blurred).toHaveBeenCalled();\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests elevation property and blur event emission.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "EmptyCustomClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        customClass: ''\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [customClass]=\"customClass\">\r\n      Button with Empty Custom Class\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests handling of empty custom class to ensure no empty strings are added to classes.'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "EventHandlers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'filter',\r\n    clickable: true,\r\n    removable: true,\r\n    clicked: fn(),\r\n    removed: fn(),\r\n    focused: fn(),\r\n    blurred: fn(),\r\n    selectionChange: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Event Test Chip\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const chip = canvas.getByText('Event Test Chip');\r\n    const removeButton = canvas.getByRole('button', { name: 'Remove chip' });\r\n    \r\n    // Test click and selection change\r\n    await userEvent.click(chip);\r\n    expect(args.clicked).toHaveBeenCalled();\r\n    expect(args.selectionChange).toHaveBeenCalledWith(true);\r\n    \r\n    // Test remove\r\n    await userEvent.click(removeButton);\r\n    expect(args.removed).toHaveBeenCalled();\r\n    \r\n    // Test focus/blur - focus on the remove button since the chip container is not focusable\r\n    removeButton.focus();\r\n    expect(args.focused).toHaveBeenCalled();\r\n    \r\n    chip.blur();\r\n    expect(args.blurred).toHaveBeenCalled();\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests all event handlers for complete functional coverage.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "FilterChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'filter',\r\n    size: 'md',\r\n    elevation: 'flat',\r\n    selected: false,\r\n    ariaLabel: 'Filter by category'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\" \r\n      [selected]=\"selected\"\r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      [hasLeadingIcon]=\"hasLeadingIcon\"\r\n      [hasTrailingIcon]=\"hasTrailingIcon\"\r\n      [hasAvatar]=\"hasAvatar\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Filter Chip\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "FilterChipInteractive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'filter',\r\n    selected: false\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n      <qk-chip \r\n        variant=\"filter\" \r\n        [selected]=\"false\"\r\n        (selectionChange)=\"selectionChange($event)\">\r\n        Unselected Filter\r\n      </qk-chip>\r\n      <qk-chip \r\n        variant=\"filter\" \r\n        [selected]=\"true\"\r\n        (selectionChange)=\"selectionChange($event)\">\r\n        Selected Filter\r\n      </qk-chip>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Filter chips with unselected and selected states'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "FocusAndBlurEvents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n      <p>This story tests focus and blur events:</p>\r\n      <qk-button \r\n        [variant]=\"variant\" \r\n        [size]=\"size\"\r\n        (clicked)=\"clicked($event)\"\r\n        (focused)=\"focused($event)\"\r\n        (blurred)=\"blurred($event)\">\r\n        Focus/Blur Test Button\r\n      </qk-button>\r\n      <qk-button variant=\"secondary\">Another Button (for tabbing)</qk-button>\r\n    </div>\r\n    `\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Story specifically designed to test focus and blur event handling. The play function will automatically trigger these events for testing coverage.'\r\n            }\r\n        }\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvas.getByText('Focus/Blur Test Button');\r\n\r\n        // Focus the button\r\n        await userEvent.click(button);\r\n        await button.focus();\r\n\r\n        // Blur the button by focusing another element\r\n        const secondButton = canvas.getByText('Another Button (for tabbing)');\r\n        await userEvent.tab();\r\n        await secondButton.focus();\r\n    }\r\n}"
            },
            {
                "name": "FullWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        fullWidth: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [fullWidth]=\"fullWidth\">\r\n      Full Width Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button that takes the full width of its container'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "FullWidthWithCustomClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'dark',\r\n        size: 'xl',\r\n        fullWidth: true,\r\n        customClass: 'test-full-width-custom'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [customClass]=\"customClass\">\r\n      Full Width + Custom Class\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests full width with custom class combination.'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "IconOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        ariaLabel: 'Delete item'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      style=\"padding: 0.625rem;\">\r\n      <svg width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\r\n      </svg>\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with only an icon, useful for actions like delete, close, etc. Make sure to provide an aria-label for accessibility.'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "InputChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    size: 'md',\r\n    elevation: 'flat'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\" \r\n      [selected]=\"selected\"\r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      [hasLeadingIcon]=\"hasLeadingIcon\"\r\n      [hasTrailingIcon]=\"hasTrailingIcon\"\r\n      [hasAvatar]=\"hasAvatar\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Input Chip\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "InteractionTest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n      <qk-button \r\n        [variant]=\"variant\" \r\n        [size]=\"size\"\r\n        (clicked)=\"clicked($event)\"\r\n        (focused)=\"focused($event)\"\r\n        (blurred)=\"blurred($event)\">\r\n        Interactive Test Button\r\n      </qk-button>\r\n      <input type=\"text\" placeholder=\"Focus target\" />\r\n    </div>\r\n    `\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Comprehensive interaction test that exercises all event handlers.'\r\n            }\r\n        }\r\n    },\r\n    play: async ({ canvasElement, args }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvas.getByText('Interactive Test Button');\r\n        const input = canvas.getByPlaceholderText('Focus target');\r\n\r\n        // Test successful click\r\n        await userEvent.click(button);\r\n        expect(args.clicked).toHaveBeenCalled();\r\n\r\n        // Test focus\r\n        await button.focus();\r\n        expect(args.focused).toHaveBeenCalled();\r\n\r\n        // Test blur by focusing another element\r\n        await input.focus();\r\n        expect(args.blurred).toHaveBeenCalled();\r\n    }\r\n}"
            },
            {
                "name": "InteractiveStates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    render: () => ({\r\n        template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: flex-start; max-width: 300px;\">\r\n      <qk-button variant=\"primary\">Normal State</qk-button>\r\n      <qk-button variant=\"primary\" [disabled]=\"true\">Disabled State</qk-button>\r\n      <qk-button variant=\"primary\" [loading]=\"true\">Loading State</qk-button>\r\n      <qk-button variant=\"primary\" [loading]=\"true\" [hideTextOnLoading]=\"true\">Loading (Hidden Text)</qk-button>\r\n    </div>\r\n    `\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Different interactive states of the button component'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "KeyboardNavigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    clickable: true,\r\n    ariaLabel: 'Keyboard test chip',\r\n    clicked: fn(),\r\n    focused: fn(),\r\n    blurred: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [clickable]=\"clickable\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Keyboard Test\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const chip = canvas.getByRole('button');\r\n    \r\n    // Test focus\r\n    chip.focus();\r\n    expect(args.focused).toHaveBeenCalled();\r\n    \r\n    // Test keyboard interaction\r\n    await userEvent.keyboard('{Enter}');\r\n    expect(args.clicked).toHaveBeenCalled();\r\n    \r\n    await userEvent.keyboard(' ');\r\n    expect(args.clicked).toHaveBeenCalledTimes(2);\r\n    \r\n    // Test blur\r\n    chip.blur();\r\n    expect(args.blurred).toHaveBeenCalled();\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests keyboard navigation and event handling for accessibility compliance.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        loading: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\">\r\n      Loading Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button in loading state with spinner animation'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "LoadingHideText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        loading: true,\r\n        hideTextOnLoading: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\">\r\n      Processing...\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button in loading state with hidden text content'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n    title: 'Components/Button',\r\n    component: ButtonComponent,\r\n    tags: ['autodocs'],\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [ButtonComponent],\r\n        }),\r\n    ],\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                component: `\r\nThe Button component is a versatile UI element that supports various styles, sizes, and states.\r\nIt provides comprehensive functionality including loading states, accessibility features, and customization options.\r\n\r\n## Features\r\n- Multiple variants (primary, secondary, success, danger, warning, info, light, dark, and outline versions)\r\n- Various sizes (xs, sm, md, lg, xl)\r\n- Loading state with spinner\r\n- Disabled state\r\n- Full width option\r\n- Rounded and square variations\r\n- Accessibility support with ARIA attributes\r\n- Event emissions for click, focus, and blur\r\n- Icon slot support (left and right)\r\n- Keyboard navigation support\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<qk-button variant=\"primary\" size=\"md\" (clicked)=\"handleClick($event)\">\r\n  Click me\r\n</qk-button>\r\n\\`\\`\\`\r\n\r\n## With Icons\r\n\\`\\`\\`html\r\n<qk-button variant=\"primary\">\r\n  <svg slot=\"icon-left\" width=\"16\" height=\"16\">...</svg>\r\n  Save Changes\r\n  <svg slot=\"icon-right\" width=\"16\" height=\"16\">...</svg>\r\n</qk-button>\r\n\\`\\`\\`\r\n        `\r\n            }\r\n        }\r\n    },\r\n    argTypes: {\r\n        variant: {\r\n            control: 'select',\r\n            options: [\r\n                'primary',\r\n                'secondary',\r\n                'success',\r\n                'danger',\r\n                'warning',\r\n                'info',\r\n                'light',\r\n                'dark',\r\n                'outline-primary',\r\n                'outline-secondary',\r\n                'outline-success',\r\n                'outline-danger',\r\n                'outline-warning',\r\n                'outline-info',\r\n                'outline-light',\r\n                'outline-dark'\r\n            ] as ButtonVariant[],\r\n            description: 'The visual style variant of the button'\r\n        },\r\n        size: {\r\n            control: 'select',\r\n            options: ['xs', 'sm', 'md', 'lg', 'xl'] as ButtonSize[],\r\n            description: 'The size of the button'\r\n        },\r\n        type: {\r\n            control: 'select',\r\n            options: ['button', 'submit', 'reset'] as ButtonType[],\r\n            description: 'The HTML type attribute of the button'\r\n        },\r\n        disabled: {\r\n            control: 'boolean',\r\n            description: 'Whether the button is disabled'\r\n        },\r\n        loading: {\r\n            control: 'boolean',\r\n            description: 'Whether the button is in loading state'\r\n        },\r\n        hideTextOnLoading: {\r\n            control: 'boolean',\r\n            description: 'Whether to hide text content when loading'\r\n        },\r\n        fullWidth: {\r\n            control: 'boolean',\r\n            description: 'Whether the button should take full width'\r\n        },\r\n        rounded: {\r\n            control: 'boolean',\r\n            description: 'Whether the button has rounded corners'\r\n        },\r\n        square: {\r\n            control: 'boolean',\r\n            description: 'Whether the button has no border radius'\r\n        },\r\n        customClass: {\r\n            control: 'text',\r\n            description: 'Custom CSS classes to apply'\r\n        },\r\n        ariaLabel: {\r\n            control: 'text',\r\n            description: 'ARIA label for accessibility'\r\n        },\r\n        testId: {\r\n            control: 'text',\r\n            description: 'Test ID for testing purposes'\r\n        },\r\n        clicked: {\r\n            action: 'clicked',\r\n            description: 'Event emitted when button is clicked'\r\n        },\r\n        focused: {\r\n            action: 'focused',\r\n            description: 'Event emitted when button receives focus'\r\n        },\r\n        blurred: {\r\n            action: 'blurred',\r\n            description: 'Event emitted when button loses focus'\r\n        }\r\n    },\r\n    args: {\r\n        clicked: fn(),\r\n        focused: fn(),\r\n        blurred: fn()\r\n    }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ChipComponent>",
                "defaultValue": "{\r\n  title: 'Components/Chip',\r\n  component: ChipComponent,\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe Chip component follows Material UI 3 design guidelines and provides versatile functionality for representing input, attributes, or actions.\r\n\r\n## Features\r\n- **4 Variants**: assist, filter, input, suggestion following Material UI 3 specifications\r\n- **2 Sizes**: sm (24px), md (32px)\r\n- **2 Elevations**: flat, elevated\r\n- **Interactive States**: clickable, selectable, removable\r\n- **Icon Support**: leading icons, trailing icons, avatars\r\n- **Accessibility**: ARIA attributes, keyboard navigation\r\n- **Events**: click, remove, focus, blur, selection change\r\n\r\n## Chip Types (Material UI 3)\r\n- **Assist Chips**: Help users take actions or see information\r\n- **Filter Chips**: Let users select from a set of options\r\n- **Input Chips**: Represent discrete pieces of information\r\n- **Suggestion Chips**: Present dynamically generated suggestions\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<qk-chip variant=\"assist\" size=\"md\" [clickable]=\"true\">\r\n  Assist Chip\r\n</qk-chip>\r\n\\`\\`\\`\r\n\r\n## With Icons\r\n\\`\\`\\`html\r\n<qk-chip variant=\"filter\" [hasLeadingIcon]=\"true\">\r\n  <svg slot=\"leading-icon\" width=\"18\" height=\"18\">...</svg>\r\n  Filter with Icon\r\n</qk-chip>\r\n\\`\\`\\`\r\n\r\n## Removable Input Chip\r\n\\`\\`\\`html\r\n<qk-chip variant=\"input\" [removable]=\"true\" (removed)=\"onRemove($event)\">\r\n  Removable Input\r\n</qk-chip>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['assist', 'filter', 'input', 'suggestion'] as ChipVariant[],\r\n      description: 'The Material UI 3 chip variant'\r\n    },\r\n    size: {\r\n      control: 'select',\r\n      options: ['sm', 'md'] as ChipSize[],\r\n      description: 'The size of the chip'\r\n    },\r\n    elevation: {\r\n      control: 'select',\r\n      options: ['flat', 'elevated'] as ChipElevation[],\r\n      description: 'The elevation style of the chip'\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip is disabled'\r\n    },\r\n    selected: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip is selected (for filter chips)'\r\n    },\r\n    clickable: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip is clickable'\r\n    },\r\n    removable: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip can be removed'\r\n    },\r\n    hasLeadingIcon: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has a leading icon'\r\n    },\r\n    hasTrailingIcon: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has a trailing icon'\r\n    },\r\n    hasAvatar: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has an avatar'\r\n    },\r\n    customClass: {\r\n      control: 'text',\r\n      description: 'Custom CSS classes to apply'\r\n    },\r\n    ariaLabel: {\r\n      control: 'text',\r\n      description: 'ARIA label for accessibility'\r\n    },\r\n    removeAriaLabel: {\r\n      control: 'text',\r\n      description: 'ARIA label for remove button'\r\n    },\r\n    testId: {\r\n      control: 'text',\r\n      description: 'Test ID for testing purposes'\r\n    },\r\n    clicked: {\r\n      action: 'clicked',\r\n      description: 'Event emitted when chip is clicked'\r\n    },\r\n    removed: {\r\n      action: 'removed',\r\n      description: 'Event emitted when chip is removed'\r\n    },\r\n    focused: {\r\n      action: 'focused',\r\n      description: 'Event emitted when chip receives focus'\r\n    },\r\n    blurred: {\r\n      action: 'blurred',\r\n      description: 'Event emitted when chip loses focus'\r\n    },\r\n    selectionChange: {\r\n      action: 'selectionChange',\r\n      description: 'Event emitted when chip selection changes'\r\n    }\r\n  },\r\n  args: {\r\n    selected: false,\r\n    ariaLabel: 'Chip action',\r\n    clicked: fn(),\r\n    removed: fn(),\r\n    focused: fn(),\r\n    blurred: fn(),\r\n    selectionChange: fn()\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n  title: 'Components/Buttongroup',\r\n  component: ButtonComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ButtonComponent],\r\n    }),\r\n  ],\r\n  args: {\r\n    disabled: false,\r\n    loading: false,\r\n    hideTextOnLoading: false,\r\n    ariaLabel: '',\r\n    testId: '',\r\n    clicked: fn(),\r\n    focused: fn(),\r\n    blurred: fn(),\r\n  },\r\n}"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        disabled: false,\r\n        loading: false,\r\n        hideTextOnLoading: false,\r\n        fullWidth: false,\r\n        rounded: false,\r\n        square: false,\r\n        type: 'button',\r\n        customClass: '',\r\n        ariaLabel: '',\r\n        testId: 'button-playground'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [type]=\"type\"\r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [square]=\"square\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Playground Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Interactive playground to experiment with all button properties and see real-time changes.'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    controls: {\r\n      matchers: {\r\n       color: /(background|color)$/i,\r\n       date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [square]=\"square\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Primary Button\r\n    </qk-button>`\r\n    })\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n     variant: 'primary',\r\n    disabled: false,\r\n    loading: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-button\r\n      [disabled]=\"disabled\"\r\n      [variant]=\"variant\"\r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Primary Button\r\n    </qk-button>`,\r\n  }),\r\n}"
            },
            {
                "name": "PropertyEdgeCases",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-wrap: wrap; gap: 12px; padding: 20px;\">\r\n        <!-- Empty custom class -->\r\n        <qk-chip [customClass]=\"''\">Empty Custom Class</qk-chip>\r\n        \r\n        <!-- Empty aria label -->\r\n        <qk-chip [ariaLabel]=\"''\">Empty ARIA Label</qk-chip>\r\n        \r\n        <!-- Empty remove aria label -->\r\n        <qk-chip [removable]=\"true\" [removeAriaLabel]=\"''\">Empty Remove ARIA</qk-chip>\r\n        \r\n        <!-- Custom remove aria label -->\r\n        <qk-chip [removable]=\"true\" [removeAriaLabel]=\"'Custom remove text'\">\r\n          Custom Remove ARIA\r\n        </qk-chip>\r\n        \r\n        <!-- Test ID -->\r\n        <qk-chip [testId]=\"'test-chip-id'\">Test ID Chip</qk-chip>\r\n        \r\n        <!-- Removable filter chip (special case) -->\r\n        <qk-chip variant=\"filter\" [removable]=\"true\" [clickable]=\"true\">\r\n          Removable Filter\r\n        </qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    \r\n    // Test custom remove ARIA label\r\n    const customRemoveButton = canvas.getByRole('button', { name: 'Custom remove text' });\r\n    expect(customRemoveButton).toBeInTheDocument();\r\n    \r\n    // Test default remove ARIA label (only one exists now)\r\n    const defaultRemoveButtons = canvas.getAllByRole('button', { name: 'Remove chip' });\r\n    expect(defaultRemoveButtons.length).toBeGreaterThanOrEqual(1);\r\n    \r\n    // Test removable filter chip behavior\r\n    const removableFilter = canvas.getByText('Removable Filter');\r\n    await userEvent.click(removableFilter);\r\n    // Should handle both filter and removable functionality\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests edge cases and property combinations for comprehensive coverage.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "PropertyInitializationTest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'filter',\r\n    size: 'sm',\r\n    elevation: 'flat',\r\n    disabled: true,\r\n    selected: true,\r\n    clickable: false,\r\n    removable: true,\r\n    hasLeadingIcon: true,\r\n    hasTrailingIcon: true,\r\n    hasAvatar: true,\r\n    customClass: 'test-class',\r\n    ariaLabel: 'Test aria',\r\n    ariaPressed: true,\r\n    removeAriaLabel: 'Remove test',\r\n    testId: 'test-id',\r\n    inList: true,\r\n    blurred: fn(),\r\n    focused: fn(),\r\n    clicked: fn(),\r\n    removed: fn(),\r\n    selectionChange: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\"\r\n      [size]=\"size\"\r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\"\r\n      [selected]=\"selected\"\r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      [hasLeadingIcon]=\"hasLeadingIcon\"\r\n      [hasTrailingIcon]=\"hasTrailingIcon\"\r\n      [hasAvatar]=\"hasAvatar\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [ariaPressed]=\"ariaPressed\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      [testId]=\"testId\"\r\n      [inList]=\"inList\"\r\n      (blurred)=\"blurred($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Property Test Chip\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const chip = canvas.getByText('Property Test Chip');\r\n    const removeButton = canvas.getByRole('button', { name: 'Remove test' });\r\n    \r\n    // Since the chip is disabled, the remove button is also disabled and can't receive focus\r\n    // We'll just verify the component renders correctly with all the properties\r\n    // The focus/blur events can't be tested with disabled elements\r\n    \r\n    // Verify the chip has the expected properties reflected in the DOM\r\n    const chipElement = canvas.getByText('Property Test Chip').closest('.qk-chip');\r\n    expect(chipElement).toHaveClass('qk-chip--disabled');\r\n    expect(chipElement).toHaveClass('qk-chip--selected');\r\n    expect(chipElement).toHaveClass('qk-chip--filter');\r\n    expect(chipElement).toHaveClass('qk-chip--sm');\r\n    expect(chipElement).toHaveClass('test-class');\r\n    \r\n    // Note: focus/blur events are not tested here because the element is disabled\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests all property initializations and event handler setup.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "RemovableChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    removable: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [removable]=\"removable\"\r\n      (removed)=\"removed($event)\">\r\n      Removable Chip\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "RemovableChipKeyboard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    removable: true,\r\n    removeAriaLabel: 'Custom remove label',\r\n    removed: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [removable]=\"removable\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      (removed)=\"removed($event)\">\r\n      Removable Input\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const removeButton = canvas.getByRole('button', { name: 'Custom remove label' });\r\n    \r\n    // Test keyboard removal with Enter\r\n    removeButton.focus();\r\n    await userEvent.keyboard('{Enter}');\r\n    expect(args.removed).toHaveBeenCalled();\r\n    \r\n    // Test keyboard removal with Space\r\n    await userEvent.keyboard(' ');\r\n    expect(args.removed).toHaveBeenCalledTimes(2);\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests keyboard removal functionality for input chips.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "RemovableWithCustomIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    removable: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [removable]=\"removable\"\r\n      (removed)=\"removed($event)\">\r\n      Custom Remove Icon\r\n      <svg remove-icon width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"/>\r\n      </svg>\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "Rounded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        rounded: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [rounded]=\"rounded\">\r\n      Rounded Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with fully rounded corners'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'secondary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [square]=\"square\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Secondary Button\r\n    </qk-button>`\r\n    })\r\n}"
            },
            {
                "name": "Square",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        square: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [square]=\"square\">\r\n      Square Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with no border radius (square corners)'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "SquareModifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'info',\r\n        size: 'md',\r\n        square: true\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [square]=\"square\">\r\n      Square Button Test\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests the square modifier to ensure it adds the correct CSS class.'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'success',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [square]=\"square\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Success Button\r\n    </qk-button>`\r\n    })\r\n}"
            },
            {
                "name": "SuggestionChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'suggestion',\r\n    size: 'md',\r\n    elevation: 'flat'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\" \r\n      [selected]=\"selected\"\r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      [hasLeadingIcon]=\"hasLeadingIcon\"\r\n      [hasTrailingIcon]=\"hasTrailingIcon\"\r\n      [hasAvatar]=\"hasAvatar\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Suggestion Chip\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "TabIndexCoverage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-wrap: wrap; gap: 12px; padding: 20px;\">\r\n        <!-- Disabled chip (tabindex -1) -->\r\n        <qk-chip [disabled]=\"true\">Disabled</qk-chip>\r\n        \r\n        <!-- Filter chip (tabindex 0) -->\r\n        <qk-chip variant=\"filter\">Filter</qk-chip>\r\n        \r\n        <!-- Filter chip removable (tabindex 0) -->\r\n        <qk-chip variant=\"filter\" [removable]=\"true\">Filter Removable</qk-chip>\r\n        \r\n        <!-- Non-filter removable (tabindex -1) -->\r\n        <qk-chip variant=\"input\" [removable]=\"true\">Input Removable</qk-chip>\r\n        \r\n        <!-- Clickable non-filter (tabindex 0) -->\r\n        <qk-chip variant=\"assist\" [clickable]=\"true\">Clickable Assist</qk-chip>\r\n        \r\n        <!-- Non-clickable non-filter (tabindex -1) -->\r\n        <qk-chip variant=\"suggestion\" [clickable]=\"false\">Non-clickable</qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    \r\n    // Test that chips are rendered correctly with different focusability\r\n    const filterChip = canvas.getByText('Filter');\r\n    expect(filterChip).toBeInTheDocument();\r\n    \r\n    const disabledChip = canvas.getByText('Disabled');\r\n    expect(disabledChip).toBeInTheDocument();\r\n    \r\n    const clickableChip = canvas.getByText('Clickable Assist');\r\n    expect(clickableChip).toBeInTheDocument();\r\n    \r\n    const nonClickableChip = canvas.getByText('Non-clickable');\r\n    expect(nonClickableChip).toBeInTheDocument();\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests all tabindex calculation scenarios for keyboard navigation.'\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "WithAvatar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    hasAvatar: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [hasAvatar]=\"hasAvatar\">\r\n      <img avatar src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face\" alt=\"User\" style=\"width: 100%; height: 100%; object-fit: cover;\">\r\n      John Doe\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "WithAvatarInitials",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    hasAvatar: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [hasAvatar]=\"hasAvatar\">\r\n      <span avatar style=\"font-size: 12px; font-weight: 500;\">JD</span>\r\n      John Doe\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "WithBothIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\">\r\n      <svg slot=\"icon-left\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\r\n      </svg>\r\n      Save Changes\r\n      <svg slot=\"icon-right\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"/>\r\n      </svg>\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with icons on both left and right sides'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "WithLeadingIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    hasLeadingIcon: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [hasLeadingIcon]=\"hasLeadingIcon\">\r\n      <svg leading-icon width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n      </svg>\r\n      With Leading Icon\r\n    </qk-chip>`\r\n  })\r\n}"
            },
            {
                "name": "WithLeftIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\">\r\n      <svg slot=\"icon-left\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\r\n      </svg>\r\n      Add Item\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with an icon on the left side'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "WithRightIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\">\r\n      Continue\r\n      <svg slot=\"icon-right\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/>\r\n      </svg>\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with an icon on the right side'\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "WithTrailingIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    hasTrailingIcon: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [hasTrailingIcon]=\"hasTrailingIcon\">\r\n      With Trailing Icon\r\n      <svg trailing-icon width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/>\r\n      </svg>\r\n    </qk-chip>`\r\n  })\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ChipComponent>",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/quanta-kit/src/lib/Chip/chip.stories.ts": [
                {
                    "name": "AllClassModifiers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-wrap: wrap; gap: 8px; padding: 20px;\">\r\n        <!-- All variants -->\r\n        <qk-chip variant=\"assist\">Assist</qk-chip>\r\n        <qk-chip variant=\"filter\">Filter</qk-chip>\r\n        <qk-chip variant=\"input\">Input</qk-chip>\r\n        <qk-chip variant=\"suggestion\">Suggestion</qk-chip>\r\n        \r\n        <!-- All sizes -->\r\n        <qk-chip size=\"sm\">Small</qk-chip>\r\n        <qk-chip size=\"md\">Medium</qk-chip>\r\n        \r\n        <!-- All elevations -->\r\n        <qk-chip elevation=\"flat\">Flat</qk-chip>\r\n        <qk-chip elevation=\"elevated\">Elevated</qk-chip>\r\n        \r\n        <!-- All state modifiers -->\r\n        <qk-chip [disabled]=\"true\">Disabled</qk-chip>\r\n        <qk-chip [selected]=\"true\">Selected</qk-chip>\r\n        <qk-chip [clickable]=\"true\">Clickable</qk-chip>\r\n        <qk-chip [removable]=\"true\">Removable</qk-chip>\r\n        <qk-chip [hasLeadingIcon]=\"true\">Has Leading Icon</qk-chip>\r\n        <qk-chip [hasTrailingIcon]=\"true\">Has Trailing Icon</qk-chip>\r\n        <qk-chip [hasAvatar]=\"true\">Has Avatar</qk-chip>\r\n        <qk-chip [customClass]=\"'custom-test-class'\">Custom Class</qk-chip>\r\n        \r\n        <!-- Combined modifiers -->\r\n        <qk-chip \r\n          variant=\"filter\" \r\n          size=\"sm\" \r\n          elevation=\"elevated\" \r\n          [selected]=\"true\" \r\n          [hasLeadingIcon]=\"true\"\r\n          [customClass]=\"'combined-test'\">\r\n          Combined\r\n        </qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests all CSS class modifiers for complete styling coverage.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "AllElevations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\r\n        <span style=\"width: 80px; font-weight: 500;\">Flat:</span>\r\n        <qk-chip variant=\"assist\" elevation=\"flat\" ariaLabel=\"Flat assist\">Assist</qk-chip>\r\n        <qk-chip variant=\"filter\" elevation=\"flat\" ariaLabel=\"Flat filter\">Filter</qk-chip>\r\n        <qk-chip variant=\"input\" elevation=\"flat\" ariaLabel=\"Flat input\">Input</qk-chip>\r\n        <qk-chip variant=\"suggestion\" elevation=\"flat\" ariaLabel=\"Flat suggestion\">Suggestion</qk-chip>\r\n      </div>\r\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\r\n        <span style=\"width: 80px; font-weight: 500;\">Elevated:</span>\r\n        <qk-chip variant=\"assist\" elevation=\"elevated\" ariaLabel=\"Elevated assist\">Assist</qk-chip>\r\n        <qk-chip variant=\"filter\" elevation=\"elevated\" ariaLabel=\"Elevated filter\">Filter</qk-chip>\r\n        <qk-chip variant=\"input\" elevation=\"elevated\" ariaLabel=\"Elevated input\">Input</qk-chip>\r\n        <qk-chip variant=\"suggestion\" elevation=\"elevated\" ariaLabel=\"Elevated suggestion\">Suggestion</qk-chip>\r\n      </div>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Chips with flat and elevated styles'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "AllRolesCoverage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px;\">\r\n        <!-- Filter chip (checkbox role) -->\r\n        <qk-chip variant=\"filter\">Filter Checkbox</qk-chip>\r\n        \r\n        <!-- Removable chip in list (listitem role) -->\r\n        <ul style=\"list-style: none; padding: 0;\">\r\n          <li>\r\n            <qk-chip [removable]=\"true\" [inList]=\"true\">Removable in List</qk-chip>\r\n          </li>\r\n        </ul>\r\n        \r\n        <!-- Removable chip standalone (presentation role) -->\r\n        <qk-chip [removable]=\"true\">Removable Standalone</qk-chip>\r\n        \r\n        <!-- Clickable chip (button role) -->\r\n        <qk-chip [clickable]=\"true\">Clickable Button</qk-chip>\r\n        \r\n        <!-- Non-clickable chip in list (listitem role) -->\r\n        <ul style=\"list-style: none; padding: 0;\">\r\n          <li>\r\n            <qk-chip [clickable]=\"false\" [inList]=\"true\">Non-clickable in List</qk-chip>\r\n          </li>\r\n        </ul>\r\n        \r\n        <!-- Non-clickable standalone (presentation role) -->\r\n        <qk-chip [clickable]=\"false\">Non-clickable Standalone</qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    \r\n    // Verify different ARIA roles are applied\r\n    const checkbox = canvas.getByRole('checkbox');\r\n    expect(checkbox).toHaveTextContent('Filter Checkbox');\r\n    \r\n    const buttons = canvas.getAllByRole('button');\r\n    expect(buttons.length).toBeGreaterThanOrEqual(1);\r\n    \r\n    const listitems = canvas.getAllByRole('listitem');\r\n    expect(listitems.length).toBeGreaterThanOrEqual(2);\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests all possible ARIA role combinations for comprehensive coverage.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "AllSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\r\n        <span style=\"width: 80px; font-weight: 500;\">Small:</span>\r\n        <qk-chip variant=\"assist\" size=\"sm\" ariaLabel=\"Small assist\">Small Chip</qk-chip>\r\n        <qk-chip variant=\"filter\" size=\"sm\" ariaLabel=\"Small filter\">Filter</qk-chip>\r\n        <qk-chip variant=\"input\" size=\"sm\" ariaLabel=\"Small input\">Input</qk-chip>\r\n        <qk-chip variant=\"suggestion\" size=\"sm\" ariaLabel=\"Small suggestion\">Suggestion</qk-chip>\r\n      </div>\r\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\r\n        <span style=\"width: 80px; font-weight: 500;\">Medium:</span>\r\n        <qk-chip variant=\"assist\" size=\"md\" ariaLabel=\"Medium assist\">Medium Chip</qk-chip>\r\n        <qk-chip variant=\"filter\" size=\"md\" ariaLabel=\"Medium filter\">Filter</qk-chip>\r\n        <qk-chip variant=\"input\" size=\"md\" ariaLabel=\"Medium input\">Input</qk-chip>\r\n        <qk-chip variant=\"suggestion\" size=\"md\" ariaLabel=\"Medium suggestion\">Suggestion</qk-chip>\r\n      </div>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Chips in small (24px) and medium (32px) sizes'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "AllVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-wrap: wrap; gap: 12px; align-items: center;\">\r\n      <qk-chip variant=\"assist\" ariaLabel=\"Assist action\">Assist Chip</qk-chip>\r\n      <qk-chip variant=\"filter\" ariaLabel=\"Filter option\">Filter Chip</qk-chip>\r\n      <qk-chip variant=\"input\" ariaLabel=\"Input tag\">Input Chip</qk-chip>\r\n      <qk-chip variant=\"suggestion\" ariaLabel=\"Suggestion option\">Suggestion Chip</qk-chip>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'All four Material UI 3 chip variants'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "AssistChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    size: 'md',\r\n    elevation: 'flat'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\" \r\n      [selected]=\"selected\"\r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      [hasLeadingIcon]=\"hasLeadingIcon\"\r\n      [hasTrailingIcon]=\"hasTrailingIcon\"\r\n      [hasAvatar]=\"hasAvatar\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Assist Chip\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "ChipSet",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 20px;\">\r\n      <div>\r\n        <h4 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Assist Chips</h4>\r\n        <ul role=\"list\" style=\"display: flex; flex-wrap: wrap; gap: 8px; list-style: none; margin: 0; padding: 0;\">\r\n          <li>\r\n            <qk-chip variant=\"assist\" [hasLeadingIcon]=\"true\" [inList]=\"true\">\r\n              <svg slot=\"leading-icon\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zM12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"/>\r\n              </svg>\r\n              Set reminder\r\n            </qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"assist\" [hasLeadingIcon]=\"true\" [inList]=\"true\">\r\n              <svg slot=\"leading-icon\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n              </svg>\r\n              Add to cart\r\n            </qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"assist\" [inList]=\"true\">Get directions</qk-chip>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h4 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Filter Chips</h4>\r\n        <ul role=\"list\" style=\"display: flex; flex-wrap: wrap; gap: 8px; list-style: none; margin: 0; padding: 0;\">\r\n          <li>\r\n            <qk-chip variant=\"filter\" [selected]=\"true\" [inList]=\"true\" ariaLabel=\"Popular filter, currently selected\">Popular</qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"filter\" [inList]=\"true\" ariaLabel=\"Nearby filter\">Nearby</qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"filter\" [inList]=\"true\" ariaLabel=\"Price filter\">Price</qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"filter\" [inList]=\"true\" ariaLabel=\"Rating filter\">Rating</qk-chip>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h4 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Input Chips</h4>\r\n        <ul role=\"list\" style=\"display: flex; flex-wrap: wrap; gap: 8px; list-style: none; margin: 0; padding: 0;\">\r\n          <li>\r\n            <qk-chip variant=\"input\" [hasAvatar]=\"true\" [removable]=\"true\" [inList]=\"true\">\r\n              <span slot=\"avatar\" style=\"font-size: 12px; font-weight: 500;\">JS</span>\r\n              JavaScript\r\n            </qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"input\" [hasAvatar]=\"true\" [removable]=\"true\" [inList]=\"true\">\r\n              <span slot=\"avatar\" style=\"font-size: 12px; font-weight: 500;\">TS</span>\r\n              TypeScript\r\n            </qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"input\" [removable]=\"true\" [inList]=\"true\">Angular</qk-chip>\r\n          </li>\r\n          <li>\r\n            <qk-chip variant=\"input\" [removable]=\"true\" [inList]=\"true\">React</qk-chip>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h4 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Suggestion Chips</h4>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n          <qk-chip variant=\"suggestion\">Coffee shops</qk-chip>\r\n          <qk-chip variant=\"suggestion\">Restaurants</qk-chip>\r\n          <qk-chip variant=\"suggestion\">Gas stations</qk-chip>\r\n          <qk-chip variant=\"suggestion\">Hotels</qk-chip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Real-world example showing different chip types in context'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "ClickHandlingEdgeCases",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    removable: true,\r\n    clickable: true,\r\n    clicked: fn(),\r\n    removed: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [removable]=\"removable\"\r\n      [clickable]=\"clickable\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\">\r\n      Click Test Chip\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const chip = canvas.getByText('Click Test Chip');\r\n    const removeButton = canvas.getByRole('button', { name: 'Remove chip' });\r\n    \r\n    // Test click on chip content (should work for removable input chips)\r\n    await userEvent.click(chip);\r\n    expect(args.clicked).toHaveBeenCalled();\r\n    \r\n    // Test click on remove button (should only trigger remove)\r\n    await userEvent.click(removeButton);\r\n    expect(args.removed).toHaveBeenCalled();\r\n    \r\n    // Reset call counts by creating new mock functions if needed\r\n    // The component logic handles preventing double events\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests click handling edge cases for removable chips.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "ComplexRoleCombinations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px;\">\r\n        <!-- Test removable + inList combination (line 143) -->\r\n        <ul style=\"list-style: none; padding: 0;\">\r\n          <li>\r\n            <qk-chip [removable]=\"true\" [inList]=\"true\" [clickable]=\"false\">\r\n              Removable InList Non-clickable\r\n            </qk-chip>\r\n          </li>\r\n        </ul>\r\n        \r\n        <!-- Test just inList without removable or clickable (line 150) -->\r\n        <ul style=\"list-style: none; padding: 0;\">\r\n          <li>\r\n            <qk-chip [inList]=\"true\" [clickable]=\"false\" [removable]=\"false\">\r\n              InList Only\r\n            </qk-chip>\r\n          </li>\r\n        </ul>\r\n        \r\n        <!-- Test default presentation role -->\r\n        <qk-chip [clickable]=\"false\" [removable]=\"false\" [inList]=\"false\">\r\n          Default Presentation Role\r\n        </qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    \r\n    // Verify the different role combinations are applied\r\n    const removableInList = canvas.getByText('Removable InList Non-clickable');\r\n    expect(removableInList).toBeInTheDocument();\r\n    \r\n    const inListOnly = canvas.getByText('InList Only');\r\n    expect(inListOnly).toBeInTheDocument();\r\n    \r\n    const defaultRole = canvas.getByText('Default Presentation Role');\r\n    expect(defaultRole).toBeInTheDocument();\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests complex ARIA role combinations for comprehensive branch coverage.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "ComprehensiveShowcase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 24px; padding: 20px;\">\r\n      <div>\r\n        <h3 style=\"margin: 0 0 12px 0; font-size: 16px; font-weight: 600;\">Filter Chips (with selection)</h3>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n          <qk-chip variant=\"filter\" [selected]=\"true\" hasTrailingIcon>\r\n            Selected Filter\r\n            <span slot=\"trailing-icon\">✓</span>\r\n          </qk-chip>\r\n          <qk-chip variant=\"filter\" [selected]=\"false\" hasTrailingIcon>\r\n            Unselected Filter\r\n            <span slot=\"trailing-icon\">▼</span>\r\n          </qk-chip>\r\n        </div>\r\n      </div>\r\n      \r\n      <div>\r\n        <h3 style=\"margin: 0 0 12px 0; font-size: 16px; font-weight: 600;\">Input Chips (removable)</h3>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n          <qk-chip variant=\"input\" [removable]=\"true\" customClass=\"custom-input-chip\">\r\n            Removable Input\r\n          </qk-chip>\r\n          <qk-chip variant=\"input\" [removable]=\"true\" [disabled]=\"true\">\r\n            Disabled Removable\r\n          </qk-chip>\r\n        </div>\r\n      </div>\r\n      \r\n      <div>\r\n        <h3 style=\"margin: 0 0 12px 0; font-size: 16px; font-weight: 600;\">Suggestion Chips (interactive)</h3>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n          <qk-chip variant=\"suggestion\" [clickable]=\"true\" hasLeadingIcon>\r\n            <span slot=\"leading-icon\">🔍</span>\r\n            Clickable Suggestion\r\n          </qk-chip>\r\n          <qk-chip variant=\"suggestion\" [clickable]=\"false\">\r\n            Non-clickable\r\n          </qk-chip>\r\n        </div>\r\n      </div>\r\n      \r\n      <div>\r\n        <h3 style=\"margin: 0 0 12px 0; font-size: 16px; font-weight: 600;\">Assist Chips</h3>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n          <qk-chip variant=\"assist\" hasAvatar ariaLabel=\"User profile chip\">\r\n            <span slot=\"avatar\">👤</span>\r\n            With Avatar\r\n          </qk-chip>\r\n          <qk-chip variant=\"assist\" testId=\"assist-chip-test\">\r\n            Standard Assist\r\n          </qk-chip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Comprehensive showcase of all chip variants, features, and interactive states.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "DisabledStates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div style=\"display: flex; flex-wrap: wrap; gap: 12px;\">\r\n      <qk-chip variant=\"assist\" [disabled]=\"true\" ariaLabel=\"Disabled assist chip\">Disabled Assist</qk-chip>\r\n      <qk-chip variant=\"filter\" [disabled]=\"true\" ariaLabel=\"Disabled filter chip\">Disabled Filter</qk-chip>\r\n      <qk-chip variant=\"input\" [disabled]=\"true\" [removable]=\"true\" ariaLabel=\"Disabled input chip\">Disabled Input</qk-chip>\r\n      <qk-chip variant=\"suggestion\" [disabled]=\"true\" ariaLabel=\"Disabled suggestion chip\">Disabled Suggestion</qk-chip>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Chips in disabled state'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "DisabledStatesComprehensive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-wrap: wrap; gap: 12px; padding: 20px;\">\r\n        <!-- Disabled clickable chip -->\r\n        <qk-chip [disabled]=\"true\" [clickable]=\"true\">Disabled Clickable</qk-chip>\r\n        \r\n        <!-- Disabled removable chip -->\r\n        <qk-chip [disabled]=\"true\" [removable]=\"true\">Disabled Removable</qk-chip>\r\n        \r\n        <!-- Disabled filter chip -->\r\n        <qk-chip variant=\"filter\" [disabled]=\"true\" [selected]=\"true\">Disabled Selected Filter</qk-chip>\r\n        \r\n        <!-- Non-clickable chip -->\r\n        <qk-chip [clickable]=\"false\">Non-clickable</qk-chip>\r\n        \r\n        <!-- Non-clickable filter chip -->\r\n        <qk-chip variant=\"filter\" [clickable]=\"false\">Non-clickable Filter</qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    \r\n    // Test that disabled chips are present and have disabled styling\r\n    const disabledChips = canvas.getAllByText(/Disabled/);\r\n    expect(disabledChips.length).toBe(3);\r\n    \r\n    // Test non-clickable chips are present\r\n    const nonClickableChips = canvas.getAllByText(/Non-clickable/);\r\n    expect(nonClickableChips.length).toBe(2);\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Comprehensive testing of disabled and non-clickable states.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "ElevationAndBlurTest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    elevation: 'elevated',\r\n    blurred: fn(),\r\n    focused: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [elevation]=\"elevation\"\r\n      (blurred)=\"blurred($event)\"\r\n      (focused)=\"focused($event)\">\r\n      Elevation Test Chip\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const chip = canvas.getByRole('button');\r\n    \r\n    // Test focus and blur events\r\n    chip.focus();\r\n    expect(args.focused).toHaveBeenCalled();\r\n    \r\n    chip.blur();\r\n    expect(args.blurred).toHaveBeenCalled();\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests elevation property and blur event emission.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "EventHandlers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'filter',\r\n    clickable: true,\r\n    removable: true,\r\n    clicked: fn(),\r\n    removed: fn(),\r\n    focused: fn(),\r\n    blurred: fn(),\r\n    selectionChange: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Event Test Chip\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const chip = canvas.getByText('Event Test Chip');\r\n    const removeButton = canvas.getByRole('button', { name: 'Remove chip' });\r\n    \r\n    // Test click and selection change\r\n    await userEvent.click(chip);\r\n    expect(args.clicked).toHaveBeenCalled();\r\n    expect(args.selectionChange).toHaveBeenCalledWith(true);\r\n    \r\n    // Test remove\r\n    await userEvent.click(removeButton);\r\n    expect(args.removed).toHaveBeenCalled();\r\n    \r\n    // Test focus/blur - focus on the remove button since the chip container is not focusable\r\n    removeButton.focus();\r\n    expect(args.focused).toHaveBeenCalled();\r\n    \r\n    chip.blur();\r\n    expect(args.blurred).toHaveBeenCalled();\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests all event handlers for complete functional coverage.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "FilterChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'filter',\r\n    size: 'md',\r\n    elevation: 'flat',\r\n    selected: false,\r\n    ariaLabel: 'Filter by category'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\" \r\n      [selected]=\"selected\"\r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      [hasLeadingIcon]=\"hasLeadingIcon\"\r\n      [hasTrailingIcon]=\"hasTrailingIcon\"\r\n      [hasAvatar]=\"hasAvatar\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Filter Chip\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "FilterChipInteractive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'filter',\r\n    selected: false\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n      <qk-chip \r\n        variant=\"filter\" \r\n        [selected]=\"false\"\r\n        (selectionChange)=\"selectionChange($event)\">\r\n        Unselected Filter\r\n      </qk-chip>\r\n      <qk-chip \r\n        variant=\"filter\" \r\n        [selected]=\"true\"\r\n        (selectionChange)=\"selectionChange($event)\">\r\n        Selected Filter\r\n      </qk-chip>\r\n    </div>\r\n    `\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Filter chips with unselected and selected states'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "InputChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    size: 'md',\r\n    elevation: 'flat'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\" \r\n      [selected]=\"selected\"\r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      [hasLeadingIcon]=\"hasLeadingIcon\"\r\n      [hasTrailingIcon]=\"hasTrailingIcon\"\r\n      [hasAvatar]=\"hasAvatar\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Input Chip\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "KeyboardNavigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    clickable: true,\r\n    ariaLabel: 'Keyboard test chip',\r\n    clicked: fn(),\r\n    focused: fn(),\r\n    blurred: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [clickable]=\"clickable\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Keyboard Test\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const chip = canvas.getByRole('button');\r\n    \r\n    // Test focus\r\n    chip.focus();\r\n    expect(args.focused).toHaveBeenCalled();\r\n    \r\n    // Test keyboard interaction\r\n    await userEvent.keyboard('{Enter}');\r\n    expect(args.clicked).toHaveBeenCalled();\r\n    \r\n    await userEvent.keyboard(' ');\r\n    expect(args.clicked).toHaveBeenCalledTimes(2);\r\n    \r\n    // Test blur\r\n    chip.blur();\r\n    expect(args.blurred).toHaveBeenCalled();\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests keyboard navigation and event handling for accessibility compliance.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ChipComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Chip',\r\n  component: ChipComponent,\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe Chip component follows Material UI 3 design guidelines and provides versatile functionality for representing input, attributes, or actions.\r\n\r\n## Features\r\n- **4 Variants**: assist, filter, input, suggestion following Material UI 3 specifications\r\n- **2 Sizes**: sm (24px), md (32px)\r\n- **2 Elevations**: flat, elevated\r\n- **Interactive States**: clickable, selectable, removable\r\n- **Icon Support**: leading icons, trailing icons, avatars\r\n- **Accessibility**: ARIA attributes, keyboard navigation\r\n- **Events**: click, remove, focus, blur, selection change\r\n\r\n## Chip Types (Material UI 3)\r\n- **Assist Chips**: Help users take actions or see information\r\n- **Filter Chips**: Let users select from a set of options\r\n- **Input Chips**: Represent discrete pieces of information\r\n- **Suggestion Chips**: Present dynamically generated suggestions\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<qk-chip variant=\"assist\" size=\"md\" [clickable]=\"true\">\r\n  Assist Chip\r\n</qk-chip>\r\n\\`\\`\\`\r\n\r\n## With Icons\r\n\\`\\`\\`html\r\n<qk-chip variant=\"filter\" [hasLeadingIcon]=\"true\">\r\n  <svg slot=\"leading-icon\" width=\"18\" height=\"18\">...</svg>\r\n  Filter with Icon\r\n</qk-chip>\r\n\\`\\`\\`\r\n\r\n## Removable Input Chip\r\n\\`\\`\\`html\r\n<qk-chip variant=\"input\" [removable]=\"true\" (removed)=\"onRemove($event)\">\r\n  Removable Input\r\n</qk-chip>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['assist', 'filter', 'input', 'suggestion'] as ChipVariant[],\r\n      description: 'The Material UI 3 chip variant'\r\n    },\r\n    size: {\r\n      control: 'select',\r\n      options: ['sm', 'md'] as ChipSize[],\r\n      description: 'The size of the chip'\r\n    },\r\n    elevation: {\r\n      control: 'select',\r\n      options: ['flat', 'elevated'] as ChipElevation[],\r\n      description: 'The elevation style of the chip'\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip is disabled'\r\n    },\r\n    selected: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip is selected (for filter chips)'\r\n    },\r\n    clickable: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip is clickable'\r\n    },\r\n    removable: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip can be removed'\r\n    },\r\n    hasLeadingIcon: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has a leading icon'\r\n    },\r\n    hasTrailingIcon: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has a trailing icon'\r\n    },\r\n    hasAvatar: {\r\n      control: 'boolean',\r\n      description: 'Whether the chip has an avatar'\r\n    },\r\n    customClass: {\r\n      control: 'text',\r\n      description: 'Custom CSS classes to apply'\r\n    },\r\n    ariaLabel: {\r\n      control: 'text',\r\n      description: 'ARIA label for accessibility'\r\n    },\r\n    removeAriaLabel: {\r\n      control: 'text',\r\n      description: 'ARIA label for remove button'\r\n    },\r\n    testId: {\r\n      control: 'text',\r\n      description: 'Test ID for testing purposes'\r\n    },\r\n    clicked: {\r\n      action: 'clicked',\r\n      description: 'Event emitted when chip is clicked'\r\n    },\r\n    removed: {\r\n      action: 'removed',\r\n      description: 'Event emitted when chip is removed'\r\n    },\r\n    focused: {\r\n      action: 'focused',\r\n      description: 'Event emitted when chip receives focus'\r\n    },\r\n    blurred: {\r\n      action: 'blurred',\r\n      description: 'Event emitted when chip loses focus'\r\n    },\r\n    selectionChange: {\r\n      action: 'selectionChange',\r\n      description: 'Event emitted when chip selection changes'\r\n    }\r\n  },\r\n  args: {\r\n    selected: false,\r\n    ariaLabel: 'Chip action',\r\n    clicked: fn(),\r\n    removed: fn(),\r\n    focused: fn(),\r\n    blurred: fn(),\r\n    selectionChange: fn()\r\n  }\r\n}"
                },
                {
                    "name": "PropertyEdgeCases",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-wrap: wrap; gap: 12px; padding: 20px;\">\r\n        <!-- Empty custom class -->\r\n        <qk-chip [customClass]=\"''\">Empty Custom Class</qk-chip>\r\n        \r\n        <!-- Empty aria label -->\r\n        <qk-chip [ariaLabel]=\"''\">Empty ARIA Label</qk-chip>\r\n        \r\n        <!-- Empty remove aria label -->\r\n        <qk-chip [removable]=\"true\" [removeAriaLabel]=\"''\">Empty Remove ARIA</qk-chip>\r\n        \r\n        <!-- Custom remove aria label -->\r\n        <qk-chip [removable]=\"true\" [removeAriaLabel]=\"'Custom remove text'\">\r\n          Custom Remove ARIA\r\n        </qk-chip>\r\n        \r\n        <!-- Test ID -->\r\n        <qk-chip [testId]=\"'test-chip-id'\">Test ID Chip</qk-chip>\r\n        \r\n        <!-- Removable filter chip (special case) -->\r\n        <qk-chip variant=\"filter\" [removable]=\"true\" [clickable]=\"true\">\r\n          Removable Filter\r\n        </qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    \r\n    // Test custom remove ARIA label\r\n    const customRemoveButton = canvas.getByRole('button', { name: 'Custom remove text' });\r\n    expect(customRemoveButton).toBeInTheDocument();\r\n    \r\n    // Test default remove ARIA label (only one exists now)\r\n    const defaultRemoveButtons = canvas.getAllByRole('button', { name: 'Remove chip' });\r\n    expect(defaultRemoveButtons.length).toBeGreaterThanOrEqual(1);\r\n    \r\n    // Test removable filter chip behavior\r\n    const removableFilter = canvas.getByText('Removable Filter');\r\n    await userEvent.click(removableFilter);\r\n    // Should handle both filter and removable functionality\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests edge cases and property combinations for comprehensive coverage.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "PropertyInitializationTest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'filter',\r\n    size: 'sm',\r\n    elevation: 'flat',\r\n    disabled: true,\r\n    selected: true,\r\n    clickable: false,\r\n    removable: true,\r\n    hasLeadingIcon: true,\r\n    hasTrailingIcon: true,\r\n    hasAvatar: true,\r\n    customClass: 'test-class',\r\n    ariaLabel: 'Test aria',\r\n    ariaPressed: true,\r\n    removeAriaLabel: 'Remove test',\r\n    testId: 'test-id',\r\n    inList: true,\r\n    blurred: fn(),\r\n    focused: fn(),\r\n    clicked: fn(),\r\n    removed: fn(),\r\n    selectionChange: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\"\r\n      [size]=\"size\"\r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\"\r\n      [selected]=\"selected\"\r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      [hasLeadingIcon]=\"hasLeadingIcon\"\r\n      [hasTrailingIcon]=\"hasTrailingIcon\"\r\n      [hasAvatar]=\"hasAvatar\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [ariaPressed]=\"ariaPressed\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      [testId]=\"testId\"\r\n      [inList]=\"inList\"\r\n      (blurred)=\"blurred($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Property Test Chip\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const chip = canvas.getByText('Property Test Chip');\r\n    const removeButton = canvas.getByRole('button', { name: 'Remove test' });\r\n    \r\n    // Since the chip is disabled, the remove button is also disabled and can't receive focus\r\n    // We'll just verify the component renders correctly with all the properties\r\n    // The focus/blur events can't be tested with disabled elements\r\n    \r\n    // Verify the chip has the expected properties reflected in the DOM\r\n    const chipElement = canvas.getByText('Property Test Chip').closest('.qk-chip');\r\n    expect(chipElement).toHaveClass('qk-chip--disabled');\r\n    expect(chipElement).toHaveClass('qk-chip--selected');\r\n    expect(chipElement).toHaveClass('qk-chip--filter');\r\n    expect(chipElement).toHaveClass('qk-chip--sm');\r\n    expect(chipElement).toHaveClass('test-class');\r\n    \r\n    // Note: focus/blur events are not tested here because the element is disabled\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests all property initializations and event handler setup.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "RemovableChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    removable: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [removable]=\"removable\"\r\n      (removed)=\"removed($event)\">\r\n      Removable Chip\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "RemovableChipKeyboard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    removable: true,\r\n    removeAriaLabel: 'Custom remove label',\r\n    removed: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [removable]=\"removable\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      (removed)=\"removed($event)\">\r\n      Removable Input\r\n    </qk-chip>`\r\n  }),\r\n  play: async ({ canvasElement, args }) => {\r\n    const canvas = within(canvasElement);\r\n    const removeButton = canvas.getByRole('button', { name: 'Custom remove label' });\r\n    \r\n    // Test keyboard removal with Enter\r\n    removeButton.focus();\r\n    await userEvent.keyboard('{Enter}');\r\n    expect(args.removed).toHaveBeenCalled();\r\n    \r\n    // Test keyboard removal with Space\r\n    await userEvent.keyboard(' ');\r\n    expect(args.removed).toHaveBeenCalledTimes(2);\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests keyboard removal functionality for input chips.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "RemovableWithCustomIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    removable: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [removable]=\"removable\"\r\n      (removed)=\"removed($event)\">\r\n      Custom Remove Icon\r\n      <svg remove-icon width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"/>\r\n      </svg>\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "SuggestionChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'suggestion',\r\n    size: 'md',\r\n    elevation: 'flat'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [elevation]=\"elevation\"\r\n      [disabled]=\"disabled\" \r\n      [selected]=\"selected\"\r\n      [clickable]=\"clickable\"\r\n      [removable]=\"removable\"\r\n      [hasLeadingIcon]=\"hasLeadingIcon\"\r\n      [hasTrailingIcon]=\"hasTrailingIcon\"\r\n      [hasAvatar]=\"hasAvatar\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [removeAriaLabel]=\"removeAriaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (removed)=\"removed($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\"\r\n      (selectionChange)=\"selectionChange($event)\">\r\n      Suggestion Chip\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "TabIndexCoverage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-wrap: wrap; gap: 12px; padding: 20px;\">\r\n        <!-- Disabled chip (tabindex -1) -->\r\n        <qk-chip [disabled]=\"true\">Disabled</qk-chip>\r\n        \r\n        <!-- Filter chip (tabindex 0) -->\r\n        <qk-chip variant=\"filter\">Filter</qk-chip>\r\n        \r\n        <!-- Filter chip removable (tabindex 0) -->\r\n        <qk-chip variant=\"filter\" [removable]=\"true\">Filter Removable</qk-chip>\r\n        \r\n        <!-- Non-filter removable (tabindex -1) -->\r\n        <qk-chip variant=\"input\" [removable]=\"true\">Input Removable</qk-chip>\r\n        \r\n        <!-- Clickable non-filter (tabindex 0) -->\r\n        <qk-chip variant=\"assist\" [clickable]=\"true\">Clickable Assist</qk-chip>\r\n        \r\n        <!-- Non-clickable non-filter (tabindex -1) -->\r\n        <qk-chip variant=\"suggestion\" [clickable]=\"false\">Non-clickable</qk-chip>\r\n      </div>\r\n    `\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    \r\n    // Test that chips are rendered correctly with different focusability\r\n    const filterChip = canvas.getByText('Filter');\r\n    expect(filterChip).toBeInTheDocument();\r\n    \r\n    const disabledChip = canvas.getByText('Disabled');\r\n    expect(disabledChip).toBeInTheDocument();\r\n    \r\n    const clickableChip = canvas.getByText('Clickable Assist');\r\n    expect(clickableChip).toBeInTheDocument();\r\n    \r\n    const nonClickableChip = canvas.getByText('Non-clickable');\r\n    expect(nonClickableChip).toBeInTheDocument();\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Tests all tabindex calculation scenarios for keyboard navigation.'\r\n      }\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "WithAvatar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    hasAvatar: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [hasAvatar]=\"hasAvatar\">\r\n      <img avatar src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face\" alt=\"User\" style=\"width: 100%; height: 100%; object-fit: cover;\">\r\n      John Doe\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "WithAvatarInitials",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'input',\r\n    hasAvatar: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [hasAvatar]=\"hasAvatar\">\r\n      <span avatar style=\"font-size: 12px; font-weight: 500;\">JD</span>\r\n      John Doe\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "WithLeadingIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    hasLeadingIcon: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [hasLeadingIcon]=\"hasLeadingIcon\">\r\n      <svg leading-icon width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n      </svg>\r\n      With Leading Icon\r\n    </qk-chip>`\r\n  })\r\n}"
                },
                {
                    "name": "WithTrailingIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'assist',\r\n    hasTrailingIcon: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-chip \r\n      [variant]=\"variant\" \r\n      [hasTrailingIcon]=\"hasTrailingIcon\">\r\n      With Trailing Icon\r\n      <svg trailing-icon width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/>\r\n      </svg>\r\n    </qk-chip>`\r\n  })\r\n}"
                }
            ],
            "projects/quanta-kit/src/lib/Button/button.stories.ts": [
                {
                    "name": "AllModifiersCombined",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'success',\r\n        size: 'lg',\r\n        fullWidth: true,\r\n        rounded: true,\r\n        loading: true,\r\n        disabled: false,\r\n        customClass: 'test-modifier-class'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [loading]=\"loading\"\r\n      [disabled]=\"disabled\"\r\n      [customClass]=\"customClass\">\r\n      All Modifiers Combined\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests all possible modifier combinations to ensure buttonClasses getter covers all branches.'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "AllSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    render: () => ({\r\n        template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: flex-start;\">\r\n      <qk-button variant=\"primary\" size=\"xs\">Extra Small</qk-button>\r\n      <qk-button variant=\"primary\" size=\"sm\">Small</qk-button>\r\n      <qk-button variant=\"primary\" size=\"md\">Medium</qk-button>\r\n      <qk-button variant=\"primary\" size=\"lg\">Large</qk-button>\r\n      <qk-button variant=\"primary\" size=\"xl\">Extra Large</qk-button>\r\n    </div>\r\n    `\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Buttons are available in 5 different sizes: xs, sm, md, lg, xl'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "AllVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    render: () => ({\r\n        template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem;\">\r\n      <qk-button variant=\"primary\">Primary</qk-button>\r\n      <qk-button variant=\"secondary\">Secondary</qk-button>\r\n      <qk-button variant=\"success\">Success</qk-button>\r\n      <qk-button variant=\"danger\">Danger</qk-button>\r\n      <qk-button variant=\"warning\">Warning</qk-button>\r\n      <qk-button variant=\"info\">Info</qk-button>\r\n      <qk-button variant=\"light\">Light</qk-button>\r\n      <qk-button variant=\"dark\">Dark</qk-button>\r\n      <qk-button variant=\"outline-primary\">Outline Primary</qk-button>\r\n      <qk-button variant=\"outline-secondary\">Outline Secondary</qk-button>\r\n      <qk-button variant=\"outline-success\">Outline Success</qk-button>\r\n      <qk-button variant=\"outline-danger\">Outline Danger</qk-button>\r\n      <qk-button variant=\"outline-warning\">Outline Warning</qk-button>\r\n      <qk-button variant=\"outline-info\">Outline Info</qk-button>\r\n      <qk-button variant=\"outline-light\">Outline Light</qk-button>\r\n      <qk-button variant=\"outline-dark\">Outline Dark</qk-button>\r\n    </div>\r\n    `\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'All available button variants including solid and outline styles'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "ClickWhenDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        disabled: true\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      (clicked)=\"clicked($event)\">\r\n      Disabled Button (Click Test)\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests that click events are not emitted when button is disabled. The button has pointer-events: none so interactions are prevented.'\r\n            }\r\n        }\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvas.getByRole('button');\r\n\r\n        // Verify the button is disabled (has correct attributes)\r\n        expect(button).toBeDisabled();\r\n        expect(button).toHaveClass('qk-btn--disabled');\r\n    }\r\n}"
                },
                {
                    "name": "ClickWhenLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        loading: true\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [loading]=\"loading\"\r\n      (clicked)=\"clicked($event)\">\r\n      Loading Button (Click Test)\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests that click events are not emitted when button is in loading state. The button has pointer-events: none so interactions are prevented.'\r\n            }\r\n        }\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvas.getByRole('button');\r\n\r\n        // Verify the button is disabled due to loading and has loading class\r\n        expect(button).toBeDisabled();\r\n        expect(button).toHaveClass('qk-btn--loading');\r\n\r\n        // Verify spinner is present\r\n        const spinner = canvas.getByRole('button').querySelector('.qk-btn-spinner');\r\n        expect(spinner).toBeInTheDocument();\r\n    }\r\n}"
                },
                {
                    "name": "CustomClassHandling",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        customClass: 'my-custom-class another-custom-class'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [customClass]=\"customClass\">\r\n      Button with Custom Classes\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests custom class handling in the buttonClasses getter.'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'danger',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [square]=\"square\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Danger Button\r\n    </qk-button>`\r\n    })\r\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        disabled: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\">\r\n      Disabled Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button in disabled state'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "DisabledAndLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'warning',\r\n        size: 'sm',\r\n        disabled: true,\r\n        loading: true\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      [loading]=\"loading\">\r\n      Disabled + Loading\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests combination of disabled and loading states.'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "EmptyCustomClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        customClass: ''\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [customClass]=\"customClass\">\r\n      Button with Empty Custom Class\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests handling of empty custom class to ensure no empty strings are added to classes.'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "FocusAndBlurEvents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n      <p>This story tests focus and blur events:</p>\r\n      <qk-button \r\n        [variant]=\"variant\" \r\n        [size]=\"size\"\r\n        (clicked)=\"clicked($event)\"\r\n        (focused)=\"focused($event)\"\r\n        (blurred)=\"blurred($event)\">\r\n        Focus/Blur Test Button\r\n      </qk-button>\r\n      <qk-button variant=\"secondary\">Another Button (for tabbing)</qk-button>\r\n    </div>\r\n    `\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Story specifically designed to test focus and blur event handling. The play function will automatically trigger these events for testing coverage.'\r\n            }\r\n        }\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvas.getByText('Focus/Blur Test Button');\r\n\r\n        // Focus the button\r\n        await userEvent.click(button);\r\n        await button.focus();\r\n\r\n        // Blur the button by focusing another element\r\n        const secondButton = canvas.getByText('Another Button (for tabbing)');\r\n        await userEvent.tab();\r\n        await secondButton.focus();\r\n    }\r\n}"
                },
                {
                    "name": "FullWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        fullWidth: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [fullWidth]=\"fullWidth\">\r\n      Full Width Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button that takes the full width of its container'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "FullWidthWithCustomClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'dark',\r\n        size: 'xl',\r\n        fullWidth: true,\r\n        customClass: 'test-full-width-custom'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [customClass]=\"customClass\">\r\n      Full Width + Custom Class\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests full width with custom class combination.'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "IconOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        ariaLabel: 'Delete item'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      style=\"padding: 0.625rem;\">\r\n      <svg width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\r\n      </svg>\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with only an icon, useful for actions like delete, close, etc. Make sure to provide an aria-label for accessibility.'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "InteractionTest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n      <qk-button \r\n        [variant]=\"variant\" \r\n        [size]=\"size\"\r\n        (clicked)=\"clicked($event)\"\r\n        (focused)=\"focused($event)\"\r\n        (blurred)=\"blurred($event)\">\r\n        Interactive Test Button\r\n      </qk-button>\r\n      <input type=\"text\" placeholder=\"Focus target\" />\r\n    </div>\r\n    `\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Comprehensive interaction test that exercises all event handlers.'\r\n            }\r\n        }\r\n    },\r\n    play: async ({ canvasElement, args }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvas.getByText('Interactive Test Button');\r\n        const input = canvas.getByPlaceholderText('Focus target');\r\n\r\n        // Test successful click\r\n        await userEvent.click(button);\r\n        expect(args.clicked).toHaveBeenCalled();\r\n\r\n        // Test focus\r\n        await button.focus();\r\n        expect(args.focused).toHaveBeenCalled();\r\n\r\n        // Test blur by focusing another element\r\n        await input.focus();\r\n        expect(args.blurred).toHaveBeenCalled();\r\n    }\r\n}"
                },
                {
                    "name": "InteractiveStates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    render: () => ({\r\n        template: `\r\n    <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: flex-start; max-width: 300px;\">\r\n      <qk-button variant=\"primary\">Normal State</qk-button>\r\n      <qk-button variant=\"primary\" [disabled]=\"true\">Disabled State</qk-button>\r\n      <qk-button variant=\"primary\" [loading]=\"true\">Loading State</qk-button>\r\n      <qk-button variant=\"primary\" [loading]=\"true\" [hideTextOnLoading]=\"true\">Loading (Hidden Text)</qk-button>\r\n    </div>\r\n    `\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Different interactive states of the button component'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        loading: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\">\r\n      Loading Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button in loading state with spinner animation'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "LoadingHideText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        loading: true,\r\n        hideTextOnLoading: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\">\r\n      Processing...\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button in loading state with hidden text content'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n    title: 'Components/Button',\r\n    component: ButtonComponent,\r\n    tags: ['autodocs'],\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [ButtonComponent],\r\n        }),\r\n    ],\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                component: `\r\nThe Button component is a versatile UI element that supports various styles, sizes, and states.\r\nIt provides comprehensive functionality including loading states, accessibility features, and customization options.\r\n\r\n## Features\r\n- Multiple variants (primary, secondary, success, danger, warning, info, light, dark, and outline versions)\r\n- Various sizes (xs, sm, md, lg, xl)\r\n- Loading state with spinner\r\n- Disabled state\r\n- Full width option\r\n- Rounded and square variations\r\n- Accessibility support with ARIA attributes\r\n- Event emissions for click, focus, and blur\r\n- Icon slot support (left and right)\r\n- Keyboard navigation support\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<qk-button variant=\"primary\" size=\"md\" (clicked)=\"handleClick($event)\">\r\n  Click me\r\n</qk-button>\r\n\\`\\`\\`\r\n\r\n## With Icons\r\n\\`\\`\\`html\r\n<qk-button variant=\"primary\">\r\n  <svg slot=\"icon-left\" width=\"16\" height=\"16\">...</svg>\r\n  Save Changes\r\n  <svg slot=\"icon-right\" width=\"16\" height=\"16\">...</svg>\r\n</qk-button>\r\n\\`\\`\\`\r\n        `\r\n            }\r\n        }\r\n    },\r\n    argTypes: {\r\n        variant: {\r\n            control: 'select',\r\n            options: [\r\n                'primary',\r\n                'secondary',\r\n                'success',\r\n                'danger',\r\n                'warning',\r\n                'info',\r\n                'light',\r\n                'dark',\r\n                'outline-primary',\r\n                'outline-secondary',\r\n                'outline-success',\r\n                'outline-danger',\r\n                'outline-warning',\r\n                'outline-info',\r\n                'outline-light',\r\n                'outline-dark'\r\n            ] as ButtonVariant[],\r\n            description: 'The visual style variant of the button'\r\n        },\r\n        size: {\r\n            control: 'select',\r\n            options: ['xs', 'sm', 'md', 'lg', 'xl'] as ButtonSize[],\r\n            description: 'The size of the button'\r\n        },\r\n        type: {\r\n            control: 'select',\r\n            options: ['button', 'submit', 'reset'] as ButtonType[],\r\n            description: 'The HTML type attribute of the button'\r\n        },\r\n        disabled: {\r\n            control: 'boolean',\r\n            description: 'Whether the button is disabled'\r\n        },\r\n        loading: {\r\n            control: 'boolean',\r\n            description: 'Whether the button is in loading state'\r\n        },\r\n        hideTextOnLoading: {\r\n            control: 'boolean',\r\n            description: 'Whether to hide text content when loading'\r\n        },\r\n        fullWidth: {\r\n            control: 'boolean',\r\n            description: 'Whether the button should take full width'\r\n        },\r\n        rounded: {\r\n            control: 'boolean',\r\n            description: 'Whether the button has rounded corners'\r\n        },\r\n        square: {\r\n            control: 'boolean',\r\n            description: 'Whether the button has no border radius'\r\n        },\r\n        customClass: {\r\n            control: 'text',\r\n            description: 'Custom CSS classes to apply'\r\n        },\r\n        ariaLabel: {\r\n            control: 'text',\r\n            description: 'ARIA label for accessibility'\r\n        },\r\n        testId: {\r\n            control: 'text',\r\n            description: 'Test ID for testing purposes'\r\n        },\r\n        clicked: {\r\n            action: 'clicked',\r\n            description: 'Event emitted when button is clicked'\r\n        },\r\n        focused: {\r\n            action: 'focused',\r\n            description: 'Event emitted when button receives focus'\r\n        },\r\n        blurred: {\r\n            action: 'blurred',\r\n            description: 'Event emitted when button loses focus'\r\n        }\r\n    },\r\n    args: {\r\n        clicked: fn(),\r\n        focused: fn(),\r\n        blurred: fn()\r\n    }\r\n}"
                },
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md',\r\n        disabled: false,\r\n        loading: false,\r\n        hideTextOnLoading: false,\r\n        fullWidth: false,\r\n        rounded: false,\r\n        square: false,\r\n        type: 'button',\r\n        customClass: '',\r\n        ariaLabel: '',\r\n        testId: 'button-playground'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [type]=\"type\"\r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [square]=\"square\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Playground Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Interactive playground to experiment with all button properties and see real-time changes.'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [square]=\"square\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Primary Button\r\n    </qk-button>`\r\n    })\r\n}"
                },
                {
                    "name": "Rounded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        rounded: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [rounded]=\"rounded\">\r\n      Rounded Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with fully rounded corners'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'secondary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [square]=\"square\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Secondary Button\r\n    </qk-button>`\r\n    })\r\n}"
                },
                {
                    "name": "Square",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        square: true,\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [square]=\"square\">\r\n      Square Button\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with no border radius (square corners)'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "SquareModifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'info',\r\n        size: 'md',\r\n        square: true\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\"\r\n      [square]=\"square\">\r\n      Square Button Test\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Tests the square modifier to ensure it adds the correct CSS class.'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'success',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\" \r\n      [disabled]=\"disabled\" \r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [fullWidth]=\"fullWidth\"\r\n      [rounded]=\"rounded\"\r\n      [square]=\"square\"\r\n      [customClass]=\"customClass\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Success Button\r\n    </qk-button>`\r\n    })\r\n}"
                },
                {
                    "name": "WithBothIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\">\r\n      <svg slot=\"icon-left\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\r\n      </svg>\r\n      Save Changes\r\n      <svg slot=\"icon-right\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"/>\r\n      </svg>\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with icons on both left and right sides'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "WithLeftIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\">\r\n      <svg slot=\"icon-left\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\r\n      </svg>\r\n      Add Item\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with an icon on the left side'\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "WithRightIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        variant: 'primary',\r\n        size: 'md'\r\n    },\r\n    render: (args) => ({\r\n        props: args,\r\n        template: `<qk-button \r\n      [variant]=\"variant\" \r\n      [size]=\"size\">\r\n      Continue\r\n      <svg slot=\"icon-right\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/>\r\n      </svg>\r\n    </qk-button>`\r\n    }),\r\n    parameters: {\r\n        docs: {\r\n            description: {\r\n                story: 'Button with an icon on the right side'\r\n            }\r\n        }\r\n    }\r\n}"
                }
            ],
            "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts": [
                {
                    "name": "Delete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n     variant: 'delete',\r\n    disabled: false,\r\n    loading: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-button\r\n      [disabled]=\"disabled\"\r\n      [variant]=\"variant\"\r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Delete Button\r\n    </qk-button>`,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Buttongroup',\r\n  component: ButtonComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ButtonComponent],\r\n    }),\r\n  ],\r\n  args: {\r\n    disabled: false,\r\n    loading: false,\r\n    hideTextOnLoading: false,\r\n    ariaLabel: '',\r\n    testId: '',\r\n    clicked: fn(),\r\n    focused: fn(),\r\n    blurred: fn(),\r\n  },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n     variant: 'primary',\r\n    disabled: false,\r\n    loading: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<qk-button\r\n      [disabled]=\"disabled\"\r\n      [variant]=\"variant\"\r\n      [loading]=\"loading\"\r\n      [hideTextOnLoading]=\"hideTextOnLoading\"\r\n      [ariaLabel]=\"ariaLabel\"\r\n      [testId]=\"testId\"\r\n      (clicked)=\"clicked($event)\"\r\n      (focused)=\"focused($event)\"\r\n      (blurred)=\"blurred($event)\">\r\n      Primary Button\r\n    </qk-button>`,\r\n  }),\r\n}"
                }
            ],
            "projects/quanta-kit/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    controls: {\r\n      matchers: {\r\n       color: /(background|color)$/i,\r\n       date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/quanta-kit/src/lib/Button/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/quanta-kit/src/lib/Chip/chip.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ChipComponent>",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/quanta-kit/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllModifiersCombined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClickWhenDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClickWhenLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomClassHandling",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledAndLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyCustomClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FocusAndBlurEvents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullWidthWithCustomClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InteractionTest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InteractiveStates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadingHideText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Rounded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Square",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SquareModifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithBothIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLeftIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithRightIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Delete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Buttongroup/buttongroup.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllClassModifiers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllElevations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllRolesCoverage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AssistChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChipSet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClickHandlingEdgeCases",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComplexRoleCombinations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComprehensiveShowcase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledStates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledStatesComprehensive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ElevationAndBlurTest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EventHandlers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FilterChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FilterChipInteractive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KeyboardNavigation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PropertyEdgeCases",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PropertyInitializationTest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RemovableChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RemovableChipKeyboard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RemovableWithCustomIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuggestionChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TabIndexCoverage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithAvatar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithAvatarInitials",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLeadingIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithTrailingIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}