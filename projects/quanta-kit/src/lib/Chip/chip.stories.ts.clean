import type { Meta, StoryObj } from '@storybook/angular';
import { fn } from 'storybook/test';
import { expect, userEvent, within } from 'storybook/test';
import { ChipComponent, ChipVariant, ChipSize, ChipElevation } from './chip.component';

const meta: Meta<ChipComponent> = {
  title: 'Components/Chip',
  component: ChipComponent,
  tags: ['autodocs'],
  parameters: {
    docs: {
      description: {
        component: `
The Chip component follows Material UI 3 design guidelines and provides versatile functionality for representing input, attributes, or actions.

## Features
- **4 Variants**: assist, filter, input, suggestion following Material UI 3 specifications
- **2 Sizes**: sm (24px), md (32px)
- **2 Elevations**: flat, elevated
- **Interactive States**: clickable, selectable, removable
- **Icon Support**: leading icons, trailing icons, avatars
- **Accessibility**: ARIA attributes, keyboard navigation
- **Events**: click, remove, focus, blur, selection change

## Chip Types (Material UI 3)
- **Assist Chips**: Help users take actions or see information
- **Filter Chips**: Let users select from a set of options
- **Input Chips**: Represent discrete pieces of information
- **Suggestion Chips**: Present dynamically generated suggestions

## Usage
\`\`\`html
<qk-chip variant="assist" size="md" [clickable]="true">
  Assist Chip
</qk-chip>
\`\`\`

## With Icons
\`\`\`html
<qk-chip variant="filter" [hasLeadingIcon]="true">
  <svg slot="leading-icon" width="18" height="18">...</svg>
  Filter with Icon
</qk-chip>
\`\`\`

## Removable Input Chip
\`\`\`html
<qk-chip variant="input" [removable]="true" (removed)="onRemove($event)">
  Removable Input
</qk-chip>
\`\`\`
        `
      }
    }
  },
  argTypes: {
    variant: {
      control: 'select',
      options: ['assist', 'filter', 'input', 'suggestion'] as ChipVariant[],
      description: 'The Material UI 3 chip variant'
    },
    size: {
      control: 'select',
      options: ['sm', 'md'] as ChipSize[],
      description: 'The size of the chip'
    },
    elevation: {
      control: 'select',
      options: ['flat', 'elevated'] as ChipElevation[],
      description: 'The elevation style of the chip'
    },
    disabled: {
      control: 'boolean',
      description: 'Whether the chip is disabled'
    },
    selected: {
      control: 'boolean',
      description: 'Whether the chip is selected (for filter chips)'
    },
    clickable: {
      control: 'boolean',
      description: 'Whether the chip is clickable'
    },
    removable: {
      control: 'boolean',
      description: 'Whether the chip can be removed'
    },
    hasLeadingIcon: {
      control: 'boolean',
      description: 'Whether the chip has a leading icon'
    },
    hasTrailingIcon: {
      control: 'boolean',
      description: 'Whether the chip has a trailing icon'
    },
    hasAvatar: {
      control: 'boolean',
      description: 'Whether the chip has an avatar'
    },
    customClass: {
      control: 'text',
      description: 'Custom CSS classes to apply'
    },
    ariaLabel: {
      control: 'text',
      description: 'ARIA label for accessibility'
    },
    removeAriaLabel: {
      control: 'text',
      description: 'ARIA label for remove button'
    },
    testId: {
      control: 'text',
      description: 'Test ID for testing purposes'
    },
    clicked: {
      action: 'clicked',
      description: 'Event emitted when chip is clicked'
    },
    removed: {
      action: 'removed',
      description: 'Event emitted when chip is removed'
    },
    focused: {
      action: 'focused',
      description: 'Event emitted when chip receives focus'
    },
    blurred: {
      action: 'blurred',
      description: 'Event emitted when chip loses focus'
    },
    selectionChange: {
      action: 'selectionChange',
      description: 'Event emitted when chip selection changes'
    }
  },
  args: {
    selected: false,
    ariaLabel: 'Chip action',
    clicked: fn(),
    removed: fn(),
    focused: fn(),
    blurred: fn(),
    selectionChange: fn()
  }
};

export default meta;
type Story = StoryObj<ChipComponent>;

// Basic Variants
export const AssistChip: Story = {
  args: {
    variant: 'assist',
    size: 'md',
    elevation: 'flat'
  },
  render: (args) => ({
    props: args,
    template: `<qk-chip 
      [variant]="variant" 
      [size]="size" 
      [elevation]="elevation"
      [disabled]="disabled" 
      [selected]="selected"
      [clickable]="clickable"
      [removable]="removable"
      [hasLeadingIcon]="hasLeadingIcon"
      [hasTrailingIcon]="hasTrailingIcon"
      [hasAvatar]="hasAvatar"
      [customClass]="customClass"
      [ariaLabel]="ariaLabel"
      [removeAriaLabel]="removeAriaLabel"
      [testId]="testId"
      (clicked)="clicked($event)"
      (removed)="removed($event)"
      (focused)="focused($event)"
      (blurred)="blurred($event)"
      (selectionChange)="selectionChange($event)">
      Assist Chip
    </qk-chip>`
  })
};

export const FilterChip: Story = {
  args: {
    variant: 'filter',
    size: 'md',
    elevation: 'flat',
    selected: false,
    ariaLabel: 'Filter by category'
  },
  render: (args) => ({
    props: args,
    template: `<qk-chip 
      [variant]="variant" 
      [size]="size" 
      [elevation]="elevation"
      [disabled]="disabled" 
      [selected]="selected"
      [clickable]="clickable"
      [removable]="removable"
      [hasLeadingIcon]="hasLeadingIcon"
      [hasTrailingIcon]="hasTrailingIcon"
      [hasAvatar]="hasAvatar"
      [customClass]="customClass"
      [ariaLabel]="ariaLabel"
      [removeAriaLabel]="removeAriaLabel"
      [testId]="testId"
      (clicked)="clicked($event)"
      (removed)="removed($event)"
      (focused)="focused($event)"
      (blurred)="blurred($event)"
      (selectionChange)="selectionChange($event)">
      Filter Chip
    </qk-chip>`
  })
};

export const InputChip: Story = {
  args: {
    variant: 'input',
    size: 'md',
    elevation: 'flat'
  },
  render: (args) => ({
    props: args,
    template: `<qk-chip 
      [variant]="variant" 
      [size]="size" 
      [elevation]="elevation"
      [disabled]="disabled" 
      [selected]="selected"
      [clickable]="clickable"
      [removable]="removable"
      [hasLeadingIcon]="hasLeadingIcon"
      [hasTrailingIcon]="hasTrailingIcon"
      [hasAvatar]="hasAvatar"
      [customClass]="customClass"
      [ariaLabel]="ariaLabel"
      [removeAriaLabel]="removeAriaLabel"
      [testId]="testId"
      (clicked)="clicked($event)"
      (removed)="removed($event)"
      (focused)="focused($event)"
      (blurred)="blurred($event)"
      (selectionChange)="selectionChange($event)">
      Input Chip
    </qk-chip>`
  })
};

export const SuggestionChip: Story = {
  args: {
    variant: 'suggestion',
    size: 'md',
    elevation: 'flat'
  },
  render: (args) => ({
    props: args,
    template: `<qk-chip 
      [variant]="variant" 
      [size]="size" 
      [elevation]="elevation"
      [disabled]="disabled" 
      [selected]="selected"
      [clickable]="clickable"
      [removable]="removable"
      [hasLeadingIcon]="hasLeadingIcon"
      [hasTrailingIcon]="hasTrailingIcon"
      [hasAvatar]="hasAvatar"
      [customClass]="customClass"
      [ariaLabel]="ariaLabel"
      [removeAriaLabel]="removeAriaLabel"
      [testId]="testId"
      (clicked)="clicked($event)"
      (removed)="removed($event)"
      (focused)="focused($event)"
      (blurred)="blurred($event)"
      (selectionChange)="selectionChange($event)">
      Suggestion Chip
    </qk-chip>`
  })
};

// All Variants Overview
export const AllVariants: Story = {
  render: () => ({
    template: `
    <div style="display: flex; flex-wrap: wrap; gap: 12px; align-items: center;">
      <qk-chip variant="assist" ariaLabel="Assist action">Assist Chip</qk-chip>
      <qk-chip variant="filter" ariaLabel="Filter option">Filter Chip</qk-chip>
      <qk-chip variant="input" ariaLabel="Input tag">Input Chip</qk-chip>
      <qk-chip variant="suggestion" ariaLabel="Suggestion option">Suggestion Chip</qk-chip>
    </div>
    `
  }),
  parameters: {
    docs: {
      description: {
        story: 'All four Material UI 3 chip variants'
      }
    }
  }
};

// Sizes
export const AllSizes: Story = {
  render: () => ({
    template: `
    <div style="display: flex; flex-direction: column; gap: 16px;">
      <div style="display: flex; gap: 12px; align-items: center;">
        <span style="width: 80px; font-weight: 500;">Small:</span>
        <qk-chip variant="assist" size="sm" ariaLabel="Small assist">Small Chip</qk-chip>
        <qk-chip variant="filter" size="sm" ariaLabel="Small filter">Filter</qk-chip>
        <qk-chip variant="input" size="sm" ariaLabel="Small input">Input</qk-chip>
        <qk-chip variant="suggestion" size="sm" ariaLabel="Small suggestion">Suggestion</qk-chip>
      </div>
      <div style="display: flex; gap: 12px; align-items: center;">
        <span style="width: 80px; font-weight: 500;">Medium:</span>
        <qk-chip variant="assist" size="md" ariaLabel="Medium assist">Medium Chip</qk-chip>
        <qk-chip variant="filter" size="md" ariaLabel="Medium filter">Filter</qk-chip>
        <qk-chip variant="input" size="md" ariaLabel="Medium input">Input</qk-chip>
        <qk-chip variant="suggestion" size="md" ariaLabel="Medium suggestion">Suggestion</qk-chip>
      </div>
    </div>
    `
  }),
  parameters: {
    docs: {
      description: {
        story: 'Chips in small (24px) and medium (32px) sizes'
      }
    }
  }
};

// Elevations
export const AllElevations: Story = {
  render: () => ({
    template: `
    <div style="display: flex; flex-direction: column; gap: 16px;">
      <div style="display: flex; gap: 12px; align-items: center;">
        <span style="width: 80px; font-weight: 500;">Flat:</span>
        <qk-chip variant="assist" elevation="flat" ariaLabel="Flat assist">Assist</qk-chip>
        <qk-chip variant="filter" elevation="flat" ariaLabel="Flat filter">Filter</qk-chip>
        <qk-chip variant="input" elevation="flat" ariaLabel="Flat input">Input</qk-chip>
        <qk-chip variant="suggestion" elevation="flat" ariaLabel="Flat suggestion">Suggestion</qk-chip>
      </div>
      <div style="display: flex; gap: 12px; align-items: center;">
        <span style="width: 80px; font-weight: 500;">Elevated:</span>
        <qk-chip variant="assist" elevation="elevated" ariaLabel="Elevated assist">Assist</qk-chip>
        <qk-chip variant="filter" elevation="elevated" ariaLabel="Elevated filter">Filter</qk-chip>
        <qk-chip variant="input" elevation="elevated" ariaLabel="Elevated input">Input</qk-chip>
        <qk-chip variant="suggestion" elevation="elevated" ariaLabel="Elevated suggestion">Suggestion</qk-chip>
      </div>
    </div>
    `
  }),
  parameters: {
    docs: {
      description: {
        story: 'Chips with flat and elevated styles'
      }
    }
  }
};

// With Icons
export const WithLeadingIcon: Story = {
  args: {
    variant: 'assist',
    hasLeadingIcon: true
  },
  render: (args) => ({
    props: args,
    template: `<qk-chip 
      [variant]="variant" 
      [hasLeadingIcon]="hasLeadingIcon">
      <svg slot="leading-icon" width="18" height="18" fill="currentColor" viewBox="0 0 24 24">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
      </svg>
      With Leading Icon
    </qk-chip>`
  })
};

export const WithTrailingIcon: Story = {
  args: {
    variant: 'assist',
    hasTrailingIcon: true
  },
  render: (args) => ({
    props: args,
    template: `<qk-chip 
      [variant]="variant" 
      [hasTrailingIcon]="hasTrailingIcon">
      With Trailing Icon
      <svg slot="trailing-icon" width="18" height="18" fill="currentColor" viewBox="0 0 24 24">
        <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/>
      </svg>
    </qk-chip>`
  })
};

export const WithAvatar: Story = {
  args: {
    variant: 'input',
    hasAvatar: true
  },
  render: (args) => ({
    props: args,
    template: `<qk-chip 
      [variant]="variant" 
      [hasAvatar]="hasAvatar">
      <img slot="avatar" src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face" alt="User" style="width: 100%; height: 100%; object-fit: cover;">
      John Doe
    </qk-chip>`
  })
};

export const WithAvatarInitials: Story = {
  args: {
    variant: 'input',
    hasAvatar: true
  },
  render: (args) => ({
    props: args,
    template: `<qk-chip 
      [variant]="variant" 
      [hasAvatar]="hasAvatar">
      <span slot="avatar" style="font-size: 12px; font-weight: 500;">JD</span>
      John Doe
    </qk-chip>`
  })
};

// Removable Chips
export const RemovableChip: Story = {
  args: {
    variant: 'input',
    removable: true
  },
  render: (args) => ({
    props: args,
    template: `<qk-chip 
      [variant]="variant" 
      [removable]="removable"
      (removed)="removed($event)">
      Removable Chip
    </qk-chip>`
  })
};

export const RemovableWithCustomIcon: Story = {
  args: {
    variant: 'input',
    removable: true
  },
  render: (args) => ({
    props: args,
    template: `<qk-chip 
      [variant]="variant" 
      [removable]="removable"
      (removed)="removed($event)">
      Custom Remove Icon
      <svg slot="remove-icon" width="18" height="18" fill="currentColor" viewBox="0 0 24 24">
        <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
      </svg>
    </qk-chip>`
  })
};

// Interactive States
export const FilterChipInteractive: Story = {
  args: {
    variant: 'filter',
    selected: false
  },
  render: (args) => ({
    props: args,
    template: `
    <div style="display: flex; flex-direction: column; gap: 12px;">
      <qk-chip 
        variant="filter" 
        [selected]="false"
        (selectionChange)="selectionChange($event)">
        Unselected Filter
      </qk-chip>
      <qk-chip 
        variant="filter" 
        [selected]="true"
        (selectionChange)="selectionChange($event)">
        Selected Filter
      </qk-chip>
    </div>
    `
  }),
  parameters: {
    docs: {
      description: {
        story: 'Filter chips with unselected and selected states'
      }
    }
  }
};

export const DisabledStates: Story = {
  render: () => ({
    template: `
    <div style="display: flex; flex-wrap: wrap; gap: 12px;">
      <qk-chip variant="assist" [disabled]="true" ariaLabel="Disabled assist chip">Disabled Assist</qk-chip>
      <qk-chip variant="filter" [disabled]="true" ariaLabel="Disabled filter chip">Disabled Filter</qk-chip>
      <qk-chip variant="input" [disabled]="true" [removable]="true" ariaLabel="Disabled input chip">Disabled Input</qk-chip>
      <qk-chip variant="suggestion" [disabled]="true" ariaLabel="Disabled suggestion chip">Disabled Suggestion</qk-chip>
    </div>
    `
  }),
  parameters: {
    docs: {
      description: {
        story: 'Chips in disabled state'
      }
    }
  }
};

// Complex Examples
export const ChipSet: Story = {
  render: () => ({
    template: `
    <div style="display: flex; flex-direction: column; gap: 20px;">
      <div>
        <h4 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 500;">Assist Chips</h4>
        <ul role="list" style="display: flex; flex-wrap: wrap; gap: 8px; list-style: none; margin: 0; padding: 0;">
          <li>
            <qk-chip variant="assist" [hasLeadingIcon]="true" [inList]="true">
              <svg slot="leading-icon" width="18" height="18" fill="currentColor" viewBox="0 0 24 24">
                <path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zM12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"/>
              </svg>
              Set reminder
            </qk-chip>
          </li>
          <li>
            <qk-chip variant="assist" [hasLeadingIcon]="true" [inList]="true">
              <svg slot="leading-icon" width="18" height="18" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
              </svg>
              Add to cart
            </qk-chip>
          </li>
          <li>
            <qk-chip variant="assist" [inList]="true">Get directions</qk-chip>
          </li>
        </ul>
      </div>

      <div>
        <h4 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 500;">Filter Chips</h4>
        <ul role="list" style="display: flex; flex-wrap: wrap; gap: 8px; list-style: none; margin: 0; padding: 0;">
          <li>
            <qk-chip variant="filter" [selected]="true" [inList]="true" ariaLabel="Popular filter, currently selected">Popular</qk-chip>
          </li>
          <li>
            <qk-chip variant="filter" [inList]="true" ariaLabel="Nearby filter">Nearby</qk-chip>
          </li>
          <li>
            <qk-chip variant="filter" [inList]="true" ariaLabel="Price filter">Price</qk-chip>
          </li>
          <li>
            <qk-chip variant="filter" [inList]="true" ariaLabel="Rating filter">Rating</qk-chip>
          </li>
        </ul>
      </div>

      <div>
        <h4 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 500;">Input Chips</h4>
        <ul role="list" style="display: flex; flex-wrap: wrap; gap: 8px; list-style: none; margin: 0; padding: 0;">
          <li>
            <qk-chip variant="input" [hasAvatar]="true" [removable]="true" [inList]="true">
              <span slot="avatar" style="font-size: 12px; font-weight: 500;">JS</span>
              JavaScript
            </qk-chip>
          </li>
          <li>
            <qk-chip variant="input" [hasAvatar]="true" [removable]="true" [inList]="true">
              <span slot="avatar" style="font-size: 12px; font-weight: 500;">TS</span>
              TypeScript
            </qk-chip>
          </li>
          <li>
            <qk-chip variant="input" [removable]="true" [inList]="true">Angular</qk-chip>
          </li>
          <li>
            <qk-chip variant="input" [removable]="true" [inList]="true">React</qk-chip>
          </li>
        </ul>
      </div>

      <div>
        <h4 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 500;">Suggestion Chips</h4>
        <div style="display: flex; flex-wrap: wrap; gap: 8px;">
          <qk-chip variant="suggestion">Coffee shops</qk-chip>
          <qk-chip variant="suggestion">Restaurants</qk-chip>
          <qk-chip variant="suggestion">Gas stations</qk-chip>
          <qk-chip variant="suggestion">Hotels</qk-chip>
        </div>
      </div>
    </div>
    `
  }),
  parameters: {
    docs: {
      description: {
        story: 'Real-world example showing different chip types in context'
      }
    }
  }
};
export const FocusAndBlurEvents: Story = {
